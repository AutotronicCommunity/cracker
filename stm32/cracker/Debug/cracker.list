
cracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080bc  080080bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c4  080080c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001e4  080082b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  080082b0  00021b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ed5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000346a  00000000  00000000  000390e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245fa  00000000  00000000  0003e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010474  00000000  00000000  00062eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce598  00000000  00000000  0007332e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001418c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  00141944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f28 	.word	0x08007f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007f28 	.word	0x08007f28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <read_and_reset_timer>:
#include "cracker.h"

/*Try not to write blocking functions.*/

uint32_t read_and_reset_timer(TIM_HandleTypeDef *htim)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// Read timer only if it is stopped. If it isn't stopped stop and reset timer.
	if(htim->Instance->CCR1 != 0x00)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d009      	beq.n	80004ee <read_and_reset_timer+0x26>
	{
		htim->Instance->CCR1 = 0;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
		htim->Instance->CNT = 0x00000000;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
		return 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e008      	b.n	8000500 <read_and_reset_timer+0x38>
	}

	uint32_t timer_count;
	timer_count = htim->Instance->CNT;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f4:	60fb      	str	r3, [r7, #12]

	//Reset the timer counter;
	htim->Instance->CNT = 0x00000000;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
	return timer_count;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <clean_rx_buffer>:

void clean_rx_buffer(UART_HandleTypeDef *huart){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*Cleans (reads) the entire RX buffer*/
	uint8_t recieveBuffer[8];
	HAL_UART_Receive(huart, recieveBuffer, 8, RX_TIMEOUT);
 8000514:	f107 0108 	add.w	r1, r7, #8
 8000518:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800051c:	2208      	movs	r2, #8
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f003 fb04 	bl	8003b2c <HAL_UART_Receive>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <transmit_recieve_byte>:

uint32_t transmit_recieve_byte(UART_HandleTypeDef *huart, uint8_t transmitedByte, uint8_t expectedRxByte){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
 8000538:	4613      	mov	r3, r2
 800053a:	70bb      	strb	r3, [r7, #2]
	/* Transmits a uart byte and checks if the response matches the desired one.*/
	uint8_t transmitBuffer[4];
	uint8_t recieveBuffer[4];

	clean_rx_buffer(huart);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ffe5 	bl	800050c <clean_rx_buffer>

	transmitBuffer[0] = transmitedByte;
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	733b      	strb	r3, [r7, #12]
	if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2201      	movs	r2, #1
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f003 fa53 	bl	80039fa <HAL_UART_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <transmit_recieve_byte+0x32>
		return TRANSMIT_ERR;
 800055a:	2301      	movs	r3, #1
 800055c:	e016      	b.n	800058c <transmit_recieve_byte+0x60>
	}
	if(HAL_UART_Receive(huart, recieveBuffer, 1, RX_TIMEOUT) != HAL_OK){
 800055e:	f107 0108 	add.w	r1, r7, #8
 8000562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000566:	2201      	movs	r2, #1
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f003 fadf 	bl	8003b2c <HAL_UART_Receive>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <transmit_recieve_byte+0x4c>
		return NO_RESPONSE;
 8000574:	2302      	movs	r3, #2
 8000576:	e009      	b.n	800058c <transmit_recieve_byte+0x60>
	}
	if(recieveBuffer[0] != expectedRxByte)
 8000578:	7a3b      	ldrb	r3, [r7, #8]
 800057a:	78ba      	ldrb	r2, [r7, #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <transmit_recieve_byte+0x58>
	{
		return INCORRECT_TARGET_RESPONSE;
 8000580:	2303      	movs	r3, #3
 8000582:	e003      	b.n	800058c <transmit_recieve_byte+0x60>
	}

	clean_rx_buffer(huart);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ffc1 	bl	800050c <clean_rx_buffer>

	return RX_TX_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <init_target_connection>:

uint32_t init_target_connection(UART_HandleTypeDef *huart){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	/* This functions initializes the uart connection to target device. */
	uint32_t tx_rx_status;
	uint8_t transmitBuffer[4];

	// First set the uart peripheral baud rate to 9600.
	huart->Init.BaudRate = 9600;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a2:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(huart) != HAL_OK){
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f003 f9db 	bl	8003960 <HAL_UART_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <init_target_connection+0x20>
	  return HW_BAUDRATE_CHANGE_ERR;
 80005b0:	2306      	movs	r3, #6
 80005b2:	e031      	b.n	8000618 <init_target_connection+0x84>
	}

	// Send the first 16x 0x00 bytes
	int i;
	for(i =0; i < 16; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e013      	b.n	80005e2 <init_target_connection+0x4e>
		transmitBuffer[0] = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	733b      	strb	r3, [r7, #12]
		if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2201      	movs	r2, #1
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f003 fa17 	bl	80039fa <HAL_UART_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <init_target_connection+0x42>
			return TRANSMIT_ERR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e020      	b.n	8000618 <init_target_connection+0x84>
		}
		// Wait the required 20ms
		HAL_Delay(20);
 80005d6:	2014      	movs	r0, #20
 80005d8:	f000 fdd2 	bl	8001180 <HAL_Delay>
	for(i =0; i < 16; i++){
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	dde8      	ble.n	80005ba <init_target_connection+0x26>
	}

	if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 80005e8:	f107 010c 	add.w	r1, r7, #12
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	2201      	movs	r2, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f003 fa02 	bl	80039fa <HAL_UART_Transmit>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <init_target_connection+0x6c>
		return TRANSMIT_ERR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e00b      	b.n	8000618 <init_target_connection+0x84>
	}

	// Check if the baud rate switch was successful by asking target for bootloader version.
	// Bootloader version is returned as a string e.g. "VER.1.48", so the first responded byte should be 'V' or hex 0x56.
	tx_rx_status = transmit_recieve_byte(huart, 0xFB, 0x56);
 8000600:	2256      	movs	r2, #86	; 0x56
 8000602:	21fb      	movs	r1, #251	; 0xfb
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff91 	bl	800052c <transmit_recieve_byte>
 800060a:	6138      	str	r0, [r7, #16]
	if(tx_rx_status != RX_TX_OK){
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <init_target_connection+0x82>
		return tx_rx_status;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	e000      	b.n	8000618 <init_target_connection+0x84>
	}
	return CON_INIT_OK;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <set_baudrate>:

uint32_t set_baudrate(UART_HandleTypeDef *huart, uint32_t baudrate){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	/*Set the desired baud rate.*/
	uint32_t tx_rx_status;
	// Initiate the baud rate change
	tx_rx_status = transmit_recieve_byte(huart, 0xB0, 0xB0);
 800062a:	22b0      	movs	r2, #176	; 0xb0
 800062c:	21b0      	movs	r1, #176	; 0xb0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff7c 	bl	800052c <transmit_recieve_byte>
 8000634:	60f8      	str	r0, [r7, #12]
	if(tx_rx_status != RX_TX_OK){
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <set_baudrate+0x20>
		return tx_rx_status;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	e055      	b.n	80006ec <set_baudrate+0xcc>
	}

	switch(baudrate){
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000646:	d01e      	beq.n	8000686 <set_baudrate+0x66>
 8000648:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800064c:	d806      	bhi.n	800065c <set_baudrate+0x3c>
 800064e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000652:	d00a      	beq.n	800066a <set_baudrate+0x4a>
 8000654:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000658:	d00e      	beq.n	8000678 <set_baudrate+0x58>
 800065a:	e029      	b.n	80006b0 <set_baudrate+0x90>
 800065c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000660:	d018      	beq.n	8000694 <set_baudrate+0x74>
 8000662:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000666:	d01c      	beq.n	80006a2 <set_baudrate+0x82>
 8000668:	e022      	b.n	80006b0 <set_baudrate+0x90>
		case 9600:
			tx_rx_status = transmit_recieve_byte(huart, 0xB0, 0xB0);
 800066a:	22b0      	movs	r2, #176	; 0xb0
 800066c:	21b0      	movs	r1, #176	; 0xb0
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff5c 	bl	800052c <transmit_recieve_byte>
 8000674:	60f8      	str	r0, [r7, #12]
			break;
 8000676:	e01d      	b.n	80006b4 <set_baudrate+0x94>

		case 19200:
			tx_rx_status = transmit_recieve_byte(huart, 0xB1, 0xB1);
 8000678:	22b1      	movs	r2, #177	; 0xb1
 800067a:	21b1      	movs	r1, #177	; 0xb1
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff55 	bl	800052c <transmit_recieve_byte>
 8000682:	60f8      	str	r0, [r7, #12]
			break;
 8000684:	e016      	b.n	80006b4 <set_baudrate+0x94>

		case 38400:
			tx_rx_status = transmit_recieve_byte(huart, 0xB2, 0xB2);
 8000686:	22b2      	movs	r2, #178	; 0xb2
 8000688:	21b2      	movs	r1, #178	; 0xb2
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff4e 	bl	800052c <transmit_recieve_byte>
 8000690:	60f8      	str	r0, [r7, #12]
			break;
 8000692:	e00f      	b.n	80006b4 <set_baudrate+0x94>

		case 57600:
			tx_rx_status = transmit_recieve_byte(huart, 0xB3, 0xB3);
 8000694:	22b3      	movs	r2, #179	; 0xb3
 8000696:	21b3      	movs	r1, #179	; 0xb3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff47 	bl	800052c <transmit_recieve_byte>
 800069e:	60f8      	str	r0, [r7, #12]
			break;
 80006a0:	e008      	b.n	80006b4 <set_baudrate+0x94>

		case 115200:
			tx_rx_status = transmit_recieve_byte(huart, 0xB4, 0xB4);
 80006a2:	22b4      	movs	r2, #180	; 0xb4
 80006a4:	21b4      	movs	r1, #180	; 0xb4
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff40 	bl	800052c <transmit_recieve_byte>
 80006ac:	60f8      	str	r0, [r7, #12]
			break;
 80006ae:	e001      	b.n	80006b4 <set_baudrate+0x94>

		default:
			return INCORRECT_BAUDRATE;
 80006b0:	2305      	movs	r3, #5
 80006b2:	e01b      	b.n	80006ec <set_baudrate+0xcc>
	}

	// Check if baud rate change handshake was successful.
	if(tx_rx_status != RX_TX_OK){
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <set_baudrate+0x9e>
		return BAURATE_HANDSHAKE_FAILED;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e016      	b.n	80006ec <set_baudrate+0xcc>
	}
	// Now change the uart baud rate.
	huart->Init.BaudRate = baudrate;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(huart) != HAL_OK){
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f003 f94b 	bl	8003960 <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <set_baudrate+0xb4>
	  return HW_BAUDRATE_CHANGE_ERR;
 80006d0:	2306      	movs	r3, #6
 80006d2:	e00b      	b.n	80006ec <set_baudrate+0xcc>
	}

	// Check if the baud rate switch was successful by asking target for bootloader version.
	// Bootloader version is returned as a string e.g. "VER.1.48", so the first responded byte should be 'V' or hex 0x56.
	tx_rx_status = transmit_recieve_byte(huart, 0xFB, 0x56);
 80006d4:	2256      	movs	r2, #86	; 0x56
 80006d6:	21fb      	movs	r1, #251	; 0xfb
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff27 	bl	800052c <transmit_recieve_byte>
 80006de:	60f8      	str	r0, [r7, #12]
	if(tx_rx_status != RX_TX_OK){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <set_baudrate+0xca>
		return ERROR_AFTER_BAUDRATE_SWITCH;
 80006e6:	2307      	movs	r3, #7
 80006e8:	e000      	b.n	80006ec <set_baudrate+0xcc>
	}

	return BAUDRATE_CHANGE_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <target_reset>:

void target_reset(GPIO_TypeDef *port, uint16_t reset_pin, uint16_t mode_pin){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
 8000700:	4613      	mov	r3, r2
 8000702:	803b      	strh	r3, [r7, #0]
	/*Reset the target and pull mode pin to low.*/
	HAL_GPIO_WritePin(port, mode_pin, GPIO_PIN_RESET);
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f001 f81e 	bl	800174c <HAL_GPIO_WritePin>
//	HAL_Delay(500);
	HAL_GPIO_WritePin(port, reset_pin, GPIO_PIN_RESET);
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f001 f818 	bl	800174c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f000 fd2f 	bl	8001180 <HAL_Delay>
	HAL_GPIO_WritePin(port, reset_pin, GPIO_PIN_SET);
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f001 f80f 	bl	800174c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800072e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000732:	f000 fd25 	bl	8001180 <HAL_Delay>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <send_one_key_byte>:

void send_one_key_byte(uint8_t byte, uint8_t byte_pos,  UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim){
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	60ba      	str	r2, [r7, #8]
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	460b      	mov	r3, r1
 8000750:	73bb      	strb	r3, [r7, #14]
	// byte_pos max value is 6!
	uint8_t transmitBuffer[2];

	//Initial comm part
	transmitBuffer[0] = 0x50;
 8000752:	2350      	movs	r3, #80	; 0x50
 8000754:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	transmitBuffer[1] = 0x70;
 8000758:	2370      	movs	r3, #112	; 0x70
 800075a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_UART_Transmit(huart, transmitBuffer, 2, TX_TIMEOUT);
 800075e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000762:	2364      	movs	r3, #100	; 0x64
 8000764:	2202      	movs	r2, #2
 8000766:	68b8      	ldr	r0, [r7, #8]
 8000768:	f003 f947 	bl	80039fa <HAL_UART_Transmit>
	HAL_Delay(100);
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f000 fd07 	bl	8001180 <HAL_Delay>
	transmitBuffer[0] = 0x70;
 8000772:	2370      	movs	r3, #112	; 0x70
 8000774:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT);
 8000778:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800077c:	2364      	movs	r3, #100	; 0x64
 800077e:	2201      	movs	r2, #1
 8000780:	68b8      	ldr	r0, [r7, #8]
 8000782:	f003 f93a 	bl	80039fa <HAL_UART_Transmit>
	HAL_Delay(100);
 8000786:	2064      	movs	r0, #100	; 0x64
 8000788:	f000 fcfa 	bl	8001180 <HAL_Delay>

	uint8_t header[] = {0xf5, 0xdf, 0xff, 0x00, 0x07};
 800078c:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <send_one_key_byte+0xb0>)
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(huart, header, sizeof(header), TX_TIMEOUT);
 800079c:	f107 011c 	add.w	r1, r7, #28
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2205      	movs	r2, #5
 80007a4:	68b8      	ldr	r0, [r7, #8]
 80007a6:	f003 f928 	bl	80039fa <HAL_UART_Transmit>

	HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 fce8 	bl	8001180 <HAL_Delay>
	// Reset the timer
	read_and_reset_timer(htim);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe89 	bl	80004c8 <read_and_reset_timer>

	uint8_t key[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	2370      	movs	r3, #112	; 0x70
 80007c2:	76fb      	strb	r3, [r7, #27]
	key[byte_pos] = byte;
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007ca:	4413      	add	r3, r2
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	f803 2c14 	strb.w	r2, [r3, #-20]
	HAL_UART_Transmit(huart, key, sizeof(key), TX_TIMEOUT);
 80007d2:	f107 0114 	add.w	r1, r7, #20
 80007d6:	2364      	movs	r3, #100	; 0x64
 80007d8:	2208      	movs	r2, #8
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f003 f90d 	bl	80039fa <HAL_UART_Transmit>
	HAL_Delay(100);
 80007e0:	2064      	movs	r0, #100	; 0x64
 80007e2:	f000 fccd 	bl	8001180 <HAL_Delay>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08007f40 	.word	0x08007f40

080007f4 <usb_uart_print>:
/* USER CODE BEGIN 0 */

/*Please please please don't use print functions for debugging. Use print functions only for
 *status update, that will be used once the program will be in a state to run standalone.*/

void usb_uart_print(uint8_t text[], uint32_t text_size){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	/*7 bit ascii is retarded. - Terry Davis.*/
	// Don't do sizeof dynamic arrays as function arguments. Learned that the hard way.
    CDC_Transmit_FS((uint8_t*)text, text_size);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b29b      	uxth	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f006 fded 	bl	80073e4 <CDC_Transmit_FS>
    HAL_Delay(100);
 800080a:	2064      	movs	r0, #100	; 0x64
 800080c:	f000 fcb8 	bl	8001180 <HAL_Delay>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <send_1byte>:
    return result;
}


uint32_t send_1byte(uint8_t byte, uint8_t byte_pos)
{
 8000818:	b5b0      	push	{r4, r5, r7, lr}
 800081a:	b098      	sub	sp, #96	; 0x60
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]

	uint32_t timer_ticks;
	uint32_t returncode;
	// Reset target first
	target_reset(GPIOE, target_reset_Pin, target_mode_Pin);
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	2120      	movs	r1, #32
 800082c:	4831      	ldr	r0, [pc, #196]	; (80008f4 <send_1byte+0xdc>)
 800082e:	f7ff ff61 	bl	80006f4 <target_reset>

	// Initiate the target communication
	returncode = init_target_connection(&huart1);
 8000832:	4831      	ldr	r0, [pc, #196]	; (80008f8 <send_1byte+0xe0>)
 8000834:	f7ff feae 	bl	8000594 <init_target_connection>
 8000838:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(returncode != CON_INIT_OK)
 800083a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800083c:	2b00      	cmp	r3, #0
 800083e:	d01c      	beq.n	800087a <send_1byte+0x62>
	{
		char errorcodeNumberStr[2];
		itoa(returncode, errorcodeNumberStr, 10);
 8000840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000842:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000846:	220a      	movs	r2, #10
 8000848:	4618      	mov	r0, r3
 800084a:	f007 fa4f 	bl	8007cec <itoa>
		uint8_t init_error_text[] = "Error while initializing target communication. Error number is: ";
 800084e:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <send_1byte+0xe4>)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4611      	mov	r1, r2
 8000856:	2241      	movs	r2, #65	; 0x41
 8000858:	4618      	mov	r0, r3
 800085a:	f007 fa59 	bl	8007d10 <memcpy>
		usb_uart_print(init_error_text, sizeof(init_error_text));
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2141      	movs	r1, #65	; 0x41
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffc5 	bl	80007f4 <usb_uart_print>
		usb_uart_print((uint8_t *)errorcodeNumberStr, sizeof(errorcodeNumberStr));
 800086a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffbf 	bl	80007f4 <usb_uart_print>
		return 0;
 8000876:	2300      	movs	r3, #0
 8000878:	e038      	b.n	80008ec <send_1byte+0xd4>
	}

	returncode = set_baudrate(&huart1, 115200);
 800087a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800087e:	481e      	ldr	r0, [pc, #120]	; (80008f8 <send_1byte+0xe0>)
 8000880:	f7ff fece 	bl	8000620 <set_baudrate>
 8000884:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(returncode != BAUDRATE_CHANGE_OK)
 8000886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000888:	2b00      	cmp	r3, #0
 800088a:	d024      	beq.n	80008d6 <send_1byte+0xbe>
	{
		char errorcodeNumberStr[2];
		itoa(returncode, errorcodeNumberStr, 10);
 800088c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800088e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000892:	220a      	movs	r2, #10
 8000894:	4618      	mov	r0, r3
 8000896:	f007 fa29 	bl	8007cec <itoa>
		uint8_t baudrate_error_text[] = "Error while switching baud rate. Error number is: ";
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <send_1byte+0xe8>)
 800089c:	f107 040c 	add.w	r4, r7, #12
 80008a0:	461d      	mov	r5, r3
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ae:	682b      	ldr	r3, [r5, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	8022      	strh	r2, [r4, #0]
 80008b4:	3402      	adds	r4, #2
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	7023      	strb	r3, [r4, #0]
		usb_uart_print(baudrate_error_text, sizeof(baudrate_error_text));
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	2133      	movs	r1, #51	; 0x33
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff97 	bl	80007f4 <usb_uart_print>
		usb_uart_print((uint8_t *)errorcodeNumberStr, sizeof(errorcodeNumberStr));
 80008c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008ca:	2102      	movs	r1, #2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff91 	bl	80007f4 <usb_uart_print>
		return 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e00a      	b.n	80008ec <send_1byte+0xd4>
	}

	send_one_key_byte(byte, byte_pos, &huart1, &htim2);
 80008d6:	79b9      	ldrb	r1, [r7, #6]
 80008d8:	79f8      	ldrb	r0, [r7, #7]
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <send_1byte+0xec>)
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <send_1byte+0xe0>)
 80008de:	f7ff ff2f 	bl	8000740 <send_one_key_byte>
	timer_ticks = read_and_reset_timer(&htim2);
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <send_1byte+0xec>)
 80008e4:	f7ff fdf0 	bl	80004c8 <read_and_reset_timer>
 80008e8:	65b8      	str	r0, [r7, #88]	; 0x58

	return timer_ticks;
 80008ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3760      	adds	r7, #96	; 0x60
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bdb0      	pop	{r4, r5, r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000210 	.word	0x20000210
 80008fc:	08007f48 	.word	0x08007f48
 8000900:	08007f8c 	.word	0x08007f8c
 8000904:	20000250 	.word	0x20000250

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	b0a8      	sub	sp, #160	; 0xa0
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090e:	f000 fbc5 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000912:	f000 f8d9 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000916:	f000 f9b7 	bl	8000c88 <MX_GPIO_Init>
  MX_TIM2_Init();
 800091a:	f000 f93f 	bl	8000b9c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800091e:	f000 f989 	bl	8000c34 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000922:	f006 fca1 	bl	8007268 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092a:	f000 fc29 	bl	8001180 <HAL_Delay>
	uint8_t initial_text[] = "Press key0 to start cracker.\n";
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <main+0x1a8>)
 8000930:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000934:	461d      	mov	r5, r3
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800093e:	c407      	stmia	r4!, {r0, r1, r2}
 8000940:	8023      	strh	r3, [r4, #0]
	usb_uart_print(initial_text, sizeof(initial_text));
 8000942:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000946:	211e      	movs	r1, #30
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff53 	bl	80007f4 <usb_uart_print>
	//Wait for start button press (key0 on board).
	while(HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin));
 800094e:	bf00      	nop
 8000950:	2110      	movs	r1, #16
 8000952:	4858      	ldr	r0, [pc, #352]	; (8000ab4 <main+0x1ac>)
 8000954:	f000 fee2 	bl	800171c <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f8      	bne.n	8000950 <main+0x48>

	uint8_t start_text[] = "Cracker started.\n";
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <main+0x1b0>)
 8000960:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000964:	461d      	mov	r5, r3
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	8023      	strh	r3, [r4, #0]
	usb_uart_print(start_text, sizeof(start_text));
 800096e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000972:	2112      	movs	r1, #18
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff3d 	bl	80007f4 <usb_uart_print>
	HAL_Delay(500);
 800097a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800097e:	f000 fbff 	bl	8001180 <HAL_Delay>

	uint32_t longest_tick = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t longest_tick_byte = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	int i;
	for(i = 0; i < 256; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000994:	e05e      	b.n	8000a54 <main+0x14c>
	{


		uint32_t timer_ticks;
		timer_ticks = send_1byte(i, 0);
 8000996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff3a 	bl	8000818 <send_1byte>
 80009a4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

		if(timer_ticks > longest_tick)
 80009a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80009ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d907      	bls.n	80009c4 <main+0xbc>
		{
			longest_tick = timer_ticks;
 80009b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			longest_tick_byte = i;
 80009bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}

		uint8_t time_text[] = "Ticks for Byte  ";
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <main+0x1b4>)
 80009c6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	7023      	strb	r3, [r4, #0]
		usb_uart_print(time_text, sizeof(time_text));
 80009d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d8:	2111      	movs	r1, #17
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff0a 	bl	80007f4 <usb_uart_print>

		char byte_no[3];
		itoa(i, byte_no, 10);
 80009e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009e4:	220a      	movs	r2, #10
 80009e6:	4619      	mov	r1, r3
 80009e8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80009ec:	f007 f97e 	bl	8007cec <itoa>
		usb_uart_print((uint8_t *)byte_no, sizeof(byte_no));
 80009f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009f4:	2103      	movs	r1, #3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fefc 	bl	80007f4 <usb_uart_print>

		uint8_t time_text2[] = " are: ";
 80009fc:	4a30      	ldr	r2, [pc, #192]	; (8000ac0 <main+0x1b8>)
 80009fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	6018      	str	r0, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	8019      	strh	r1, [r3, #0]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	0c0a      	lsrs	r2, r1, #16
 8000a10:	701a      	strb	r2, [r3, #0]
		usb_uart_print(time_text2, sizeof(time_text2));
 8000a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a16:	2107      	movs	r1, #7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff feeb 	bl	80007f4 <usb_uart_print>

		char timer_ticks_str[10];
		itoa(timer_ticks, timer_ticks_str, 10);
 8000a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a26:	220a      	movs	r2, #10
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f007 f95f 	bl	8007cec <itoa>
		usb_uart_print((uint8_t *)timer_ticks_str, sizeof(timer_ticks_str));
 8000a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a32:	210a      	movs	r1, #10
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fedd 	bl	80007f4 <usb_uart_print>

		uint8_t time_text3[] = "\n";
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		usb_uart_print(time_text3, sizeof(time_text3));
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fed5 	bl	80007f4 <usb_uart_print>
	for(i = 0; i < 256; i++)
 8000a4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a4e:	3301      	adds	r3, #1
 8000a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a58:	2bff      	cmp	r3, #255	; 0xff
 8000a5a:	dd9c      	ble.n	8000996 <main+0x8e>

	}

	uint8_t time_text4[] = "Longest tick recorded at byte no: ";
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <main+0x1bc>)
 8000a5e:	463c      	mov	r4, r7
 8000a60:	461d      	mov	r5, r3
 8000a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	8022      	strh	r2, [r4, #0]
 8000a70:	3402      	adds	r4, #2
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	7023      	strb	r3, [r4, #0]
	usb_uart_print(time_text4, sizeof(time_text4));
 8000a76:	463b      	mov	r3, r7
 8000a78:	2123      	movs	r1, #35	; 0x23
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff feba 	bl	80007f4 <usb_uart_print>

	char longest_byte_no[3];
	itoa(longest_tick_byte, longest_byte_no, 10);
 8000a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a84:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a88:	220a      	movs	r2, #10
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 f92e 	bl	8007cec <itoa>
	usb_uart_print((uint8_t *)longest_byte_no, sizeof(longest_byte_no));
 8000a90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a94:	2103      	movs	r1, #3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff feac 	bl	80007f4 <usb_uart_print>

	uint8_t time_text5[] = "\n";
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	usb_uart_print(time_text5, sizeof(time_text5));
 8000aa2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fea3 	bl	80007f4 <usb_uart_print>
  {
 8000aae:	e73a      	b.n	8000926 <main+0x1e>
 8000ab0:	08007fc0 	.word	0x08007fc0
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	08007fe0 	.word	0x08007fe0
 8000abc:	08007ff4 	.word	0x08007ff4
 8000ac0:	08008008 	.word	0x08008008
 8000ac4:	08008010 	.word	0x08008010

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f007 f925 	bl	8007d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b3c:	23a8      	movs	r3, #168	; 0xa8
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 ffbd 	bl	8002acc <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b58:	f000 f92c 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2105      	movs	r1, #5
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fa16 	bl	8002fac <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b86:	f000 f915 	bl	8000db4 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	; 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000be2:	f002 fbd5 	bl	8003390 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f8e2 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000bfe:	f002 fc41 	bl	8003484 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f8d4 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM2_Init+0x94>)
 8000c1a:	f002 fe25 	bl	8003868 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f8c6 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000250 	.word	0x20000250

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_USART1_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	f002 fe78 	bl	8003960 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f89d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000210 	.word	0x20000210
 8000c84:	40011000 	.word	0x40011000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2a      	ldr	r2, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_GPIO_Init+0x11c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(target_reset_GPIO_Port, target_reset_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2120      	movs	r1, #32
 8000d12:	4825      	ldr	r0, [pc, #148]	; (8000da8 <MX_GPIO_Init+0x120>)
 8000d14:	f000 fd1a 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(target_mode_GPIO_Port, target_mode_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_GPIO_Init+0x120>)
 8000d1e:	f000 fd15 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : start_button_Pin */
  GPIO_InitStruct.Pin = start_button_Pin;
 8000d22:	2310      	movs	r3, #16
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(start_button_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	481c      	ldr	r0, [pc, #112]	; (8000da8 <MX_GPIO_Init+0x120>)
 8000d36:	f000 fb57 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : target_reset_Pin */
  GPIO_InitStruct.Pin = target_reset_Pin;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d3e:	2311      	movs	r3, #17
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(target_reset_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x120>)
 8000d52:	f000 fb49 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : target_mode_Pin */
  GPIO_InitStruct.Pin = target_mode_Pin;
 8000d56:	2340      	movs	r3, #64	; 0x40
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(target_mode_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <MX_GPIO_Init+0x120>)
 8000d6e:	f000 fb3b 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : tx_trigger_Pin rx_trigger_Pin */
  GPIO_InitStruct.Pin = tx_trigger_Pin|rx_trigger_Pin;
 8000d72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_GPIO_Init+0x124>)
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480a      	ldr	r0, [pc, #40]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000d88:	f000 fb2e 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2017      	movs	r0, #23
 8000d92:	f000 faf2 	bl	800137a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d96:	2017      	movs	r0, #23
 8000d98:	f000 fb0b 	bl	80013b2 <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	10210000 	.word	0x10210000
 8000db0:	40020800 	.word	0x40020800

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dba:	e7fe      	b.n	8000dba <Error_Handler+0x6>

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1c:	d10d      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_TIM_Base_MspInit+0x3c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_UART_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12c      	bne.n	8000ec8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_UART_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <HAL_UART_MspInit+0x8c>)
 8000ec4:	f000 fa90 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f90a 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <EXTI9_5_IRQHandler+0x64>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d017      	beq.n	8000f70 <EXTI9_5_IRQHandler+0x40>
	  // Timer must be stopped and reset to start again.
	  if((htim2.Instance->CCR1 == 0x00) & (htim2.Instance->CNT == 0x00))
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <EXTI9_5_IRQHandler+0x68>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <EXTI9_5_IRQHandler+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <EXTI9_5_IRQHandler+0x50>
	  {
		  HAL_TIM_Base_Start(&htim2);
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <EXTI9_5_IRQHandler+0x68>)
 8000f6a:	f002 fa3c 	bl	80033e6 <HAL_TIM_Base_Start>
 8000f6e:	e007      	b.n	8000f80 <EXTI9_5_IRQHandler+0x50>

  }
  else
  {
	  // Don't do anything if timer is stopped.
	  if(htim2.Instance->CCR1 != 0x00)
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <EXTI9_5_IRQHandler+0x68>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <EXTI9_5_IRQHandler+0x50>
	  {
		  HAL_TIM_Base_Stop(&htim2);
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <EXTI9_5_IRQHandler+0x68>)
 8000f7c:	f002 fa57 	bl	800342e <HAL_TIM_Base_Stop>
	  }

  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f80:	2080      	movs	r0, #128	; 0x80
 8000f82:	f000 fbfd 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f8a:	f000 fbf9 	bl	8001780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013c00 	.word	0x40013c00
 8000f98:	20000250 	.word	0x20000250

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f000 fd60 	bl	8001a66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001764 	.word	0x20001764

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f006 fe42 	bl	8007c68 <__errno>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20020000 	.word	0x20020000
 8001010:	00000400 	.word	0x00000400
 8001014:	20000200 	.word	0x20000200
 8001018:	20001b70 	.word	0x20001b70

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <SystemInit+0x28>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <SystemInit+0x28>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0x28>)
 8001032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001036:	609a      	str	r2, [r3, #8]
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800104c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800104e:	e003      	b.n	8001058 <LoopCopyDataInit>

08001050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001056:	3104      	adds	r1, #4

08001058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800105c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001060:	d3f6      	bcc.n	8001050 <CopyDataInit>
  ldr  r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001064:	e002      	b.n	800106c <LoopFillZerobss>

08001066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001068:	f842 3b04 	str.w	r3, [r2], #4

0800106c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001070:	d3f9      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd3 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f006 fdfd 	bl	8007c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fc45 	bl	8000908 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001084:	080080cc 	.word	0x080080cc
  ldr  r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800108c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001090:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001094:	20001b70 	.word	0x20001b70

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f94d 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe74 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f965 	bl	80013ce <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111c:	f000 f92d 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	20000290 	.word	0x20000290

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000290 	.word	0x20000290

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff29 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff3e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff31 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffa2 	bl	8001320 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e16b      	b.n	80016dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	429a      	cmp	r2, r3
 800141e:	f040 815a 	bne.w	80016d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d00b      	beq.n	8001442 <HAL_GPIO_Init+0x5a>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	2b11      	cmp	r3, #17
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b12      	cmp	r3, #18
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0xfc>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	d123      	bne.n	800152c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	69b9      	ldr	r1, [r7, #24]
 8001528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80b4 	beq.w	80016d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <HAL_GPIO_Init+0x308>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <HAL_GPIO_Init+0x308>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_GPIO_Init+0x308>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800158a:	4a5a      	ldr	r2, [pc, #360]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <HAL_GPIO_Init+0x310>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d02b      	beq.n	800160e <HAL_GPIO_Init+0x226>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a50      	ldr	r2, [pc, #320]	; (80016fc <HAL_GPIO_Init+0x314>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d025      	beq.n	800160a <HAL_GPIO_Init+0x222>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <HAL_GPIO_Init+0x318>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01f      	beq.n	8001606 <HAL_GPIO_Init+0x21e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4e      	ldr	r2, [pc, #312]	; (8001704 <HAL_GPIO_Init+0x31c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d019      	beq.n	8001602 <HAL_GPIO_Init+0x21a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x320>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0x216>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_GPIO_Init+0x324>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00d      	beq.n	80015fa <HAL_GPIO_Init+0x212>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <HAL_GPIO_Init+0x328>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4a      	ldr	r2, [pc, #296]	; (8001714 <HAL_GPIO_Init+0x32c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d101      	bne.n	80015f2 <HAL_GPIO_Init+0x20a>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00e      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f2:	2308      	movs	r3, #8
 80015f4:	e00c      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015f6:	2306      	movs	r3, #6
 80015f8:	e00a      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e008      	b.n	8001610 <HAL_GPIO_Init+0x228>
 80015fe:	2304      	movs	r3, #4
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001602:	2303      	movs	r3, #3
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x228>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x228>
 800160e:	2300      	movs	r3, #0
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f002 0203 	and.w	r2, r2, #3
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	4093      	lsls	r3, r2
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001620:	4934      	ldr	r1, [pc, #208]	; (80016f4 <HAL_GPIO_Init+0x30c>)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162e:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_GPIO_Init+0x330>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <HAL_GPIO_Init+0x330>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_GPIO_Init+0x330>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <HAL_GPIO_Init+0x330>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_GPIO_Init+0x330>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_GPIO_Init+0x330>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x330>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_GPIO_Init+0x330>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3301      	adds	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b0f      	cmp	r3, #15
 80016e0:	f67f ae90 	bls.w	8001404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e4:	bf00      	nop
 80016e6:	3724      	adds	r7, #36	; 0x24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013800 	.word	0x40013800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	40020c00 	.word	0x40020c00
 8001708:	40021000 	.word	0x40021000
 800170c:	40021400 	.word	0x40021400
 8001710:	40021800 	.word	0x40021800
 8001714:	40021c00 	.word	0x40021c00
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e001      	b.n	800173e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	041a      	lsls	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d006      	beq.n	80017a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f806 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c8:	b08f      	sub	sp, #60	; 0x3c
 80017ca:	af0a      	add	r7, sp, #40	; 0x28
 80017cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e10f      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 ff3c 	bl	8007670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 ff09 	bl	800462e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	687e      	ldr	r6, [r7, #4]
 8001824:	466d      	mov	r5, sp
 8001826:	f106 0410 	add.w	r4, r6, #16
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001836:	e885 0003 	stmia.w	r5, {r0, r1}
 800183a:	1d33      	adds	r3, r6, #4
 800183c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f002 fde0 	bl	8004404 <USB_CoreInit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2202      	movs	r2, #2
 800184e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0d0      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fef7 	bl	8004650 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e04a      	b.n	80018fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	333d      	adds	r3, #61	; 0x3d
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333c      	adds	r3, #60	; 0x3c
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b298      	uxth	r0, r3
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3342      	adds	r3, #66	; 0x42
 80018a4:	4602      	mov	r2, r0
 80018a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	333f      	adds	r3, #63	; 0x3f
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3344      	adds	r3, #68	; 0x44
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3348      	adds	r3, #72	; 0x48
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3350      	adds	r3, #80	; 0x50
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3af      	bcc.n	8001868 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e044      	b.n	8001998 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3b5      	bcc.n	800190e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	687e      	ldr	r6, [r7, #4]
 80019aa:	466d      	mov	r5, sp
 80019ac:	f106 0410 	add.w	r4, r6, #16
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c0:	1d33      	adds	r3, r6, #4
 80019c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f002 fe6d 	bl	80046a4 <USB_DevInit>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e00d      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 feb5 	bl	8005760 <USB_DevDisconnect>

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e020      	b.n	8001a5e <HAL_PCD_Start+0x5e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d109      	bne.n	8001a40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fde1 	bl	800460c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fe65 	bl	800571e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a66:	b590      	push	{r4, r7, lr}
 8001a68:	b08d      	sub	sp, #52	; 0x34
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 ff23 	bl	80058c8 <USB_GetMode>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f040 839d 	bne.w	80021c4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fe87 	bl	80057a2 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8393 	beq.w	80021c2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fe7e 	bl	80057a2 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d107      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f002 0202 	and.w	r2, r2, #2
 8001abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fe6c 	bl	80057a2 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d161      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	0c5b      	lsrs	r3, r3, #17
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d124      	bne.n	8001b5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d035      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6a38      	ldr	r0, [r7, #32]
 8001b30:	f003 fcd2 	bl	80054d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	091b      	lsrs	r3, r3, #4
 8001b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b40:	441a      	add	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b52:	441a      	add	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	e016      	b.n	8001b88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	0c5b      	lsrs	r3, r3, #17
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d110      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6a38      	ldr	r0, [r7, #32]
 8001b72:	f003 fcb1 	bl	80054d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b82:	441a      	add	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0210 	orr.w	r2, r2, #16
 8001b96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fe00 	bl	80057a2 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bac:	d16e      	bne.n	8001c8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fe06 	bl	80057c8 <USB_ReadDevAllOutEpInterrupt>
 8001bbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bbe:	e062      	b.n	8001c86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d057      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fe2b 	bl	8005830 <USB_ReadDevOutEPInterrupt>
 8001bda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fdb0 	bl	8002760 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	015a      	lsls	r2, r3, #5
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c16:	461a      	mov	r2, r3
 8001c18:	2308      	movs	r3, #8
 8001c1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 feaa 	bl	8002978 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d008      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	461a      	mov	r2, r3
 8001c58:	2320      	movs	r3, #32
 8001c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c72:	461a      	mov	r2, r3
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d199      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fd86 	bl	80057a2 <USB_ReadInterrupts>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ca0:	f040 80c0 	bne.w	8001e24 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fda7 	bl	80057fc <USB_ReadDevAllInEpInterrupt>
 8001cae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cb4:	e0b2      	b.n	8001e1c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80a7 	beq.w	8001e10 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fdcd 	bl	800586c <USB_ReadDevInEPInterrupt>
 8001cd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d057      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69f9      	ldr	r1, [r7, #28]
 8001cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cfe:	4013      	ands	r3, r2
 8001d00:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	015a      	lsls	r2, r3, #5
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2301      	movs	r3, #1
 8001d12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d132      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	6819      	ldr	r1, [r3, #0]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4403      	add	r3, r0
 8001d3c:	3344      	adds	r3, #68	; 0x44
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4419      	add	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4403      	add	r3, r0
 8001d50:	3348      	adds	r3, #72	; 0x48
 8001d52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3350      	adds	r3, #80	; 0x50
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d108      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	f003 fdd5 	bl	800592c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f005 fcf2 	bl	8007772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2308      	movs	r3, #8
 8001da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2340      	movs	r3, #64	; 0x40
 8001de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fc1b 	bl	8002646 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f af49 	bne.w	8001cb6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fcba 	bl	80057a2 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e38:	d122      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fe26 	bl	8002ab4 <HAL_PCDEx_LPM_Callback>
 8001e68:	e002      	b.n	8001e70 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f005 fcf8 	bl	8007860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fc8c 	bl	80057a2 <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	d112      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f005 fcb4 	bl	8007814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fc6e 	bl	80057a2 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	f040 80c7 	bne.w	8002062 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2110      	movs	r1, #16
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 fd3c 	bl	800496c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef8:	e056      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f06:	461a      	mov	r2, r3
 8001f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3e:	0151      	lsls	r1, r2, #5
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	440a      	add	r2, r1
 8001f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f92:	0151      	lsls	r1, r2, #5
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	440a      	add	r2, r1
 8001f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3a3      	bcc.n	8001efa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f043 030b 	orr.w	r3, r3, #11
 8001fe2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f043 030b 	orr.w	r3, r3, #11
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	e015      	b.n	8002028 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002012:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002022:	f043 030b 	orr.w	r3, r3, #11
 8002026:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800203a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800204c:	461a      	mov	r2, r3
 800204e:	f003 fc6d 	bl	800592c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fb9b 	bl	80057a2 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002076:	d124      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fc31 	bl	80058e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fcd1 	bl	8004a2e <USB_GetDevSpeed>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681c      	ldr	r4, [r3, #0]
 8002098:	f001 f946 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 800209c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	4620      	mov	r0, r4
 80020a8:	f002 fa0e 	bl	80044c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 fb88 	bl	80077c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fb6b 	bl	80057a2 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d10a      	bne.n	80020ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 fb65 	bl	80077a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f002 0208 	and.w	r2, r2, #8
 80020ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fb56 	bl	80057a2 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002100:	d10f      	bne.n	8002122 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 fbc7 	bl	80078a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fb3b 	bl	80057a2 <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002136:	d10f      	bne.n	8002158 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f005 fb9a 	bl	800787c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fb20 	bl	80057a2 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d10a      	bne.n	8002184 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f005 fba8 	bl	80078c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fb0a 	bl	80057a2 <USB_ReadInterrupts>
 800218e:	4603      	mov	r3, r0
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d115      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f005 fb98 	bl	80078e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e000      	b.n	80021c4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80021c2:	bf00      	nop
    }
  }
}
 80021c4:	3734      	adds	r7, #52	; 0x34
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd90      	pop	{r4, r7, pc}

080021ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_SetAddress+0x1a>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e013      	b.n	800220c <HAL_PCD_SetAddress+0x42>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fa68 	bl	80056d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	70fb      	strb	r3, [r7, #3]
 8002226:	460b      	mov	r3, r1
 8002228:	803b      	strh	r3, [r7, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0f      	bge.n	800225a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00f      	b.n	800227a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002286:	883a      	ldrh	r2, [r7, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	78ba      	ldrb	r2, [r7, #2]
 8002290:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022a4:	78bb      	ldrb	r3, [r7, #2]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d102      	bne.n	80022b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_PCD_EP_Open+0xaa>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e00e      	b.n	80022dc <HAL_PCD_EP_Open+0xc8>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fbd3 	bl	8004a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022da:	7afb      	ldrb	r3, [r7, #11]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da0f      	bge.n	8002318 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	3338      	adds	r3, #56	; 0x38
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e00f      	b.n	8002338 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_EP_Close+0x6e>
 800234e:	2302      	movs	r3, #2
 8002350:	e00e      	b.n	8002370 <HAL_PCD_EP_Close+0x8c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fc11 	bl	8004b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	460b      	mov	r3, r1
 8002386:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	f003 020f 	and.w	r2, r3, #15
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023d4:	7afb      	ldrb	r3, [r7, #11]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	f002 feec 	bl	80051c8 <USB_EP0StartXfer>
 80023f0:	e008      	b.n	8002404 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6979      	ldr	r1, [r7, #20]
 8002400:	f002 fc9e 	bl	8004d40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002430:	681b      	ldr	r3, [r3, #0]
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	460b      	mov	r3, r1
 800244c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3338      	adds	r3, #56	; 0x38
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	b2da      	uxtb	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d102      	bne.n	8002498 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6979      	ldr	r1, [r7, #20]
 80024b0:	f002 fe8a 	bl	80051c8 <USB_EP0StartXfer>
 80024b4:	e008      	b.n	80024c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6979      	ldr	r1, [r7, #20]
 80024c4:	f002 fc3c 	bl	8004d40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d901      	bls.n	80024f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e050      	b.n	8002592 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da0f      	bge.n	8002518 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	3338      	adds	r3, #56	; 0x38
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
 8002516:	e00d      	b.n	8002534 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_PCD_EP_SetStall+0x82>
 8002550:	2302      	movs	r3, #2
 8002552:	e01e      	b.n	8002592 <HAL_PCD_EP_SetStall+0xc0>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 ffe1 	bl	800552a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	b2d9      	uxtb	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002582:	461a      	mov	r2, r3
 8002584:	f003 f9d2 	bl	800592c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d901      	bls.n	80025b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e042      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da0f      	bge.n	80025e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	705a      	strb	r2, [r3, #1]
 80025de:	e00f      	b.n	8002600 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 020f 	and.w	r2, r3, #15
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_EP_ClrStall+0x86>
 800261c:	2302      	movs	r3, #2
 800261e:	e00e      	b.n	800263e <HAL_PCD_EP_ClrStall+0xa4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	f002 ffe9 	bl	8005606 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08a      	sub	sp, #40	; 0x28
 800264a:	af02      	add	r7, sp, #8
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	3338      	adds	r3, #56	; 0x38
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	3304      	adds	r3, #4
 800266c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	429a      	cmp	r2, r3
 8002678:	d901      	bls.n	800267e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e06c      	b.n	8002758 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	d902      	bls.n	800269a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3303      	adds	r3, #3
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a2:	e02b      	b.n	80026fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d902      	bls.n	80026c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3303      	adds	r3, #3
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4603      	mov	r3, r0
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f002 fec5 	bl	800546e <USB_WritePacket>

    ep->xfer_buff  += len;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	441a      	add	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	441a      	add	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	b29b      	uxth	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d809      	bhi.n	8002726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800271a:	429a      	cmp	r2, r3
 800271c:	d203      	bcs.n	8002726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1be      	bne.n	80026a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	429a      	cmp	r2, r3
 8002730:	d811      	bhi.n	8002756 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	2201      	movs	r2, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	43db      	mvns	r3, r3
 800274c:	6939      	ldr	r1, [r7, #16]
 800274e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002752:	4013      	ands	r3, r2
 8002754:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80a0 	bne.w	80028d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a72      	ldr	r2, [pc, #456]	; (8002970 <PCD_EP_OutXfrComplete_int+0x210>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f240 80dd 	bls.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d7 	beq.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	e0cb      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
 80027ea:	e0bc      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 80b7 	bne.w	8002966 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <PCD_EP_OutXfrComplete_int+0x210>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d90f      	bls.n	8002820 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002816:	461a      	mov	r2, r3
 8002818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281c:	6093      	str	r3, [r2, #8]
 800281e:	e0a2      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002832:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	0159      	lsls	r1, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	440b      	add	r3, r1
 800283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002846:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800285a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800286e:	6819      	ldr	r1, [r3, #0]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4403      	add	r3, r0
 800287e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4419      	add	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4403      	add	r3, r0
 8002894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002898:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <PCD_EP_OutXfrComplete_int+0x16a>
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028c2:	461a      	mov	r2, r3
 80028c4:	2101      	movs	r1, #1
 80028c6:	f003 f831 	bl	800592c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f004 ff33 	bl	800773c <HAL_PCD_DataOutStageCallback>
 80028d6:	e046      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <PCD_EP_OutXfrComplete_int+0x214>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d124      	bne.n	800292a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fc:	6093      	str	r3, [r2, #8]
 80028fe:	e032      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f004 ff0a 	bl	800773c <HAL_PCD_DataOutStageCallback>
 8002928:	e01d      	b.n	8002966 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d114      	bne.n	800295a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d108      	bne.n	800295a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002952:	461a      	mov	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f002 ffe9 	bl	800592c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f004 feeb 	bl	800773c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	4f54300a 	.word	0x4f54300a
 8002974:	4f54310a 	.word	0x4f54310a

08002978 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d90e      	bls.n	80029cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c4:	461a      	mov	r2, r3
 80029c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f004 fea3 	bl	8007718 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d90c      	bls.n	80029f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029ec:	461a      	mov	r2, r3
 80029ee:	2101      	movs	r1, #1
 80029f0:	f002 ff9c 	bl	800592c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	4f54300a 	.word	0x4f54300a

08002a04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
 8002a10:	4613      	mov	r3, r2
 8002a12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a22:	883b      	ldrh	r3, [r7, #0]
 8002a24:	0419      	lsls	r1, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a30:	e028      	b.n	8002a84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e00d      	b.n	8002a62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d3ec      	bcc.n	8002a46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a6c:	883b      	ldrh	r3, [r7, #0]
 8002a6e:	0418      	lsls	r0, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6819      	ldr	r1, [r3, #0]
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4302      	orrs	r2, r0
 8002a7c:	3340      	adds	r3, #64	; 0x40
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e25b      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d075      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aea:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b9d      	ldr	r3, [pc, #628]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b99      	ldr	r3, [pc, #612]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x108>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e236      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x74>
 8002b32:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8a      	ldr	r2, [pc, #552]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xb0>
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a83      	ldr	r2, [pc, #524]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a80      	ldr	r2, [pc, #512]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe faf0 	bl	8001168 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe faec 	bl	8001168 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e1fb      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b76      	ldr	r3, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe fadc 	bl	8001168 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fad8 	bl	8001168 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1e7      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xe8>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be2:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d11c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d116      	bne.n	8002c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e1bb      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1e:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4952      	ldr	r1, [pc, #328]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	e03a      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3c:	4b4f      	ldr	r3, [pc, #316]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fa91 	bl	8001168 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fa8d 	bl	8001168 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e19c      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4940      	ldr	r1, [pc, #256]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	e015      	b.n	8002caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_OscConfig+0x2b0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fa70 	bl	8001168 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fa6c 	bl	8001168 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e17b      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d030      	beq.n	8002d18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d016      	beq.n	8002cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fa50 	bl	8001168 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fa4c 	bl	8001168 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e15b      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x200>
 8002cea:	e015      	b.n	8002d18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cec:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_OscConfig+0x2b4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fa39 	bl	8001168 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fa35 	bl	8001168 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e144      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80a0 	beq.w	8002e66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d121      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_RCC_OscConfig+0x2b8>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f9fb 	bl	8001168 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e011      	b.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000
 8002d80:	42470e80 	.word	0x42470e80
 8002d84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fe f9ee 	bl	8001168 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0fd      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x4d4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dba:	e01c      	b.n	8002df6 <HAL_RCC_OscConfig+0x32a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_OscConfig+0x312>
 8002dc4:	4b77      	ldr	r3, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a76      	ldr	r2, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	4b74      	ldr	r3, [pc, #464]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	e00b      	b.n	8002df6 <HAL_RCC_OscConfig+0x32a>
 8002dde:	4b71      	ldr	r3, [pc, #452]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a70      	ldr	r2, [pc, #448]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a6d      	ldr	r2, [pc, #436]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9b3 	bl	8001168 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe f9af 	bl	8001168 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0bc      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ee      	beq.n	8002e06 <HAL_RCC_OscConfig+0x33a>
 8002e28:	e014      	b.n	8002e54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe f99d 	bl	8001168 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f999 	bl	8001168 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0a6      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ee      	bne.n	8002e32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b52      	ldr	r3, [pc, #328]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a51      	ldr	r2, [pc, #324]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8092 	beq.w	8002f94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e70:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d05c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d141      	bne.n	8002f08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <HAL_RCC_OscConfig+0x4dc>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f96d 	bl	8001168 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe f969 	bl	8001168 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e078      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	019b      	lsls	r3, r3, #6
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4933      	ldr	r1, [pc, #204]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_RCC_OscConfig+0x4dc>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f942 	bl	8001168 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe f93e 	bl	8001168 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e04d      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
 8002f06:	e045      	b.n	8002f94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f92b 	bl	8001168 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe f927 	bl	8001168 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e036      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f28:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x44a>
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e029      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_RCC_OscConfig+0x4d8>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d115      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10d      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	42470060 	.word	0x42470060

08002fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0cc      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d90c      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b63      	ldr	r3, [pc, #396]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b8      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003000:	4b59      	ldr	r3, [pc, #356]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a52      	ldr	r2, [pc, #328]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	494d      	ldr	r1, [pc, #308]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d044      	beq.n	80030cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d119      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d003      	beq.n	800306a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	2b03      	cmp	r3, #3
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b3f      	ldr	r3, [pc, #252]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e067      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 0203 	bic.w	r2, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4934      	ldr	r1, [pc, #208]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800309c:	f7fe f864 	bl	8001168 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a4:	f7fe f860 	bl	8001168 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e04f      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 020c 	and.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1eb      	bne.n	80030a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d20c      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e032      	b.n	800315a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4916      	ldr	r1, [pc, #88]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	490e      	ldr	r1, [pc, #56]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003132:	f000 f821 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 8003136:	4601      	mov	r1, r0
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	fa21 f303 	lsr.w	r3, r1, r3
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd ffc4 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00
 8003168:	40023800 	.word	0x40023800
 800316c:	0800807c 	.word	0x0800807c
 8003170:	20000000 	.word	0x20000000
 8003174:	20000004 	.word	0x20000004

08003178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d007      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x32>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d008      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x38>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80b4 	bne.w	800330c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031a6:	60bb      	str	r3, [r7, #8]
       break;
 80031a8:	e0b3      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80031ac:	60bb      	str	r3, [r7, #8]
      break;
 80031ae:	e0b0      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ba:	4b58      	ldr	r3, [pc, #352]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04a      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	f04f 0400 	mov.w	r4, #0
 80031d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea03 0501 	and.w	r5, r3, r1
 80031dc:	ea04 0602 	and.w	r6, r4, r2
 80031e0:	4629      	mov	r1, r5
 80031e2:	4632      	mov	r2, r6
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	0154      	lsls	r4, r2, #5
 80031ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	4619      	mov	r1, r3
 80031f6:	4622      	mov	r2, r4
 80031f8:	1b49      	subs	r1, r1, r5
 80031fa:	eb62 0206 	sbc.w	r2, r2, r6
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	0194      	lsls	r4, r2, #6
 8003208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	1a5b      	subs	r3, r3, r1
 8003210:	eb64 0402 	sbc.w	r4, r4, r2
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	00e2      	lsls	r2, r4, #3
 800321e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	460b      	mov	r3, r1
 8003226:	4614      	mov	r4, r2
 8003228:	195b      	adds	r3, r3, r5
 800322a:	eb44 0406 	adc.w	r4, r4, r6
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	0262      	lsls	r2, r4, #9
 8003238:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800323c:	0259      	lsls	r1, r3, #9
 800323e:	460b      	mov	r3, r1
 8003240:	4614      	mov	r4, r2
 8003242:	4618      	mov	r0, r3
 8003244:	4621      	mov	r1, r4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	461a      	mov	r2, r3
 800324e:	4623      	mov	r3, r4
 8003250:	f7fc ffba 	bl	80001c8 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e049      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	f04f 0400 	mov.w	r4, #0
 8003266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	ea03 0501 	and.w	r5, r3, r1
 8003272:	ea04 0602 	and.w	r6, r4, r2
 8003276:	4629      	mov	r1, r5
 8003278:	4632      	mov	r2, r6
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	0154      	lsls	r4, r2, #5
 8003284:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003288:	014b      	lsls	r3, r1, #5
 800328a:	4619      	mov	r1, r3
 800328c:	4622      	mov	r2, r4
 800328e:	1b49      	subs	r1, r1, r5
 8003290:	eb62 0206 	sbc.w	r2, r2, r6
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	0194      	lsls	r4, r2, #6
 800329e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	1a5b      	subs	r3, r3, r1
 80032a6:	eb64 0402 	sbc.w	r4, r4, r2
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	00e2      	lsls	r2, r4, #3
 80032b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032b8:	00d9      	lsls	r1, r3, #3
 80032ba:	460b      	mov	r3, r1
 80032bc:	4614      	mov	r4, r2
 80032be:	195b      	adds	r3, r3, r5
 80032c0:	eb44 0406 	adc.w	r4, r4, r6
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	02a2      	lsls	r2, r4, #10
 80032ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032d2:	0299      	lsls	r1, r3, #10
 80032d4:	460b      	mov	r3, r1
 80032d6:	4614      	mov	r4, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	4621      	mov	r1, r4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	461a      	mov	r2, r3
 80032e4:	4623      	mov	r3, r4
 80032e6:	f7fc ff6f 	bl	80001c8 <__aeabi_uldivmod>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	60bb      	str	r3, [r7, #8]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800330e:	60bb      	str	r3, [r7, #8]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	68bb      	ldr	r3, [r7, #8]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	00f42400 	.word	0x00f42400
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4601      	mov	r1, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4a03      	ldr	r2, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	0800808c 	.word	0x0800808c

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffdc 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003370:	4601      	mov	r1, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4a03      	ldr	r2, [pc, #12]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	0800808c 	.word	0x0800808c

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e01d      	b.n	80033de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fd28 	bl	8000e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 f910 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d007      	beq.n	8003418 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a1a      	ldr	r2, [r3, #32]
 8003444:	f241 1311 	movw	r3, #4369	; 0x1111
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <HAL_TIM_Base_Stop+0x40>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	f240 4344 	movw	r3, #1092	; 0x444
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d107      	bne.n	800346e <HAL_TIM_Base_Stop+0x40>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIM_ConfigClockSource+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e0a6      	b.n	80035ea <HAL_TIM_ConfigClockSource+0x166>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d067      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0x120>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d80b      	bhi.n	80034f0 <HAL_TIM_ConfigClockSource+0x6c>
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d073      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x140>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d802      	bhi.n	80034e6 <HAL_TIM_ConfigClockSource+0x62>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d06f      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034e4:	e078      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d06c      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x140>
 80034ea:	2b30      	cmp	r3, #48	; 0x30
 80034ec:	d06a      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034ee:	e073      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034f0:	2b70      	cmp	r3, #112	; 0x70
 80034f2:	d00d      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0x8c>
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d804      	bhi.n	8003502 <HAL_TIM_ConfigClockSource+0x7e>
 80034f8:	2b50      	cmp	r3, #80	; 0x50
 80034fa:	d033      	beq.n	8003564 <HAL_TIM_ConfigClockSource+0xe0>
 80034fc:	2b60      	cmp	r3, #96	; 0x60
 80034fe:	d041      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003500:	e06a      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d066      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x152>
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350c:	d017      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800350e:	e063      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f000 f982 	bl	8003828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003532:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e04c      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f000 f96b 	bl	8003828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003560:	609a      	str	r2, [r3, #8]
      break;
 8003562:	e039      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	f000 f8df 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2150      	movs	r1, #80	; 0x50
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f938 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 8003582:	e029      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	461a      	mov	r2, r3
 8003592:	f000 f8fe 	bl	8003792 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2160      	movs	r1, #96	; 0x60
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f928 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035a2:	e019      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f000 f8bf 	bl	8003734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f918 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035c2:	e009      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 f90f 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80035d4:	e000      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <TIM_Base_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <TIM_Base_SetConfig+0x118>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3b      	ldr	r2, [pc, #236]	; (8003714 <TIM_Base_SetConfig+0x120>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <TIM_Base_SetConfig+0x114>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d027      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <TIM_Base_SetConfig+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d023      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <TIM_Base_SetConfig+0x120>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a29      	ldr	r2, [pc, #164]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <TIM_Base_SetConfig+0x128>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <TIM_Base_SetConfig+0x12c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <TIM_Base_SetConfig+0x130>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <TIM_Base_SetConfig+0x134>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a24      	ldr	r2, [pc, #144]	; (800372c <TIM_Base_SetConfig+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <TIM_Base_SetConfig+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0xf8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <TIM_Base_SetConfig+0x124>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d103      	bne.n	80036f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	615a      	str	r2, [r3, #20]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40001800 	.word	0x40001800
 800372c:	40001c00 	.word	0x40001c00
 8003730:	40002000 	.word	0x40002000

08003734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0201 	bic.w	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 030a 	bic.w	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0210 	bic.w	r2, r3, #16
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	031b      	lsls	r3, r3, #12
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	f043 0307 	orr.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	431a      	orrs	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4313      	orrs	r3, r2
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	609a      	str	r2, [r3, #8]
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800387c:	2302      	movs	r3, #2
 800387e:	e05a      	b.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d022      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d01d      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d018      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00e      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d009      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10c      	bne.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4313      	orrs	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40010400 	.word	0x40010400
 8003958:	40014000 	.word	0x40014000
 800395c:	40001800 	.word	0x40001800

08003960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e03f      	b.n	80039f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fa60 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f9b1 	bl	8003d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af02      	add	r7, sp, #8
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	f040 8083 	bne.w	8003b22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Transmit+0x2e>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e07b      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit+0x40>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e074      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a50:	f7fd fb8a 	bl	8001168 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a6a:	e042      	b.n	8003af2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d122      	bne.n	8003aca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8f2 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e042      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3302      	adds	r3, #2
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	e017      	b.n	8003af2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	e013      	b.n	8003af2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	; 0x80
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8cf 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e01f      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	60ba      	str	r2, [r7, #8]
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1b7      	bne.n	8003a6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2200      	movs	r2, #0
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8b6 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e006      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	f040 8090 	bne.w	8003c6e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_UART_Receive+0x2e>
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e088      	b.n	8003c70 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Receive+0x40>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e081      	b.n	8003c70 <HAL_UART_Receive+0x144>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2222      	movs	r2, #34	; 0x22
 8003b7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b82:	f7fd faf1 	bl	8001168 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b9c:	e05c      	b.n	8003c58 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb4:	d12b      	bne.n	8003c0e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f859 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e04f      	b.n	8003c70 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10c      	bne.n	8003bf6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e030      	b.n	8003c58 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	e024      	b.n	8003c58 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2120      	movs	r1, #32
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f82d 	bl	8003c78 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e023      	b.n	8003c70 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d108      	bne.n	8003c42 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	60ba      	str	r2, [r7, #8]
 8003c3c:	b2ca      	uxtb	r2, r1
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e00a      	b.n	8003c58 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1c59      	adds	r1, r3, #1
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d19d      	bne.n	8003b9e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c88:	e02c      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c90:	d028      	beq.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c98:	f7fd fa66 	bl	8001168 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d21d      	bcs.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e00f      	b.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d0c3      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d4e:	f023 030c 	bic.w	r3, r3, #12
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	f040 818b 	bne.w	8004094 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4ac1      	ldr	r2, [pc, #772]	; (8004088 <UART_SetConfig+0x37c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d005      	beq.n	8003d94 <UART_SetConfig+0x88>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4abf      	ldr	r2, [pc, #764]	; (800408c <UART_SetConfig+0x380>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	f040 80bd 	bne.w	8003f0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7ff fae8 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	46a8      	mov	r8, r5
 8003da4:	46b1      	mov	r9, r6
 8003da6:	eb18 0308 	adds.w	r3, r8, r8
 8003daa:	eb49 0409 	adc.w	r4, r9, r9
 8003dae:	4698      	mov	r8, r3
 8003db0:	46a1      	mov	r9, r4
 8003db2:	eb18 0805 	adds.w	r8, r8, r5
 8003db6:	eb49 0906 	adc.w	r9, r9, r6
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dce:	4688      	mov	r8, r1
 8003dd0:	4691      	mov	r9, r2
 8003dd2:	eb18 0005 	adds.w	r0, r8, r5
 8003dd6:	eb49 0106 	adc.w	r1, r9, r6
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	461d      	mov	r5, r3
 8003de0:	f04f 0600 	mov.w	r6, #0
 8003de4:	196b      	adds	r3, r5, r5
 8003de6:	eb46 0406 	adc.w	r4, r6, r6
 8003dea:	461a      	mov	r2, r3
 8003dec:	4623      	mov	r3, r4
 8003dee:	f7fc f9eb 	bl	80001c8 <__aeabi_uldivmod>
 8003df2:	4603      	mov	r3, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	461a      	mov	r2, r3
 8003df8:	4ba5      	ldr	r3, [pc, #660]	; (8004090 <UART_SetConfig+0x384>)
 8003dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	461d      	mov	r5, r3
 8003e08:	f04f 0600 	mov.w	r6, #0
 8003e0c:	46a9      	mov	r9, r5
 8003e0e:	46b2      	mov	sl, r6
 8003e10:	eb19 0309 	adds.w	r3, r9, r9
 8003e14:	eb4a 040a 	adc.w	r4, sl, sl
 8003e18:	4699      	mov	r9, r3
 8003e1a:	46a2      	mov	sl, r4
 8003e1c:	eb19 0905 	adds.w	r9, r9, r5
 8003e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e38:	4689      	mov	r9, r1
 8003e3a:	4692      	mov	sl, r2
 8003e3c:	eb19 0005 	adds.w	r0, r9, r5
 8003e40:	eb4a 0106 	adc.w	r1, sl, r6
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0600 	mov.w	r6, #0
 8003e4e:	196b      	adds	r3, r5, r5
 8003e50:	eb46 0406 	adc.w	r4, r6, r6
 8003e54:	461a      	mov	r2, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	f7fc f9b6 	bl	80001c8 <__aeabi_uldivmod>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <UART_SetConfig+0x384>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a86      	ldr	r2, [pc, #536]	; (8004090 <UART_SetConfig+0x384>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e84:	4498      	add	r8, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	461d      	mov	r5, r3
 8003e8a:	f04f 0600 	mov.w	r6, #0
 8003e8e:	46a9      	mov	r9, r5
 8003e90:	46b2      	mov	sl, r6
 8003e92:	eb19 0309 	adds.w	r3, r9, r9
 8003e96:	eb4a 040a 	adc.w	r4, sl, sl
 8003e9a:	4699      	mov	r9, r3
 8003e9c:	46a2      	mov	sl, r4
 8003e9e:	eb19 0905 	adds.w	r9, r9, r5
 8003ea2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eba:	4689      	mov	r9, r1
 8003ebc:	4692      	mov	sl, r2
 8003ebe:	eb19 0005 	adds.w	r0, r9, r5
 8003ec2:	eb4a 0106 	adc.w	r1, sl, r6
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	461d      	mov	r5, r3
 8003ecc:	f04f 0600 	mov.w	r6, #0
 8003ed0:	196b      	adds	r3, r5, r5
 8003ed2:	eb46 0406 	adc.w	r4, r6, r6
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4623      	mov	r3, r4
 8003eda:	f7fc f975 	bl	80001c8 <__aeabi_uldivmod>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <UART_SetConfig+0x384>)
 8003ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2164      	movs	r1, #100	; 0x64
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <UART_SetConfig+0x384>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f003 0207 	and.w	r2, r3, #7
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4442      	add	r2, r8
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	e26f      	b.n	80043ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7ff fa17 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003f12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	461d      	mov	r5, r3
 8003f18:	f04f 0600 	mov.w	r6, #0
 8003f1c:	46a8      	mov	r8, r5
 8003f1e:	46b1      	mov	r9, r6
 8003f20:	eb18 0308 	adds.w	r3, r8, r8
 8003f24:	eb49 0409 	adc.w	r4, r9, r9
 8003f28:	4698      	mov	r8, r3
 8003f2a:	46a1      	mov	r9, r4
 8003f2c:	eb18 0805 	adds.w	r8, r8, r5
 8003f30:	eb49 0906 	adc.w	r9, r9, r6
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f48:	4688      	mov	r8, r1
 8003f4a:	4691      	mov	r9, r2
 8003f4c:	eb18 0005 	adds.w	r0, r8, r5
 8003f50:	eb49 0106 	adc.w	r1, r9, r6
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	461d      	mov	r5, r3
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	196b      	adds	r3, r5, r5
 8003f60:	eb46 0406 	adc.w	r4, r6, r6
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	f7fc f92e 	bl	80001c8 <__aeabi_uldivmod>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <UART_SetConfig+0x384>)
 8003f74:	fba3 2302 	umull	r2, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	461d      	mov	r5, r3
 8003f82:	f04f 0600 	mov.w	r6, #0
 8003f86:	46a9      	mov	r9, r5
 8003f88:	46b2      	mov	sl, r6
 8003f8a:	eb19 0309 	adds.w	r3, r9, r9
 8003f8e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f92:	4699      	mov	r9, r3
 8003f94:	46a2      	mov	sl, r4
 8003f96:	eb19 0905 	adds.w	r9, r9, r5
 8003f9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003faa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb2:	4689      	mov	r9, r1
 8003fb4:	4692      	mov	sl, r2
 8003fb6:	eb19 0005 	adds.w	r0, r9, r5
 8003fba:	eb4a 0106 	adc.w	r1, sl, r6
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	f04f 0600 	mov.w	r6, #0
 8003fc8:	196b      	adds	r3, r5, r5
 8003fca:	eb46 0406 	adc.w	r4, r6, r6
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	f7fc f8f9 	bl	80001c8 <__aeabi_uldivmod>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	460c      	mov	r4, r1
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <UART_SetConfig+0x384>)
 8003fde:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2164      	movs	r1, #100	; 0x64
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	3332      	adds	r3, #50	; 0x32
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <UART_SetConfig+0x384>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ffe:	4498      	add	r8, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	461d      	mov	r5, r3
 8004004:	f04f 0600 	mov.w	r6, #0
 8004008:	46a9      	mov	r9, r5
 800400a:	46b2      	mov	sl, r6
 800400c:	eb19 0309 	adds.w	r3, r9, r9
 8004010:	eb4a 040a 	adc.w	r4, sl, sl
 8004014:	4699      	mov	r9, r3
 8004016:	46a2      	mov	sl, r4
 8004018:	eb19 0905 	adds.w	r9, r9, r5
 800401c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800402c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004034:	4689      	mov	r9, r1
 8004036:	4692      	mov	sl, r2
 8004038:	eb19 0005 	adds.w	r0, r9, r5
 800403c:	eb4a 0106 	adc.w	r1, sl, r6
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	461d      	mov	r5, r3
 8004046:	f04f 0600 	mov.w	r6, #0
 800404a:	196b      	adds	r3, r5, r5
 800404c:	eb46 0406 	adc.w	r4, r6, r6
 8004050:	461a      	mov	r2, r3
 8004052:	4623      	mov	r3, r4
 8004054:	f7fc f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
 800405c:	461a      	mov	r2, r3
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <UART_SetConfig+0x384>)
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	2164      	movs	r1, #100	; 0x64
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	3332      	adds	r3, #50	; 0x32
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <UART_SetConfig+0x384>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	f003 0207 	and.w	r2, r3, #7
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4442      	add	r2, r8
 8004084:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004086:	e1b2      	b.n	80043ee <UART_SetConfig+0x6e2>
 8004088:	40011000 	.word	0x40011000
 800408c:	40011400 	.word	0x40011400
 8004090:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4ad7      	ldr	r2, [pc, #860]	; (80043f8 <UART_SetConfig+0x6ec>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d005      	beq.n	80040aa <UART_SetConfig+0x39e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4ad6      	ldr	r2, [pc, #856]	; (80043fc <UART_SetConfig+0x6f0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	f040 80d1 	bne.w	800424c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040aa:	f7ff f95d 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 80040ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	469a      	mov	sl, r3
 80040b4:	f04f 0b00 	mov.w	fp, #0
 80040b8:	46d0      	mov	r8, sl
 80040ba:	46d9      	mov	r9, fp
 80040bc:	eb18 0308 	adds.w	r3, r8, r8
 80040c0:	eb49 0409 	adc.w	r4, r9, r9
 80040c4:	4698      	mov	r8, r3
 80040c6:	46a1      	mov	r9, r4
 80040c8:	eb18 080a 	adds.w	r8, r8, sl
 80040cc:	eb49 090b 	adc.w	r9, r9, fp
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040e4:	4688      	mov	r8, r1
 80040e6:	4691      	mov	r9, r2
 80040e8:	eb1a 0508 	adds.w	r5, sl, r8
 80040ec:	eb4b 0609 	adc.w	r6, fp, r9
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	0094      	lsls	r4, r2, #2
 8004104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004108:	008b      	lsls	r3, r1, #2
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	4628      	mov	r0, r5
 8004110:	4631      	mov	r1, r6
 8004112:	f7fc f859 	bl	80001c8 <__aeabi_uldivmod>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	461a      	mov	r2, r3
 800411c:	4bb8      	ldr	r3, [pc, #736]	; (8004400 <UART_SetConfig+0x6f4>)
 800411e:	fba3 2302 	umull	r2, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	469b      	mov	fp, r3
 800412c:	f04f 0c00 	mov.w	ip, #0
 8004130:	46d9      	mov	r9, fp
 8004132:	46e2      	mov	sl, ip
 8004134:	eb19 0309 	adds.w	r3, r9, r9
 8004138:	eb4a 040a 	adc.w	r4, sl, sl
 800413c:	4699      	mov	r9, r3
 800413e:	46a2      	mov	sl, r4
 8004140:	eb19 090b 	adds.w	r9, r9, fp
 8004144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800415c:	4689      	mov	r9, r1
 800415e:	4692      	mov	sl, r2
 8004160:	eb1b 0509 	adds.w	r5, fp, r9
 8004164:	eb4c 060a 	adc.w	r6, ip, sl
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	0094      	lsls	r4, r2, #2
 800417c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004180:	008b      	lsls	r3, r1, #2
 8004182:	461a      	mov	r2, r3
 8004184:	4623      	mov	r3, r4
 8004186:	4628      	mov	r0, r5
 8004188:	4631      	mov	r1, r6
 800418a:	f7fc f81d 	bl	80001c8 <__aeabi_uldivmod>
 800418e:	4603      	mov	r3, r0
 8004190:	460c      	mov	r4, r1
 8004192:	461a      	mov	r2, r3
 8004194:	4b9a      	ldr	r3, [pc, #616]	; (8004400 <UART_SetConfig+0x6f4>)
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a95      	ldr	r2, [pc, #596]	; (8004400 <UART_SetConfig+0x6f4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	4498      	add	r8, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	469b      	mov	fp, r3
 80041ba:	f04f 0c00 	mov.w	ip, #0
 80041be:	46d9      	mov	r9, fp
 80041c0:	46e2      	mov	sl, ip
 80041c2:	eb19 0309 	adds.w	r3, r9, r9
 80041c6:	eb4a 040a 	adc.w	r4, sl, sl
 80041ca:	4699      	mov	r9, r3
 80041cc:	46a2      	mov	sl, r4
 80041ce:	eb19 090b 	adds.w	r9, r9, fp
 80041d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ea:	4689      	mov	r9, r1
 80041ec:	4692      	mov	sl, r2
 80041ee:	eb1b 0509 	adds.w	r5, fp, r9
 80041f2:	eb4c 060a 	adc.w	r6, ip, sl
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4619      	mov	r1, r3
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	f04f 0400 	mov.w	r4, #0
 8004208:	0094      	lsls	r4, r2, #2
 800420a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800420e:	008b      	lsls	r3, r1, #2
 8004210:	461a      	mov	r2, r3
 8004212:	4623      	mov	r3, r4
 8004214:	4628      	mov	r0, r5
 8004216:	4631      	mov	r1, r6
 8004218:	f7fb ffd6 	bl	80001c8 <__aeabi_uldivmod>
 800421c:	4603      	mov	r3, r0
 800421e:	460c      	mov	r4, r1
 8004220:	461a      	mov	r2, r3
 8004222:	4b77      	ldr	r3, [pc, #476]	; (8004400 <UART_SetConfig+0x6f4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a72      	ldr	r2, [pc, #456]	; (8004400 <UART_SetConfig+0x6f4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 020f 	and.w	r2, r3, #15
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4442      	add	r2, r8
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	e0d0      	b.n	80043ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800424c:	f7ff f878 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8004250:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	469a      	mov	sl, r3
 8004256:	f04f 0b00 	mov.w	fp, #0
 800425a:	46d0      	mov	r8, sl
 800425c:	46d9      	mov	r9, fp
 800425e:	eb18 0308 	adds.w	r3, r8, r8
 8004262:	eb49 0409 	adc.w	r4, r9, r9
 8004266:	4698      	mov	r8, r3
 8004268:	46a1      	mov	r9, r4
 800426a:	eb18 080a 	adds.w	r8, r8, sl
 800426e:	eb49 090b 	adc.w	r9, r9, fp
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800427e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004282:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004286:	4688      	mov	r8, r1
 8004288:	4691      	mov	r9, r2
 800428a:	eb1a 0508 	adds.w	r5, sl, r8
 800428e:	eb4b 0609 	adc.w	r6, fp, r9
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4619      	mov	r1, r3
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	0094      	lsls	r4, r2, #2
 80042a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	461a      	mov	r2, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	4631      	mov	r1, r6
 80042b4:	f7fb ff88 	bl	80001c8 <__aeabi_uldivmod>
 80042b8:	4603      	mov	r3, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	461a      	mov	r2, r3
 80042be:	4b50      	ldr	r3, [pc, #320]	; (8004400 <UART_SetConfig+0x6f4>)
 80042c0:	fba3 2302 	umull	r2, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	469b      	mov	fp, r3
 80042ce:	f04f 0c00 	mov.w	ip, #0
 80042d2:	46d9      	mov	r9, fp
 80042d4:	46e2      	mov	sl, ip
 80042d6:	eb19 0309 	adds.w	r3, r9, r9
 80042da:	eb4a 040a 	adc.w	r4, sl, sl
 80042de:	4699      	mov	r9, r3
 80042e0:	46a2      	mov	sl, r4
 80042e2:	eb19 090b 	adds.w	r9, r9, fp
 80042e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042fe:	4689      	mov	r9, r1
 8004300:	4692      	mov	sl, r2
 8004302:	eb1b 0509 	adds.w	r5, fp, r9
 8004306:	eb4c 060a 	adc.w	r6, ip, sl
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4619      	mov	r1, r3
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	0094      	lsls	r4, r2, #2
 800431e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	461a      	mov	r2, r3
 8004326:	4623      	mov	r3, r4
 8004328:	4628      	mov	r0, r5
 800432a:	4631      	mov	r1, r6
 800432c:	f7fb ff4c 	bl	80001c8 <__aeabi_uldivmod>
 8004330:	4603      	mov	r3, r0
 8004332:	460c      	mov	r4, r1
 8004334:	461a      	mov	r2, r3
 8004336:	4b32      	ldr	r3, [pc, #200]	; (8004400 <UART_SetConfig+0x6f4>)
 8004338:	fba3 1302 	umull	r1, r3, r3, r2
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	2164      	movs	r1, #100	; 0x64
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4a2d      	ldr	r2, [pc, #180]	; (8004400 <UART_SetConfig+0x6f4>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004356:	4498      	add	r8, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	469b      	mov	fp, r3
 800435c:	f04f 0c00 	mov.w	ip, #0
 8004360:	46d9      	mov	r9, fp
 8004362:	46e2      	mov	sl, ip
 8004364:	eb19 0309 	adds.w	r3, r9, r9
 8004368:	eb4a 040a 	adc.w	r4, sl, sl
 800436c:	4699      	mov	r9, r3
 800436e:	46a2      	mov	sl, r4
 8004370:	eb19 090b 	adds.w	r9, r9, fp
 8004374:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004384:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004388:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800438c:	4689      	mov	r9, r1
 800438e:	4692      	mov	sl, r2
 8004390:	eb1b 0509 	adds.w	r5, fp, r9
 8004394:	eb4c 060a 	adc.w	r6, ip, sl
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4619      	mov	r1, r3
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	0094      	lsls	r4, r2, #2
 80043ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043b0:	008b      	lsls	r3, r1, #2
 80043b2:	461a      	mov	r2, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	4628      	mov	r0, r5
 80043b8:	4631      	mov	r1, r6
 80043ba:	f7fb ff05 	bl	80001c8 <__aeabi_uldivmod>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <UART_SetConfig+0x6f4>)
 80043c6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2164      	movs	r1, #100	; 0x64
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	3332      	adds	r3, #50	; 0x32
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <UART_SetConfig+0x6f4>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	f003 020f 	and.w	r2, r3, #15
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4442      	add	r2, r8
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	e7ff      	b.n	80043ee <UART_SetConfig+0x6e2>
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f8:	40011000 	.word	0x40011000
 80043fc:	40011400 	.word	0x40011400
 8004400:	51eb851f 	.word	0x51eb851f

08004404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004404:	b084      	sub	sp, #16
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	f107 001c 	add.w	r0, r7, #28
 8004412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	2b01      	cmp	r3, #1
 800441a:	d122      	bne.n	8004462 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 fac6 	bl	80059e8 <USB_CoreReset>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e01a      	b.n	8004498 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f001 faba 	bl	80059e8 <USB_CoreReset>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
 800448a:	e005      	b.n	8004498 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10b      	bne.n	80044b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f043 0206 	orr.w	r2, r3, #6
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044c2:	b004      	add	sp, #16
 80044c4:	4770      	bx	lr
	...

080044c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d165      	bne.n	80045a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a41      	ldr	r2, [pc, #260]	; (80045e4 <USB_SetTurnaroundTime+0x11c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d906      	bls.n	80044f2 <USB_SetTurnaroundTime+0x2a>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a40      	ldr	r2, [pc, #256]	; (80045e8 <USB_SetTurnaroundTime+0x120>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d802      	bhi.n	80044f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044ec:	230f      	movs	r3, #15
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e062      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4a3c      	ldr	r2, [pc, #240]	; (80045e8 <USB_SetTurnaroundTime+0x120>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d906      	bls.n	8004508 <USB_SetTurnaroundTime+0x40>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <USB_SetTurnaroundTime+0x124>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d802      	bhi.n	8004508 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004502:	230e      	movs	r3, #14
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e057      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a38      	ldr	r2, [pc, #224]	; (80045ec <USB_SetTurnaroundTime+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d906      	bls.n	800451e <USB_SetTurnaroundTime+0x56>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a37      	ldr	r2, [pc, #220]	; (80045f0 <USB_SetTurnaroundTime+0x128>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d802      	bhi.n	800451e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004518:	230d      	movs	r3, #13
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e04c      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a33      	ldr	r2, [pc, #204]	; (80045f0 <USB_SetTurnaroundTime+0x128>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d906      	bls.n	8004534 <USB_SetTurnaroundTime+0x6c>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <USB_SetTurnaroundTime+0x12c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d802      	bhi.n	8004534 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800452e:	230c      	movs	r3, #12
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e041      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <USB_SetTurnaroundTime+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d906      	bls.n	800454a <USB_SetTurnaroundTime+0x82>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a2e      	ldr	r2, [pc, #184]	; (80045f8 <USB_SetTurnaroundTime+0x130>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d802      	bhi.n	800454a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004544:	230b      	movs	r3, #11
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e036      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <USB_SetTurnaroundTime+0x130>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d906      	bls.n	8004560 <USB_SetTurnaroundTime+0x98>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a29      	ldr	r2, [pc, #164]	; (80045fc <USB_SetTurnaroundTime+0x134>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d802      	bhi.n	8004560 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800455a:	230a      	movs	r3, #10
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e02b      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a26      	ldr	r2, [pc, #152]	; (80045fc <USB_SetTurnaroundTime+0x134>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <USB_SetTurnaroundTime+0xae>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a25      	ldr	r2, [pc, #148]	; (8004600 <USB_SetTurnaroundTime+0x138>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d802      	bhi.n	8004576 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004570:	2309      	movs	r3, #9
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e020      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a21      	ldr	r2, [pc, #132]	; (8004600 <USB_SetTurnaroundTime+0x138>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d906      	bls.n	800458c <USB_SetTurnaroundTime+0xc4>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a20      	ldr	r2, [pc, #128]	; (8004604 <USB_SetTurnaroundTime+0x13c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004586:	2308      	movs	r3, #8
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e015      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <USB_SetTurnaroundTime+0x13c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0xda>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <USB_SetTurnaroundTime+0x140>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d802      	bhi.n	80045a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800459c:	2307      	movs	r3, #7
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e00a      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045a2:	2306      	movs	r3, #6
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e007      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045ae:	2309      	movs	r3, #9
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e001      	b.n	80045b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045b4:	2309      	movs	r3, #9
 80045b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	00d8acbf 	.word	0x00d8acbf
 80045e8:	00e4e1bf 	.word	0x00e4e1bf
 80045ec:	00f423ff 	.word	0x00f423ff
 80045f0:	0106737f 	.word	0x0106737f
 80045f4:	011a499f 	.word	0x011a499f
 80045f8:	01312cff 	.word	0x01312cff
 80045fc:	014ca43f 	.word	0x014ca43f
 8004600:	016e35ff 	.word	0x016e35ff
 8004604:	01a6ab1f 	.word	0x01a6ab1f
 8004608:	01e847ff 	.word	0x01e847ff

0800460c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d106      	bne.n	800467c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	e00b      	b.n	8004694 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	e001      	b.n	8004694 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e003      	b.n	800469c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004694:	2032      	movs	r0, #50	; 0x32
 8004696:	f7fc fd73 	bl	8001180 <HAL_Delay>

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a4:	b084      	sub	sp, #16
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	e009      	b.n	80046d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3340      	adds	r3, #64	; 0x40
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3301      	adds	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b0e      	cmp	r3, #14
 80046dc:	d9f2      	bls.n	80046c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11c      	bne.n	800471e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f2:	f043 0302 	orr.w	r3, r3, #2
 80046f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
 800471c:	e00b      	b.n	8004736 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	4619      	mov	r1, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	461a      	mov	r2, r3
 8004752:	680b      	ldr	r3, [r1, #0]
 8004754:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10c      	bne.n	8004776 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004762:	2100      	movs	r1, #0
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f949 	bl	80049fc <USB_SetDevSpeed>
 800476a:	e008      	b.n	800477e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800476c:	2101      	movs	r1, #1
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f944 	bl	80049fc <USB_SetDevSpeed>
 8004774:	e003      	b.n	800477e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004776:	2103      	movs	r1, #3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f93f 	bl	80049fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800477e:	2110      	movs	r1, #16
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f8f3 	bl	800496c <USB_FlushTxFifo>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f911 	bl	80049b8 <USB_FlushRxFifo>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	461a      	mov	r2, r3
 80047c0:	2300      	movs	r3, #0
 80047c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e043      	b.n	8004852 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e0:	d118      	bne.n	8004814 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e013      	b.n	8004826 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	461a      	mov	r2, r3
 800480c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e008      	b.n	8004826 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	461a      	mov	r2, r3
 8004846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3301      	adds	r3, #1
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	429a      	cmp	r2, r3
 8004858:	d3b7      	bcc.n	80047ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	e043      	b.n	80048e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004876:	d118      	bne.n	80048aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e013      	b.n	80048bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	461a      	mov	r2, r3
 80048a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e008      	b.n	80048bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048da:	461a      	mov	r2, r3
 80048dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3301      	adds	r3, #1
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d3b7      	bcc.n	8004860 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004902:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f043 0210 	orr.w	r2, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <USB_DevInit+0x2c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004964:	b004      	add	sp, #16
 8004966:	4770      	bx	lr
 8004968:	803c3800 	.word	0x803c3800

0800496c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	019b      	lsls	r3, r3, #6
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <USB_FlushTxFifo+0x48>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d0f0      	beq.n	8004986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	00030d40 	.word	0x00030d40

080049b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2210      	movs	r2, #16
 80049c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <USB_FlushRxFifo+0x40>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e006      	b.n	80049ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d0f0      	beq.n	80049ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	00030d40 	.word	0x00030d40

080049fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0306 	and.w	r3, r3, #6
 8004a46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
 8004a52:	e00a      	b.n	8004a6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d002      	beq.n	8004a60 <USB_GetDevSpeed+0x32>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d102      	bne.n	8004a66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a60:	2302      	movs	r3, #2
 8004a62:	75fb      	strb	r3, [r7, #23]
 8004a64:	e001      	b.n	8004a6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a66:	230f      	movs	r3, #15
 8004a68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	785b      	ldrb	r3, [r3, #1]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d13a      	bne.n	8004b0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	68f9      	ldr	r1, [r7, #12]
 8004aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d155      	bne.n	8004b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	059b      	lsls	r3, r3, #22
 8004aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004af0:	4313      	orrs	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e036      	b.n	8004b78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	041b      	lsls	r3, r3, #16
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11a      	bne.n	8004b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	78db      	ldrb	r3, [r3, #3]
 8004b5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	4313      	orrs	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d161      	bne.n	8004c68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bba:	d11f      	bne.n	8004bfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c40:	4013      	ands	r3, r2
 8004c42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0159      	lsls	r1, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <USB_DeactivateEndpoint+0x1b0>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	e060      	b.n	8004d2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c7e:	d11f      	bne.n	8004cc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cea:	69da      	ldr	r2, [r3, #28]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d04:	4013      	ands	r3, r2
 8004d06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	4619      	mov	r1, r3
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <USB_DeactivateEndpoint+0x1b4>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	ec337800 	.word	0xec337800
 8004d3c:	eff37800 	.word	0xeff37800

08004d40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 815c 	bne.w	800501a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d132      	bne.n	8004dd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	0cdb      	lsrs	r3, r3, #19
 8004dca:	04db      	lsls	r3, r3, #19
 8004dcc:	6113      	str	r3, [r2, #16]
 8004dce:	e074      	b.n	8004eba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	0cdb      	lsrs	r3, r3, #19
 8004dec:	04db      	lsls	r3, r3, #19
 8004dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	440b      	add	r3, r1
 8004e2c:	1e59      	subs	r1, r3, #1
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e36:	04d9      	lsls	r1, r3, #19
 8004e38:	4b9d      	ldr	r3, [pc, #628]	; (80050b0 <USB_EPStartXfer+0x370>)
 8004e3a:	400b      	ands	r3, r1
 8004e3c:	69b9      	ldr	r1, [r7, #24]
 8004e3e:	0148      	lsls	r0, r1, #5
 8004e40:	69f9      	ldr	r1, [r7, #28]
 8004e42:	4401      	add	r1, r0
 8004e44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e62:	69b9      	ldr	r1, [r7, #24]
 8004e64:	0148      	lsls	r0, r1, #5
 8004e66:	69f9      	ldr	r1, [r7, #28]
 8004e68:	4401      	add	r1, r0
 8004e6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d11f      	bne.n	8004eba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d14b      	bne.n	8004f58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	78db      	ldrb	r3, [r3, #3]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d128      	bne.n	8004f36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d110      	bne.n	8004f16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e00f      	b.n	8004f36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e12f      	b.n	80051b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	78db      	ldrb	r3, [r3, #3]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d015      	beq.n	8004fac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8117 	beq.w	80051b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8004faa:	e105      	b.n	80051b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d110      	bne.n	8004fde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e00f      	b.n	8004ffe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	b298      	uxth	r0, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4603      	mov	r3, r0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa2b 	bl	800546e <USB_WritePacket>
 8005018:	e0ce      	b.n	80051b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005034:	0cdb      	lsrs	r3, r3, #19
 8005036:	04db      	lsls	r3, r3, #19
 8005038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800505c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d126      	bne.n	80050b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	0148      	lsls	r0, r1, #5
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	4401      	add	r1, r0
 8005084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005088:	4313      	orrs	r3, r2
 800508a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050aa:	6113      	str	r3, [r2, #16]
 80050ac:	e036      	b.n	800511c <USB_EPStartXfer+0x3dc>
 80050ae:	bf00      	nop
 80050b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	8afb      	ldrh	r3, [r7, #22]
 80050da:	04d9      	lsls	r1, r3, #19
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <USB_EPStartXfer+0x484>)
 80050de:	400b      	ands	r3, r1
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	0148      	lsls	r0, r1, #5
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	4401      	add	r1, r0
 80050e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ec:	4313      	orrs	r3, r2
 80050ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	8af9      	ldrh	r1, [r7, #22]
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510c:	69b9      	ldr	r1, [r7, #24]
 800510e:	0148      	lsls	r0, r1, #5
 8005110:	69f9      	ldr	r1, [r7, #28]
 8005112:	4401      	add	r1, r0
 8005114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005118:	4313      	orrs	r3, r2
 800511a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10d      	bne.n	800513e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	460a      	mov	r2, r1
 800513c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d128      	bne.n	8005198 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d110      	bne.n	8005178 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00f      	b.n	8005198 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005196:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	1ff80000 	.word	0x1ff80000

080051c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	f040 80cd 	bne.w	8005384 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d132      	bne.n	8005258 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005250:	0cdb      	lsrs	r3, r3, #19
 8005252:	04db      	lsls	r3, r3, #19
 8005254:	6113      	str	r3, [r2, #16]
 8005256:	e04e      	b.n	80052f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005272:	0cdb      	lsrs	r3, r3, #19
 8005274:	04db      	lsls	r3, r3, #19
 8005276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800529a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d903      	bls.n	80052b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e6:	6939      	ldr	r1, [r7, #16]
 80052e8:	0148      	lsls	r0, r1, #5
 80052ea:	6979      	ldr	r1, [r7, #20]
 80052ec:	4401      	add	r1, r0
 80052ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d11e      	bne.n	800533a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e092      	b.n	8005460 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005358:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d07e      	beq.n	8005460 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	2101      	movs	r1, #1
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	6979      	ldr	r1, [r7, #20]
 800537a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800537e:	4313      	orrs	r3, r2
 8005380:	634b      	str	r3, [r1, #52]	; 0x34
 8005382:	e06d      	b.n	8005460 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	0cdb      	lsrs	r3, r3, #19
 80053a0:	04db      	lsls	r3, r3, #19
 80053a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	0148      	lsls	r0, r1, #5
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	4401      	add	r1, r0
 8005416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10d      	bne.n	8005440 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d009      	beq.n	8005440 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	460a      	mov	r2, r1
 800543e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800545e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800546e:	b480      	push	{r7}
 8005470:	b089      	sub	sp, #36	; 0x24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	4611      	mov	r1, r2
 800547a:	461a      	mov	r2, r3
 800547c:	460b      	mov	r3, r1
 800547e:	71fb      	strb	r3, [r7, #7]
 8005480:	4613      	mov	r3, r2
 8005482:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800548c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005494:	88bb      	ldrh	r3, [r7, #4]
 8005496:	3303      	adds	r3, #3
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	e00f      	b.n	80054c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	031a      	lsls	r2, r3, #12
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ae:	461a      	mov	r2, r3
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3304      	adds	r3, #4
 80054ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	3301      	adds	r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d3eb      	bcc.n	80054a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3724      	adds	r7, #36	; 0x24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	3303      	adds	r3, #3
 80054f2:	089b      	lsrs	r3, r3, #2
 80054f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e00b      	b.n	8005514 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	601a      	str	r2, [r3, #0]
    pDest++;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	3304      	adds	r3, #4
 800550c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	3301      	adds	r3, #1
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3ef      	bcc.n	80054fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800551c:	69fb      	ldr	r3, [r7, #28]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3724      	adds	r7, #36	; 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d12c      	bne.n	80055a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	db12      	blt.n	800557e <USB_EPSetStall+0x54>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00f      	beq.n	800557e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800557c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e02b      	b.n	80055f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db12      	blt.n	80055d8 <USB_EPSetStall+0xae>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00f      	beq.n	80055d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d128      	bne.n	8005674 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005640:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	78db      	ldrb	r3, [r3, #3]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d003      	beq.n	8005652 <USB_EPClearStall+0x4c>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	78db      	ldrb	r3, [r3, #3]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d138      	bne.n	80056c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e027      	b.n	80056c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005692:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d003      	beq.n	80056a4 <USB_EPClearStall+0x9e>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	78db      	ldrb	r3, [r3, #3]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d10f      	bne.n	80056c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b085      	sub	sp, #20
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570c:	4313      	orrs	r3, r2
 800570e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005738:	f023 0303 	bic.w	r3, r3, #3
 800573c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574c:	f023 0302 	bic.w	r3, r3, #2
 8005750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057ba:	68fb      	ldr	r3, [r7, #12]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	0c1b      	lsrs	r3, r3, #16
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	b29b      	uxth	r3, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800585e:	68bb      	ldr	r3, [r7, #8]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4013      	ands	r3, r2
 80058b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058ba:	68bb      	ldr	r3, [r7, #8]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0301 	and.w	r3, r3, #1
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	460b      	mov	r3, r1
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	333c      	adds	r3, #60	; 0x3c
 8005942:	3304      	adds	r3, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <USB_EP0_OutStart+0xb8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d90a      	bls.n	8005966 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005960:	d101      	bne.n	8005966 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e037      	b.n	80059d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2300      	movs	r3, #0
 8005970:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	f043 0318 	orr.w	r3, r3, #24
 8005998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80059ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10f      	bne.n	80059d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80059d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	4f54300a 	.word	0x4f54300a

080059e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <USB_CoreReset+0x64>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e01b      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	daf2      	bge.n	80059f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <USB_CoreReset+0x64>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d0f0      	beq.n	8005a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a60:	f002 f946 	bl	8007cf0 <malloc>
 8005a64:	4603      	mov	r3, r0
 8005a66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a76:	2302      	movs	r3, #2
 8005a78:	e066      	b.n	8005b48 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	7c1b      	ldrb	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d119      	bne.n	8005abe <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a8e:	2202      	movs	r2, #2
 8005a90:	2181      	movs	r1, #129	; 0x81
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 ff99 	bl	80079ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 ff8f 	bl	80079ca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005abc:	e016      	b.n	8005aec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	2181      	movs	r1, #129	; 0x81
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 ff80 	bl	80079ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ad0:	2340      	movs	r3, #64	; 0x40
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 ff77 	bl	80079ca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aec:	2308      	movs	r3, #8
 8005aee:	2203      	movs	r2, #3
 8005af0:	2182      	movs	r1, #130	; 0x82
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 ff69 	bl	80079ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	7c1b      	ldrb	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d109      	bne.n	8005b36 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 f83a 	bl	8007ba8 <USBD_LL_PrepareReceive>
 8005b34:	e007      	b.n	8005b46 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b3c:	2340      	movs	r3, #64	; 0x40
 8005b3e:	2101      	movs	r1, #1
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f002 f831 	bl	8007ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b60:	2181      	movs	r1, #129	; 0x81
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 ff57 	bl	8007a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b6e:	2101      	movs	r1, #1
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 ff50 	bl	8007a16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b7e:	2182      	movs	r1, #130	; 0x82
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 ff48 	bl	8007a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00e      	beq.n	8005bbe <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f002 f8a5 	bl	8007d00 <free>
    pdev->pClassData = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d03a      	beq.n	8005c68 <USBD_CDC_Setup+0xa0>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	f040 8097 	bne.w	8005d26 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	88db      	ldrh	r3, [r3, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d029      	beq.n	8005c54 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da11      	bge.n	8005c2e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005c16:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	88d2      	ldrh	r2, [r2, #6]
 8005c1c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c1e:	6939      	ldr	r1, [r7, #16]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	88db      	ldrh	r3, [r3, #6]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fa9d 	bl	8007166 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005c2c:	e082      	b.n	8005d34 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	785a      	ldrb	r2, [r3, #1]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	88db      	ldrh	r3, [r3, #6]
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c44:	6939      	ldr	r1, [r7, #16]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 fab6 	bl	80071be <USBD_CtlPrepareRx>
    break;
 8005c52:	e06f      	b.n	8005d34 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	7850      	ldrb	r0, [r2, #1]
 8005c60:	2200      	movs	r2, #0
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	4798      	blx	r3
    break;
 8005c66:	e065      	b.n	8005d34 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b0b      	cmp	r3, #11
 8005c6e:	d84f      	bhi.n	8005d10 <USBD_CDC_Setup+0x148>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <USBD_CDC_Setup+0xb0>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005d1f 	.word	0x08005d1f
 8005c80:	08005d11 	.word	0x08005d11
 8005c84:	08005d11 	.word	0x08005d11
 8005c88:	08005d11 	.word	0x08005d11
 8005c8c:	08005d11 	.word	0x08005d11
 8005c90:	08005d11 	.word	0x08005d11
 8005c94:	08005d11 	.word	0x08005d11
 8005c98:	08005d11 	.word	0x08005d11
 8005c9c:	08005d11 	.word	0x08005d11
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cf9 	.word	0x08005cf9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d107      	bne.n	8005cc2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cb2:	f107 030c 	add.w	r3, r7, #12
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fa53 	bl	8007166 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005cc0:	e030      	b.n	8005d24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 f9dd 	bl	8007084 <USBD_CtlError>
        ret = USBD_FAIL;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cce:	e029      	b.n	8005d24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d107      	bne.n	8005cea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cda:	f107 030f 	add.w	r3, r7, #15
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fa3f 	bl	8007166 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005ce8:	e01c      	b.n	8005d24 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f9c9 	bl	8007084 <USBD_CtlError>
        ret = USBD_FAIL;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005cf6:	e015      	b.n	8005d24 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d00f      	beq.n	8005d22 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f9bd 	bl	8007084 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005d0e:	e008      	b.n	8005d22 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 f9b6 	bl	8007084 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1c:	e002      	b.n	8005d24 <USBD_CDC_Setup+0x15c>
      break;
 8005d1e:	bf00      	nop
 8005d20:	e008      	b.n	8005d34 <USBD_CDC_Setup+0x16c>
      break;
 8005d22:	bf00      	nop
    }
    break;
 8005d24:	e006      	b.n	8005d34 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 f9ab 	bl	8007084 <USBD_CtlError>
    ret = USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	75fb      	strb	r3, [r7, #23]
    break;
 8005d32:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop

08005d40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e049      	b.n	8005df6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	440b      	add	r3, r1
 8005d78:	3318      	adds	r3, #24
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d029      	beq.n	8005dd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3318      	adds	r3, #24
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	78f9      	ldrb	r1, [r7, #3]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	460b      	mov	r3, r1
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4403      	add	r3, r0
 8005da0:	3344      	adds	r3, #68	; 0x44
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005da8:	fb03 f301 	mul.w	r3, r3, r1
 8005dac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d110      	bne.n	8005dd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3318      	adds	r3, #24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dc6:	78f9      	ldrb	r1, [r7, #3]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 feca 	bl	8007b66 <USBD_LL_Transmit>
 8005dd2:	e00f      	b.n	8005df4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005df0:	78fa      	ldrb	r2, [r7, #3]
 8005df2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e015      	b.n	8005e4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fee0 	bl	8007bea <USBD_LL_GetRxDataSize>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e46:	4611      	mov	r1, r2
 8005e48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e62:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d015      	beq.n	8005e9a <USBD_CDC_EP0_RxReady+0x46>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e74:	2bff      	cmp	r3, #255	; 0xff
 8005e76:	d010      	beq.n	8005e9a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e86:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	22ff      	movs	r2, #255	; 0xff
 8005e96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2243      	movs	r2, #67	; 0x43
 8005eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005eb2:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000094 	.word	0x20000094

08005ec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2243      	movs	r2, #67	; 0x43
 8005ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ed2:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000050 	.word	0x20000050

08005ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2243      	movs	r2, #67	; 0x43
 8005ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ef2:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	200000d8 	.word	0x200000d8

08005f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	220a      	movs	r2, #10
 8005f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e004      	b.n	8005f42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b087      	sub	sp, #28
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e01a      	b.n	8006000 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d114      	bne.n	8005ffe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ff2:	2181      	movs	r1, #129	; 0x81
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fdb6 	bl	8007b66 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006022:	2303      	movs	r3, #3
 8006024:	e016      	b.n	8006054 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7c1b      	ldrb	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006038:	2101      	movs	r1, #1
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fdb4 	bl	8007ba8 <USBD_LL_PrepareReceive>
 8006040:	e007      	b.n	8006052 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006048:	2340      	movs	r3, #64	; 0x40
 800604a:	2101      	movs	r1, #1
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fdab 	bl	8007ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006070:	2303      	movs	r3, #3
 8006072:	e025      	b.n	80060c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	79fa      	ldrb	r2, [r7, #7]
 80060b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f001 fc21 	bl	80078fc <USBD_LL_Init>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	e010      	b.n	8006102 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f107 020e 	add.w	r2, r7, #14
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fc3e 	bl	8007994 <USBD_LL_Start>
 8006118:	4603      	mov	r3, r0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006144:	2303      	movs	r3, #3
 8006146:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	4611      	mov	r1, r2
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4611      	mov	r1, r2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
  }

  return USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 ff2c 	bl	8007010 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061c6:	461a      	mov	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d00e      	beq.n	80061fa <USBD_LL_SetupStage+0x5a>
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d302      	bcc.n	80061e6 <USBD_LL_SetupStage+0x46>
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d014      	beq.n	800620e <USBD_LL_SetupStage+0x6e>
 80061e4:	e01d      	b.n	8006222 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa18 	bl	8006624 <USBD_StdDevReq>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e020      	b.n	800623c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa7c 	bl	8006700 <USBD_StdItfReq>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e016      	b.n	800623c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fab8 	bl	800678c <USBD_StdEPReq>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e00c      	b.n	800623c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fc0f 	bl	8007a54 <USBD_LL_StallEP>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
      break;
 800623a:	bf00      	nop
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	460b      	mov	r3, r1
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d137      	bne.n	80062ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006268:	2b03      	cmp	r3, #3
 800626a:	d14a      	bne.n	8006302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	429a      	cmp	r2, r3
 8006276:	d913      	bls.n	80062a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	4293      	cmp	r3, r2
 8006290:	bf28      	it	cs
 8006292:	4613      	movcs	r3, r2
 8006294:	461a      	mov	r2, r3
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 ffad 	bl	80071f8 <USBD_CtlContinueRx>
 800629e:	e030      	b.n	8006302 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d105      	bne.n	80062c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 ffa9 	bl	800721a <USBD_CtlSendStatus>
 80062c8:	e01b      	b.n	8006302 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d10e      	bne.n	80062fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	7afa      	ldrb	r2, [r7, #11]
 80062ea:	4611      	mov	r1, r2
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	4798      	blx	r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	e002      	b.n	8006304 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062fe:	2303      	movs	r3, #3
 8006300:	e000      	b.n	8006304 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	460b      	mov	r3, r1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d16a      	bne.n	80063f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3314      	adds	r3, #20
 8006324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800632c:	2b02      	cmp	r3, #2
 800632e:	d155      	bne.n	80063dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d914      	bls.n	8006366 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	461a      	mov	r2, r3
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 ff22 	bl	800719c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f001 fc22 	bl	8007ba8 <USBD_LL_PrepareReceive>
 8006364:	e03a      	b.n	80063dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d11c      	bne.n	80063ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800637a:	429a      	cmp	r2, r3
 800637c:	d316      	bcc.n	80063ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006388:	429a      	cmp	r2, r3
 800638a:	d20f      	bcs.n	80063ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800638c:	2200      	movs	r2, #0
 800638e:	2100      	movs	r1, #0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 ff03 	bl	800719c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800639e:	2300      	movs	r3, #0
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fbff 	bl	8007ba8 <USBD_LL_PrepareReceive>
 80063aa:	e017      	b.n	80063dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d105      	bne.n	80063ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f001 fb3f 	bl	8007a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 ff32 	bl	8007240 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d123      	bne.n	800642e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff fe9b 	bl	8006122 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063f4:	e01b      	b.n	800642e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d013      	beq.n	800642a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006408:	2b03      	cmp	r3, #3
 800640a:	d10e      	bne.n	800642a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	7afa      	ldrb	r2, [r7, #11]
 8006416:	4611      	mov	r1, r2
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	e002      	b.n	8006430 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800642a:	2303      	movs	r3, #3
 800642c:	e000      	b.n	8006430 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6852      	ldr	r2, [r2, #4]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	4611      	mov	r1, r2
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	2200      	movs	r2, #0
 8006480:	2100      	movs	r1, #0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 faa1 	bl	80079ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	2200      	movs	r2, #0
 800649c:	2180      	movs	r1, #128	; 0x80
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fa93 	bl	80079ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2240      	movs	r2, #64	; 0x40
 80064ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	78fa      	ldrb	r2, [r7, #3]
 80064ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006512:	2b04      	cmp	r3, #4
 8006514:	d105      	bne.n	8006522 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653e:	2b03      	cmp	r3, #3
 8006540:	d10b      	bne.n	800655a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6852      	ldr	r2, [r2, #4]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	4611      	mov	r1, r2
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
  }

  return USBD_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	3301      	adds	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006604:	8a3b      	ldrh	r3, [r7, #16]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	b21a      	sxth	r2, r3
 800660a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800660e:	4313      	orrs	r3, r2
 8006610:	b21b      	sxth	r3, r3
 8006612:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006614:	89fb      	ldrh	r3, [r7, #14]
}
 8006616:	4618      	mov	r0, r3
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800663a:	2b20      	cmp	r3, #32
 800663c:	d004      	beq.n	8006648 <USBD_StdDevReq+0x24>
 800663e:	2b40      	cmp	r3, #64	; 0x40
 8006640:	d002      	beq.n	8006648 <USBD_StdDevReq+0x24>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <USBD_StdDevReq+0x38>
 8006646:	e050      	b.n	80066ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
    break;
 800665a:	e04b      	b.n	80066f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b09      	cmp	r3, #9
 8006662:	d83c      	bhi.n	80066de <USBD_StdDevReq+0xba>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_StdDevReq+0x48>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	080066c1 	.word	0x080066c1
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066df 	.word	0x080066df
 8006678:	080066cb 	.word	0x080066cb
 800667c:	080066df 	.word	0x080066df
 8006680:	0800669f 	.word	0x0800669f
 8006684:	08006695 	.word	0x08006695
 8006688:	080066df 	.word	0x080066df
 800668c:	080066b7 	.word	0x080066b7
 8006690:	080066a9 	.word	0x080066a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f9ce 	bl	8006a38 <USBD_GetDescriptor>
      break;
 800669c:	e024      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb33 	bl	8006d0c <USBD_SetAddress>
      break;
 80066a6:	e01f      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fb70 	bl	8006d90 <USBD_SetConfig>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
      break;
 80066b4:	e018      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fc0d 	bl	8006ed8 <USBD_GetConfig>
      break;
 80066be:	e013      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fc3c 	bl	8006f40 <USBD_GetStatus>
      break;
 80066c8:	e00e      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fc6a 	bl	8006fa6 <USBD_SetFeature>
      break;
 80066d2:	e009      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fc79 	bl	8006fce <USBD_ClrFeature>
      break;
 80066dc:	e004      	b.n	80066e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fccf 	bl	8007084 <USBD_CtlError>
      break;
 80066e6:	bf00      	nop
    }
    break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fcc9 	bl	8007084 <USBD_CtlError>
    break;
 80066f2:	bf00      	nop
  }

  return ret;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006716:	2b20      	cmp	r3, #32
 8006718:	d003      	beq.n	8006722 <USBD_StdItfReq+0x22>
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d001      	beq.n	8006722 <USBD_StdItfReq+0x22>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d12a      	bne.n	8006778 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	3b01      	subs	r3, #1
 800672a:	2b02      	cmp	r3, #2
 800672c:	d81d      	bhi.n	800676a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	889b      	ldrh	r3, [r3, #4]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d813      	bhi.n	8006760 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	88db      	ldrh	r3, [r3, #6]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d110      	bne.n	8006774 <USBD_StdItfReq+0x74>
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10d      	bne.n	8006774 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fd5e 	bl	800721a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800675e:	e009      	b.n	8006774 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc8e 	bl	8007084 <USBD_CtlError>
      break;
 8006768:	e004      	b.n	8006774 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc89 	bl	8007084 <USBD_CtlError>
      break;
 8006772:	e000      	b.n	8006776 <USBD_StdItfReq+0x76>
      break;
 8006774:	bf00      	nop
    }
    break;
 8006776:	e004      	b.n	8006782 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc82 	bl	8007084 <USBD_CtlError>
    break;
 8006780:	bf00      	nop
  }

  return ret;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	889b      	ldrh	r3, [r3, #4]
 800679e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d004      	beq.n	80067b6 <USBD_StdEPReq+0x2a>
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d002      	beq.n	80067b6 <USBD_StdEPReq+0x2a>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <USBD_StdEPReq+0x3e>
 80067b4:	e135      	b.n	8006a22 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
    break;
 80067c8:	e130      	b.n	8006a2c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d03e      	beq.n	8006850 <USBD_StdEPReq+0xc4>
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d002      	beq.n	80067dc <USBD_StdEPReq+0x50>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d077      	beq.n	80068ca <USBD_StdEPReq+0x13e>
 80067da:	e11c      	b.n	8006a16 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d002      	beq.n	80067ec <USBD_StdEPReq+0x60>
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d015      	beq.n	8006816 <USBD_StdEPReq+0x8a>
 80067ea:	e02b      	b.n	8006844 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <USBD_StdEPReq+0x80>
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d009      	beq.n	800680c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f929 	bl	8007a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 f925 	bl	8007a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800680a:	e020      	b.n	800684e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc38 	bl	8007084 <USBD_CtlError>
        break;
 8006814:	e01b      	b.n	800684e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	885b      	ldrh	r3, [r3, #2]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10e      	bne.n	800683c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_StdEPReq+0xb0>
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	2b80      	cmp	r3, #128	; 0x80
 8006828:	d008      	beq.n	800683c <USBD_StdEPReq+0xb0>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 f90c 	bl	8007a54 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fcec 	bl	800721a <USBD_CtlSendStatus>

        break;
 8006842:	e004      	b.n	800684e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fc1c 	bl	8007084 <USBD_CtlError>
        break;
 800684c:	bf00      	nop
      }
      break;
 800684e:	e0e7      	b.n	8006a20 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006856:	2b02      	cmp	r3, #2
 8006858:	d002      	beq.n	8006860 <USBD_StdEPReq+0xd4>
 800685a:	2b03      	cmp	r3, #3
 800685c:	d015      	beq.n	800688a <USBD_StdEPReq+0xfe>
 800685e:	e02d      	b.n	80068bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00c      	beq.n	8006880 <USBD_StdEPReq+0xf4>
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d009      	beq.n	8006880 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 f8ef 	bl	8007a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006876:	2180      	movs	r1, #128	; 0x80
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 f8eb 	bl	8007a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800687e:	e023      	b.n	80068c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fbfe 	bl	8007084 <USBD_CtlError>
        break;
 8006888:	e01e      	b.n	80068c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	885b      	ldrh	r3, [r3, #2]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d119      	bne.n	80068c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f8f6 	bl	8007a92 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fcb7 	bl	800721a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
        }
        break;
 80068ba:	e004      	b.n	80068c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fbe0 	bl	8007084 <USBD_CtlError>
        break;
 80068c4:	e000      	b.n	80068c8 <USBD_StdEPReq+0x13c>
        break;
 80068c6:	bf00      	nop
      }
      break;
 80068c8:	e0aa      	b.n	8006a20 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d002      	beq.n	80068da <USBD_StdEPReq+0x14e>
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d032      	beq.n	800693e <USBD_StdEPReq+0x1b2>
 80068d8:	e097      	b.n	8006a0a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <USBD_StdEPReq+0x164>
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d004      	beq.n	80068f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbcb 	bl	8007084 <USBD_CtlError>
          break;
 80068ee:	e091      	b.n	8006a14 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da0b      	bge.n	8006910 <USBD_StdEPReq+0x184>
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3310      	adds	r3, #16
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	e00b      	b.n	8006928 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4413      	add	r3, r2
 8006926:	3304      	adds	r3, #4
 8006928:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2202      	movs	r2, #2
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fc15 	bl	8007166 <USBD_CtlSendData>
        break;
 800693c:	e06a      	b.n	8006a14 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800693e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006942:	2b00      	cmp	r3, #0
 8006944:	da11      	bge.n	800696a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	3324      	adds	r3, #36	; 0x24
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d117      	bne.n	8006990 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb8e 	bl	8007084 <USBD_CtlError>
            break;
 8006968:	e054      	b.n	8006a14 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	f003 020f 	and.w	r2, r3, #15
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb7b 	bl	8007084 <USBD_CtlError>
            break;
 800698e:	e041      	b.n	8006a14 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006994:	2b00      	cmp	r3, #0
 8006996:	da0b      	bge.n	80069b0 <USBD_StdEPReq+0x224>
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	3310      	adds	r3, #16
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	3304      	adds	r3, #4
 80069ae:	e00b      	b.n	80069c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	3304      	adds	r3, #4
 80069c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <USBD_StdEPReq+0x24a>
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b80      	cmp	r3, #128	; 0x80
 80069d4:	d103      	bne.n	80069de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e00e      	b.n	80069fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f874 	bl	8007ad0 <USBD_LL_IsStallEP>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2201      	movs	r2, #1
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e002      	b.n	80069fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2200      	movs	r2, #0
 80069fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2202      	movs	r2, #2
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fbaf 	bl	8007166 <USBD_CtlSendData>
          break;
 8006a08:	e004      	b.n	8006a14 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb39 	bl	8007084 <USBD_CtlError>
        break;
 8006a12:	bf00      	nop
      }
      break;
 8006a14:	e004      	b.n	8006a20 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fb33 	bl	8007084 <USBD_CtlError>
      break;
 8006a1e:	bf00      	nop
    }
    break;
 8006a20:	e004      	b.n	8006a2c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb2d 	bl	8007084 <USBD_CtlError>
    break;
 8006a2a:	bf00      	nop
  }

  return ret;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	2b06      	cmp	r3, #6
 8006a5a:	f200 8128 	bhi.w	8006cae <USBD_GetDescriptor+0x276>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <USBD_GetDescriptor+0x2c>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a99 	.word	0x08006a99
 8006a6c:	08006ad9 	.word	0x08006ad9
 8006a70:	08006caf 	.word	0x08006caf
 8006a74:	08006caf 	.word	0x08006caf
 8006a78:	08006c4f 	.word	0x08006c4f
 8006a7c:	08006c7b 	.word	0x08006c7b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
    break;
 8006a96:	e112      	b.n	8006cbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	7c1b      	ldrb	r3, [r3, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa8:	f107 0208 	add.w	r2, r7, #8
 8006aac:	4610      	mov	r0, r2
 8006aae:	4798      	blx	r3
 8006ab0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006aba:	e100      	b.n	8006cbe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	f107 0208 	add.w	r2, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	701a      	strb	r2, [r3, #0]
    break;
 8006ad6:	e0f2      	b.n	8006cbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	885b      	ldrh	r3, [r3, #2]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b05      	cmp	r3, #5
 8006ae0:	f200 80ac 	bhi.w	8006c3c <USBD_GetDescriptor+0x204>
 8006ae4:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <USBD_GetDescriptor+0xb4>)
 8006ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aea:	bf00      	nop
 8006aec:	08006b05 	.word	0x08006b05
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b6d 	.word	0x08006b6d
 8006af8:	08006ba1 	.word	0x08006ba1
 8006afc:	08006bd5 	.word	0x08006bd5
 8006b00:	08006c09 	.word	0x08006c09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	7c12      	ldrb	r2, [r2, #16]
 8006b1c:	f107 0108 	add.w	r1, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b26:	e091      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 faaa 	bl	8007084 <USBD_CtlError>
        err++;
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	3301      	adds	r3, #1
 8006b34:	72fb      	strb	r3, [r7, #11]
      break;
 8006b36:	e089      	b.n	8006c4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
 8006b50:	f107 0108 	add.w	r1, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b5a:	e077      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa90 	bl	8007084 <USBD_CtlError>
        err++;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	3301      	adds	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
      break;
 8006b6a:	e06f      	b.n	8006c4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 0108 	add.w	r1, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b8e:	e05d      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa76 	bl	8007084 <USBD_CtlError>
        err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b9e:	e055      	b.n	8006c4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7c12      	ldrb	r2, [r2, #16]
 8006bb8:	f107 0108 	add.w	r1, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bc2:	e043      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa5c 	bl	8007084 <USBD_CtlError>
        err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
      break;
 8006bd2:	e03b      	b.n	8006c4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	7c12      	ldrb	r2, [r2, #16]
 8006bec:	f107 0108 	add.w	r1, r7, #8
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf6:	e029      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa42 	bl	8007084 <USBD_CtlError>
        err++;
 8006c00:	7afb      	ldrb	r3, [r7, #11]
 8006c02:	3301      	adds	r3, #1
 8006c04:	72fb      	strb	r3, [r7, #11]
      break;
 8006c06:	e021      	b.n	8006c4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c2a:	e00f      	b.n	8006c4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa28 	bl	8007084 <USBD_CtlError>
        err++;
 8006c34:	7afb      	ldrb	r3, [r7, #11]
 8006c36:	3301      	adds	r3, #1
 8006c38:	72fb      	strb	r3, [r7, #11]
      break;
 8006c3a:	e007      	b.n	8006c4c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa20 	bl	8007084 <USBD_CtlError>
      err++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006c4a:	bf00      	nop
    }
    break;
 8006c4c:	e037      	b.n	8006cbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7c1b      	ldrb	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	f107 0208 	add.w	r2, r7, #8
 8006c62:	4610      	mov	r0, r2
 8006c64:	4798      	blx	r3
 8006c66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006c68:	e029      	b.n	8006cbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa09 	bl	8007084 <USBD_CtlError>
      err++;
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	3301      	adds	r3, #1
 8006c76:	72fb      	strb	r3, [r7, #11]
    break;
 8006c78:	e021      	b.n	8006cbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7c1b      	ldrb	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f107 0208 	add.w	r2, r7, #8
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	2207      	movs	r2, #7
 8006c9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006c9c:	e00f      	b.n	8006cbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9ef 	bl	8007084 <USBD_CtlError>
      err++;
 8006ca6:	7afb      	ldrb	r3, [r7, #11]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	72fb      	strb	r3, [r7, #11]
    break;
 8006cac:	e007      	b.n	8006cbe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9e7 	bl	8007084 <USBD_CtlError>
    err++;
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	72fb      	strb	r3, [r7, #11]
    break;
 8006cbc:	bf00      	nop
  }

  if (err != 0U)
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11e      	bne.n	8006d02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	88db      	ldrh	r3, [r3, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d016      	beq.n	8006cfa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006ccc:	893b      	ldrh	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88da      	ldrh	r2, [r3, #6]
 8006cd6:	893b      	ldrh	r3, [r7, #8]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	bf28      	it	cs
 8006cdc:	4613      	movcs	r3, r2
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ce2:	893b      	ldrh	r3, [r7, #8]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68f9      	ldr	r1, [r7, #12]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fa3c 	bl	8007166 <USBD_CtlSendData>
 8006cee:	e009      	b.n	8006d04 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f9c6 	bl	8007084 <USBD_CtlError>
 8006cf8:	e004      	b.n	8006d04 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa8d 	bl	800721a <USBD_CtlSendStatus>
 8006d00:	e000      	b.n	8006d04 <USBD_GetDescriptor+0x2cc>
    return;
 8006d02:	bf00      	nop
    }
  }
}
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop

08006d0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	889b      	ldrh	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d130      	bne.n	8006d80 <USBD_SetAddress+0x74>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	88db      	ldrh	r3, [r3, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d12c      	bne.n	8006d80 <USBD_SetAddress+0x74>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	885b      	ldrh	r3, [r3, #2]
 8006d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2c:	d828      	bhi.n	8006d80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	885b      	ldrh	r3, [r3, #2]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d104      	bne.n	8006d4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f99c 	bl	8007084 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4c:	e01c      	b.n	8006d88 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7bfa      	ldrb	r2, [r7, #15]
 8006d52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fee4 	bl	8007b28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa5a 	bl	800721a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d74:	e008      	b.n	8006d88 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7e:	e003      	b.n	8006d88 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f97e 	bl	8007084 <USBD_CtlError>
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006da6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006da8:	4b4a      	ldr	r3, [pc, #296]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d905      	bls.n	8006dbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f966 	bl	8007084 <USBD_CtlError>
    return USBD_FAIL;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e087      	b.n	8006ecc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d002      	beq.n	8006dcc <USBD_SetConfig+0x3c>
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d025      	beq.n	8006e16 <USBD_SetConfig+0x86>
 8006dca:	e071      	b.n	8006eb0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006dcc:	4b41      	ldr	r3, [pc, #260]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01c      	beq.n	8006e0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dde:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff f9a7 	bl	8006138 <USBD_SetClassConfig>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f944 	bl	8007084 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006dfc:	e065      	b.n	8006eca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa0b 	bl	800721a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2203      	movs	r2, #3
 8006e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e0c:	e05d      	b.n	8006eca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa03 	bl	800721a <USBD_CtlSendStatus>
    break;
 8006e14:	e059      	b.n	8006eca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006e16:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d112      	bne.n	8006e44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006e26:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e30:	4b28      	ldr	r3, [pc, #160]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f99a 	bl	8006170 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f9ec 	bl	800721a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006e42:	e042      	b.n	8006eca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d02a      	beq.n	8006ea8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff f988 	bl	8006170 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff f961 	bl	8006138 <USBD_SetClassConfig>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00f      	beq.n	8006ea0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f8fe 	bl	8007084 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff f96d 	bl	8006170 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e9e:	e014      	b.n	8006eca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f9ba 	bl	800721a <USBD_CtlSendStatus>
    break;
 8006ea6:	e010      	b.n	8006eca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f9b6 	bl	800721a <USBD_CtlSendStatus>
    break;
 8006eae:	e00c      	b.n	8006eca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8e6 	bl	8007084 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <USBD_SetConfig+0x144>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff f956 	bl	8006170 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec8:	bf00      	nop
  }

  return ret;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000204 	.word	0x20000204

08006ed8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	88db      	ldrh	r3, [r3, #6]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d004      	beq.n	8006ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8c9 	bl	8007084 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006ef2:	e021      	b.n	8006f38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	db17      	blt.n	8006f2e <USBD_GetConfig+0x56>
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	dd02      	ble.n	8006f08 <USBD_GetConfig+0x30>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d00b      	beq.n	8006f1e <USBD_GetConfig+0x46>
 8006f06:	e012      	b.n	8006f2e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3308      	adds	r3, #8
 8006f12:	2201      	movs	r2, #1
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f925 	bl	8007166 <USBD_CtlSendData>
      break;
 8006f1c:	e00c      	b.n	8006f38 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2201      	movs	r2, #1
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f91d 	bl	8007166 <USBD_CtlSendData>
      break;
 8006f2c:	e004      	b.n	8006f38 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8a7 	bl	8007084 <USBD_CtlError>
      break;
 8006f36:	bf00      	nop
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f50:	3b01      	subs	r3, #1
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d81e      	bhi.n	8006f94 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	88db      	ldrh	r3, [r3, #6]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d004      	beq.n	8006f68 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f88f 	bl	8007084 <USBD_CtlError>
      break;
 8006f66:	e01a      	b.n	8006f9e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f043 0202 	orr.w	r2, r3, #2
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	330c      	adds	r3, #12
 8006f88:	2202      	movs	r2, #2
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8ea 	bl	8007166 <USBD_CtlSendData>
    break;
 8006f92:	e004      	b.n	8006f9e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f874 	bl	8007084 <USBD_CtlError>
    break;
 8006f9c:	bf00      	nop
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d106      	bne.n	8006fc6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f92a 	bl	800721a <USBD_CtlSendStatus>
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d80b      	bhi.n	8006ffc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	885b      	ldrh	r3, [r3, #2]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d10c      	bne.n	8007006 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f910 	bl	800721a <USBD_CtlSendStatus>
      }
      break;
 8006ffa:	e004      	b.n	8007006 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f840 	bl	8007084 <USBD_CtlError>
      break;
 8007004:	e000      	b.n	8007008 <USBD_ClrFeature+0x3a>
      break;
 8007006:	bf00      	nop
  }
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fad3 	bl	80065e6 <SWAPBYTE>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f7ff fac6 	bl	80065e6 <SWAPBYTE>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff fab9 	bl	80065e6 <SWAPBYTE>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	80da      	strh	r2, [r3, #6]
}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fcdf 	bl	8007a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fcdb 	bl	8007a54 <USBD_LL_StallEP>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d036      	beq.n	800712a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070c0:	6938      	ldr	r0, [r7, #16]
 80070c2:	f000 f836 	bl	8007132 <USBD_GetLen>
 80070c6:	4603      	mov	r3, r0
 80070c8:	3301      	adds	r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	4413      	add	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	701a      	strb	r2, [r3, #0]
  idx++;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
 80070e2:	3301      	adds	r3, #1
 80070e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4413      	add	r3, r2
 80070ec:	2203      	movs	r2, #3
 80070ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	3301      	adds	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070f6:	e013      	b.n	8007120 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3301      	adds	r3, #1
 8007108:	613b      	str	r3, [r7, #16]
    idx++;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	3301      	adds	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
    idx++;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	3301      	adds	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e7      	bne.n	80070f8 <USBD_GetString+0x52>
 8007128:	e000      	b.n	800712c <USBD_GetString+0x86>
    return;
 800712a:	bf00      	nop
  }
}
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007142:	e005      	b.n	8007150 <USBD_GetLen+0x1e>
  {
    len++;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	3301      	adds	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3301      	adds	r3, #1
 800714e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f5      	bne.n	8007144 <USBD_GetLen+0x12>
  }

  return len;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2202      	movs	r2, #2
 8007176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	2100      	movs	r1, #0
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fcea 	bl	8007b66 <USBD_LL_Transmit>

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fcd9 	bl	8007b66 <USBD_LL_Transmit>

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	2100      	movs	r1, #0
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fcdd 	bl	8007ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	2100      	movs	r1, #0
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fccc 	bl	8007ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2204      	movs	r2, #4
 8007226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	2100      	movs	r1, #0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc98 	bl	8007b66 <USBD_LL_Transmit>

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2205      	movs	r2, #5
 800724c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007250:	2300      	movs	r3, #0
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fca6 	bl	8007ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800726c:	2200      	movs	r2, #0
 800726e:	4912      	ldr	r1, [pc, #72]	; (80072b8 <MX_USB_DEVICE_Init+0x50>)
 8007270:	4812      	ldr	r0, [pc, #72]	; (80072bc <MX_USB_DEVICE_Init+0x54>)
 8007272:	f7fe fef3 	bl	800605c <USBD_Init>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800727c:	f7f9 fd9a 	bl	8000db4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007280:	490f      	ldr	r1, [pc, #60]	; (80072c0 <MX_USB_DEVICE_Init+0x58>)
 8007282:	480e      	ldr	r0, [pc, #56]	; (80072bc <MX_USB_DEVICE_Init+0x54>)
 8007284:	f7fe ff20 	bl	80060c8 <USBD_RegisterClass>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800728e:	f7f9 fd91 	bl	8000db4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007292:	490c      	ldr	r1, [pc, #48]	; (80072c4 <MX_USB_DEVICE_Init+0x5c>)
 8007294:	4809      	ldr	r0, [pc, #36]	; (80072bc <MX_USB_DEVICE_Init+0x54>)
 8007296:	f7fe fe45 	bl	8005f24 <USBD_CDC_RegisterInterface>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072a0:	f7f9 fd88 	bl	8000db4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072a4:	4805      	ldr	r0, [pc, #20]	; (80072bc <MX_USB_DEVICE_Init+0x54>)
 80072a6:	f7fe ff30 	bl	800610a <USBD_Start>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072b0:	f7f9 fd80 	bl	8000db4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000130 	.word	0x20000130
 80072bc:	20000294 	.word	0x20000294
 80072c0:	20000018 	.word	0x20000018
 80072c4:	2000011c 	.word	0x2000011c

080072c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072cc:	2200      	movs	r2, #0
 80072ce:	4905      	ldr	r1, [pc, #20]	; (80072e4 <CDC_Init_FS+0x1c>)
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <CDC_Init_FS+0x20>)
 80072d2:	f7fe fe3c 	bl	8005f4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072d6:	4905      	ldr	r1, [pc, #20]	; (80072ec <CDC_Init_FS+0x24>)
 80072d8:	4803      	ldr	r0, [pc, #12]	; (80072e8 <CDC_Init_FS+0x20>)
 80072da:	f7fe fe51 	bl	8005f80 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80072de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000d64 	.word	0x20000d64
 80072e8:	20000294 	.word	0x20000294
 80072ec:	20000564 	.word	0x20000564

080072f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	71fb      	strb	r3, [r7, #7]
 800730c:	4613      	mov	r3, r2
 800730e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	2b23      	cmp	r3, #35	; 0x23
 8007314:	d84a      	bhi.n	80073ac <CDC_Control_FS+0xac>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <CDC_Control_FS+0x1c>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	080073ad 	.word	0x080073ad
 8007320:	080073ad 	.word	0x080073ad
 8007324:	080073ad 	.word	0x080073ad
 8007328:	080073ad 	.word	0x080073ad
 800732c:	080073ad 	.word	0x080073ad
 8007330:	080073ad 	.word	0x080073ad
 8007334:	080073ad 	.word	0x080073ad
 8007338:	080073ad 	.word	0x080073ad
 800733c:	080073ad 	.word	0x080073ad
 8007340:	080073ad 	.word	0x080073ad
 8007344:	080073ad 	.word	0x080073ad
 8007348:	080073ad 	.word	0x080073ad
 800734c:	080073ad 	.word	0x080073ad
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073ad 	.word	0x080073ad
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080073ad 	.word	0x080073ad
 8007360:	080073ad 	.word	0x080073ad
 8007364:	080073ad 	.word	0x080073ad
 8007368:	080073ad 	.word	0x080073ad
 800736c:	080073ad 	.word	0x080073ad
 8007370:	080073ad 	.word	0x080073ad
 8007374:	080073ad 	.word	0x080073ad
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073ad 	.word	0x080073ad
 8007380:	080073ad 	.word	0x080073ad
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073ad 	.word	0x080073ad
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073ad 	.word	0x080073ad
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073ad 	.word	0x080073ad
 80073a4:	080073ad 	.word	0x080073ad
 80073a8:	080073ad 	.word	0x080073ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073ac:	bf00      	nop
  }

  return (USBD_OK);
 80073ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4805      	ldr	r0, [pc, #20]	; (80073e0 <CDC_Receive_FS+0x24>)
 80073ca:	f7fe fdd9 	bl	8005f80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80073ce:	4804      	ldr	r0, [pc, #16]	; (80073e0 <CDC_Receive_FS+0x24>)
 80073d0:	f7fe fe1a 	bl	8006008 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80073d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000294 	.word	0x20000294

080073e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073f4:	4b0d      	ldr	r3, [pc, #52]	; (800742c <CDC_Transmit_FS+0x48>)
 80073f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007406:	2301      	movs	r3, #1
 8007408:	e00b      	b.n	8007422 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800740a:	887b      	ldrh	r3, [r7, #2]
 800740c:	461a      	mov	r2, r3
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4806      	ldr	r0, [pc, #24]	; (800742c <CDC_Transmit_FS+0x48>)
 8007412:	f7fe fd9c 	bl	8005f4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007416:	4805      	ldr	r0, [pc, #20]	; (800742c <CDC_Transmit_FS+0x48>)
 8007418:	f7fe fdc6 	bl	8005fa8 <USBD_CDC_TransmitPacket>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000294 	.word	0x20000294

08007430 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	6039      	str	r1, [r7, #0]
 800745e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2212      	movs	r2, #18
 8007464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007466:	4b03      	ldr	r3, [pc, #12]	; (8007474 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	2000014c 	.word	0x2000014c

08007478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	6039      	str	r1, [r7, #0]
 8007482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2204      	movs	r2, #4
 8007488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20000160 	.word	0x20000160

0800749c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d105      	bne.n	80074ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	4907      	ldr	r1, [pc, #28]	; (80074d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80074b2:	4808      	ldr	r0, [pc, #32]	; (80074d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80074b4:	f7ff fdf7 	bl	80070a6 <USBD_GetString>
 80074b8:	e004      	b.n	80074c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	4904      	ldr	r1, [pc, #16]	; (80074d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80074be:	4805      	ldr	r0, [pc, #20]	; (80074d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80074c0:	f7ff fdf1 	bl	80070a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074c4:	4b02      	ldr	r3, [pc, #8]	; (80074d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20001564 	.word	0x20001564
 80074d4:	08008034 	.word	0x08008034

080074d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	6039      	str	r1, [r7, #0]
 80074e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	4904      	ldr	r1, [pc, #16]	; (80074f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074e8:	4804      	ldr	r0, [pc, #16]	; (80074fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074ea:	f7ff fddc 	bl	80070a6 <USBD_GetString>
  return USBD_StrDesc;
 80074ee:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20001564 	.word	0x20001564
 80074fc:	0800804c 	.word	0x0800804c

08007500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	221a      	movs	r2, #26
 8007510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007512:	f000 f843 	bl	800759c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007516:	4b02      	ldr	r3, [pc, #8]	; (8007520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000164 	.word	0x20000164

08007524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	4907      	ldr	r1, [pc, #28]	; (8007558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800753a:	4808      	ldr	r0, [pc, #32]	; (800755c <USBD_FS_ConfigStrDescriptor+0x38>)
 800753c:	f7ff fdb3 	bl	80070a6 <USBD_GetString>
 8007540:	e004      	b.n	800754c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	4904      	ldr	r1, [pc, #16]	; (8007558 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007548:	f7ff fdad 	bl	80070a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20001564 	.word	0x20001564
 800755c:	08008060 	.word	0x08008060

08007560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	6039      	str	r1, [r7, #0]
 800756a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	4907      	ldr	r1, [pc, #28]	; (8007594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007576:	4808      	ldr	r0, [pc, #32]	; (8007598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007578:	f7ff fd95 	bl	80070a6 <USBD_GetString>
 800757c:	e004      	b.n	8007588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007584:	f7ff fd8f 	bl	80070a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20001564 	.word	0x20001564
 8007598:	0800806c 	.word	0x0800806c

0800759c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075a2:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <Get_SerialNum+0x44>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075a8:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <Get_SerialNum+0x48>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <Get_SerialNum+0x4c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80075c2:	2208      	movs	r2, #8
 80075c4:	4909      	ldr	r1, [pc, #36]	; (80075ec <Get_SerialNum+0x50>)
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f814 	bl	80075f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075cc:	2204      	movs	r2, #4
 80075ce:	4908      	ldr	r1, [pc, #32]	; (80075f0 <Get_SerialNum+0x54>)
 80075d0:	68b8      	ldr	r0, [r7, #8]
 80075d2:	f000 f80f 	bl	80075f4 <IntToUnicode>
  }
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	1fff7a10 	.word	0x1fff7a10
 80075e4:	1fff7a14 	.word	0x1fff7a14
 80075e8:	1fff7a18 	.word	0x1fff7a18
 80075ec:	20000166 	.word	0x20000166
 80075f0:	20000176 	.word	0x20000176

080075f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007606:	2300      	movs	r3, #0
 8007608:	75fb      	strb	r3, [r7, #23]
 800760a:	e027      	b.n	800765c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	0f1b      	lsrs	r3, r3, #28
 8007610:	2b09      	cmp	r3, #9
 8007612:	d80b      	bhi.n	800762c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0f1b      	lsrs	r3, r3, #28
 8007618:	b2da      	uxtb	r2, r3
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4619      	mov	r1, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	440b      	add	r3, r1
 8007624:	3230      	adds	r2, #48	; 0x30
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	e00a      	b.n	8007642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	0f1b      	lsrs	r3, r3, #28
 8007630:	b2da      	uxtb	r2, r3
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4619      	mov	r1, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	440b      	add	r3, r1
 800763c:	3237      	adds	r2, #55	; 0x37
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	3301      	adds	r3, #1
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	4413      	add	r3, r2
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	3301      	adds	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	7dfa      	ldrb	r2, [r7, #23]
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	429a      	cmp	r2, r3
 8007662:	d3d3      	bcc.n	800760c <IntToUnicode+0x18>
  }
}
 8007664:	bf00      	nop
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	; 0x28
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	605a      	str	r2, [r3, #4]
 8007682:	609a      	str	r2, [r3, #8]
 8007684:	60da      	str	r2, [r3, #12]
 8007686:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007690:	d13a      	bne.n	8007708 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 800769c:	f043 0301 	orr.w	r3, r3, #1
 80076a0:	6313      	str	r3, [r2, #48]	; 0x30
 80076a2:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80076ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80076b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b4:	2302      	movs	r3, #2
 80076b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076bc:	2303      	movs	r3, #3
 80076be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076c0:	230a      	movs	r3, #10
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076c4:	f107 0314 	add.w	r3, r7, #20
 80076c8:	4619      	mov	r1, r3
 80076ca:	4812      	ldr	r0, [pc, #72]	; (8007714 <HAL_PCD_MspInit+0xa4>)
 80076cc:	f7f9 fe8c 	bl	80013e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d4:	4a0e      	ldr	r2, [pc, #56]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076da:	6353      	str	r3, [r2, #52]	; 0x34
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e4:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ea:	6453      	str	r3, [r2, #68]	; 0x44
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_PCD_MspInit+0xa0>)
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	2043      	movs	r0, #67	; 0x43
 80076fe:	f7f9 fe3c 	bl	800137a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007702:	2043      	movs	r0, #67	; 0x43
 8007704:	f7f9 fe55 	bl	80013b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007708:	bf00      	nop
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	40020000 	.word	0x40020000

08007718 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800772c:	4619      	mov	r1, r3
 800772e:	4610      	mov	r0, r2
 8007730:	f7fe fd36 	bl	80061a0 <USBD_LL_SetupStage>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	4619      	mov	r1, r3
 8007766:	f7fe fd6e 	bl	8006246 <USBD_LL_DataOutStage>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007784:	78fa      	ldrb	r2, [r7, #3]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	1a9b      	subs	r3, r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	3348      	adds	r3, #72	; 0x48
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	4619      	mov	r1, r3
 800779a:	f7fe fdb7 	bl	800630c <USBD_LL_DataInStage>
}
 800779e:	bf00      	nop
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe febb 	bl	8006530 <USBD_LL_SOF>
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
 80077da:	e008      	b.n	80077ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d102      	bne.n	80077ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	e001      	b.n	80077ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80077ea:	f7f9 fae3 	bl	8000db4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077f4:	7bfa      	ldrb	r2, [r7, #15]
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fe5e 	bl	80064ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fe17 	bl	8006438 <USBD_LL_Reset>
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fe59 	bl	80064da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007848:	4b04      	ldr	r3, [pc, #16]	; (800785c <HAL_PCD_SuspendCallback+0x48>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	4a03      	ldr	r2, [pc, #12]	; (800785c <HAL_PCD_SuspendCallback+0x48>)
 800784e:	f043 0306 	orr.w	r3, r3, #6
 8007852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	e000ed00 	.word	0xe000ed00

08007860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fe48 	bl	8006504 <USBD_LL_Resume>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fe73 	bl	800657e <USBD_LL_IsoOUTIncomplete>
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	4611      	mov	r1, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fe54 	bl	8006564 <USBD_LL_IsoINIncomplete>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fe60 	bl	8006598 <USBD_LL_DevConnected>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fe5d 	bl	80065ae <USBD_LL_DevDisconnected>
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d13c      	bne.n	8007986 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800790c:	4a20      	ldr	r2, [pc, #128]	; (8007990 <USBD_LL_Init+0x94>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <USBD_LL_Init+0x94>)
 8007918:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800791c:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <USBD_LL_Init+0x94>)
 800791e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007922:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007924:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <USBD_LL_Init+0x94>)
 8007926:	2204      	movs	r2, #4
 8007928:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800792a:	4b19      	ldr	r3, [pc, #100]	; (8007990 <USBD_LL_Init+0x94>)
 800792c:	2202      	movs	r2, #2
 800792e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007930:	4b17      	ldr	r3, [pc, #92]	; (8007990 <USBD_LL_Init+0x94>)
 8007932:	2200      	movs	r2, #0
 8007934:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <USBD_LL_Init+0x94>)
 8007938:	2202      	movs	r2, #2
 800793a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800793c:	4b14      	ldr	r3, [pc, #80]	; (8007990 <USBD_LL_Init+0x94>)
 800793e:	2200      	movs	r2, #0
 8007940:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <USBD_LL_Init+0x94>)
 8007944:	2200      	movs	r2, #0
 8007946:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <USBD_LL_Init+0x94>)
 800794a:	2200      	movs	r2, #0
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <USBD_LL_Init+0x94>)
 8007950:	2200      	movs	r2, #0
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <USBD_LL_Init+0x94>)
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800795a:	480d      	ldr	r0, [pc, #52]	; (8007990 <USBD_LL_Init+0x94>)
 800795c:	f7f9 ff33 	bl	80017c6 <HAL_PCD_Init>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007966:	f7f9 fa25 	bl	8000db4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	4808      	ldr	r0, [pc, #32]	; (8007990 <USBD_LL_Init+0x94>)
 800796e:	f7fb f890 	bl	8002a92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007972:	2240      	movs	r2, #64	; 0x40
 8007974:	2100      	movs	r1, #0
 8007976:	4806      	ldr	r0, [pc, #24]	; (8007990 <USBD_LL_Init+0x94>)
 8007978:	f7fb f844 	bl	8002a04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	2101      	movs	r1, #1
 8007980:	4803      	ldr	r0, [pc, #12]	; (8007990 <USBD_LL_Init+0x94>)
 8007982:	f7fb f83f 	bl	8002a04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20001764 	.word	0x20001764

08007994 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fa f828 	bl	8001a00 <HAL_PCD_Start>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f92a 	bl	8007c10 <USBD_Get_USB_Status>
 80079bc:	4603      	mov	r3, r0
 80079be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	4608      	mov	r0, r1
 80079d4:	4611      	mov	r1, r2
 80079d6:	461a      	mov	r2, r3
 80079d8:	4603      	mov	r3, r0
 80079da:	70fb      	strb	r3, [r7, #3]
 80079dc:	460b      	mov	r3, r1
 80079de:	70bb      	strb	r3, [r7, #2]
 80079e0:	4613      	mov	r3, r2
 80079e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079f2:	78bb      	ldrb	r3, [r7, #2]
 80079f4:	883a      	ldrh	r2, [r7, #0]
 80079f6:	78f9      	ldrb	r1, [r7, #3]
 80079f8:	f7fa fc0c 	bl	8002214 <HAL_PCD_EP_Open>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 f904 	bl	8007c10 <USBD_Get_USB_Status>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fa fc55 	bl	80022e4 <HAL_PCD_EP_Close>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 f8e5 	bl	8007c10 <USBD_Get_USB_Status>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	4611      	mov	r1, r2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fa fd2d 	bl	80024d2 <HAL_PCD_EP_SetStall>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f8c6 	bl	8007c10 <USBD_Get_USB_Status>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fa fd72 	bl	800259a <HAL_PCD_EP_ClrStall>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f8a7 	bl	8007c10 <USBD_Get_USB_Status>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ae2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da0b      	bge.n	8007b04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	1a9b      	subs	r3, r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	333e      	adds	r3, #62	; 0x3e
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	e00b      	b.n	8007b1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fa fb3f 	bl	80021ca <HAL_PCD_SetAddress>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f85c 	bl	8007c10 <USBD_Get_USB_Status>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
 8007b72:	460b      	mov	r3, r1
 8007b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b84:	7af9      	ldrb	r1, [r7, #11]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	f7fa fc58 	bl	800243e <HAL_PCD_EP_Transmit>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f83b 	bl	8007c10 <USBD_Get_USB_Status>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007bc6:	7af9      	ldrb	r1, [r7, #11]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	f7fa fbd4 	bl	8002378 <HAL_PCD_EP_Receive>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f81a 	bl	8007c10 <USBD_Get_USB_Status>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fa fc04 	bl	800240e <HAL_PCD_EP_GetRxCount>
 8007c06:	4603      	mov	r3, r0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d817      	bhi.n	8007c54 <USBD_Get_USB_Status+0x44>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <USBD_Get_USB_Status+0x1c>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c43 	.word	0x08007c43
 8007c34:	08007c49 	.word	0x08007c49
 8007c38:	08007c4f 	.word	0x08007c4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c40:	e00b      	b.n	8007c5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	73fb      	strb	r3, [r7, #15]
    break;
 8007c46:	e008      	b.n	8007c5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4c:	e005      	b.n	8007c5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	73fb      	strb	r3, [r7, #15]
    break;
 8007c52:	e002      	b.n	8007c5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	73fb      	strb	r3, [r7, #15]
    break;
 8007c58:	bf00      	nop
  }
  return usb_status;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <__errno>:
 8007c68:	4b01      	ldr	r3, [pc, #4]	; (8007c70 <__errno+0x8>)
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000180 	.word	0x20000180

08007c74 <__libc_init_array>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4e0d      	ldr	r6, [pc, #52]	; (8007cac <__libc_init_array+0x38>)
 8007c78:	4c0d      	ldr	r4, [pc, #52]	; (8007cb0 <__libc_init_array+0x3c>)
 8007c7a:	1ba4      	subs	r4, r4, r6
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	2500      	movs	r5, #0
 8007c80:	42a5      	cmp	r5, r4
 8007c82:	d109      	bne.n	8007c98 <__libc_init_array+0x24>
 8007c84:	4e0b      	ldr	r6, [pc, #44]	; (8007cb4 <__libc_init_array+0x40>)
 8007c86:	4c0c      	ldr	r4, [pc, #48]	; (8007cb8 <__libc_init_array+0x44>)
 8007c88:	f000 f94e 	bl	8007f28 <_init>
 8007c8c:	1ba4      	subs	r4, r4, r6
 8007c8e:	10a4      	asrs	r4, r4, #2
 8007c90:	2500      	movs	r5, #0
 8007c92:	42a5      	cmp	r5, r4
 8007c94:	d105      	bne.n	8007ca2 <__libc_init_array+0x2e>
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c9c:	4798      	blx	r3
 8007c9e:	3501      	adds	r5, #1
 8007ca0:	e7ee      	b.n	8007c80 <__libc_init_array+0xc>
 8007ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ca6:	4798      	blx	r3
 8007ca8:	3501      	adds	r5, #1
 8007caa:	e7f2      	b.n	8007c92 <__libc_init_array+0x1e>
 8007cac:	080080c4 	.word	0x080080c4
 8007cb0:	080080c4 	.word	0x080080c4
 8007cb4:	080080c4 	.word	0x080080c4
 8007cb8:	080080c8 	.word	0x080080c8

08007cbc <__itoa>:
 8007cbc:	1e93      	subs	r3, r2, #2
 8007cbe:	2b22      	cmp	r3, #34	; 0x22
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	d904      	bls.n	8007cd0 <__itoa+0x14>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	700b      	strb	r3, [r1, #0]
 8007cca:	461c      	mov	r4, r3
 8007ccc:	4620      	mov	r0, r4
 8007cce:	bd10      	pop	{r4, pc}
 8007cd0:	2a0a      	cmp	r2, #10
 8007cd2:	d109      	bne.n	8007ce8 <__itoa+0x2c>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	da07      	bge.n	8007ce8 <__itoa+0x2c>
 8007cd8:	232d      	movs	r3, #45	; 0x2d
 8007cda:	700b      	strb	r3, [r1, #0]
 8007cdc:	4240      	negs	r0, r0
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4421      	add	r1, r4
 8007ce2:	f000 f8e1 	bl	8007ea8 <__utoa>
 8007ce6:	e7f1      	b.n	8007ccc <__itoa+0x10>
 8007ce8:	2100      	movs	r1, #0
 8007cea:	e7f9      	b.n	8007ce0 <__itoa+0x24>

08007cec <itoa>:
 8007cec:	f7ff bfe6 	b.w	8007cbc <__itoa>

08007cf0 <malloc>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <malloc+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f000 b86d 	b.w	8007dd4 <_malloc_r>
 8007cfa:	bf00      	nop
 8007cfc:	20000180 	.word	0x20000180

08007d00 <free>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	; (8007d0c <free+0xc>)
 8007d02:	4601      	mov	r1, r0
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f000 b817 	b.w	8007d38 <_free_r>
 8007d0a:	bf00      	nop
 8007d0c:	20000180 	.word	0x20000180

08007d10 <memcpy>:
 8007d10:	b510      	push	{r4, lr}
 8007d12:	1e43      	subs	r3, r0, #1
 8007d14:	440a      	add	r2, r1
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d100      	bne.n	8007d1c <memcpy+0xc>
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d24:	e7f7      	b.n	8007d16 <memcpy+0x6>

08007d26 <memset>:
 8007d26:	4402      	add	r2, r0
 8007d28:	4603      	mov	r3, r0
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d100      	bne.n	8007d30 <memset+0xa>
 8007d2e:	4770      	bx	lr
 8007d30:	f803 1b01 	strb.w	r1, [r3], #1
 8007d34:	e7f9      	b.n	8007d2a <memset+0x4>
	...

08007d38 <_free_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d045      	beq.n	8007dcc <_free_r+0x94>
 8007d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d44:	1f0c      	subs	r4, r1, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfb8      	it	lt
 8007d4a:	18e4      	addlt	r4, r4, r3
 8007d4c:	f000 f8ea 	bl	8007f24 <__malloc_lock>
 8007d50:	4a1f      	ldr	r2, [pc, #124]	; (8007dd0 <_free_r+0x98>)
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	4610      	mov	r0, r2
 8007d56:	b933      	cbnz	r3, 8007d66 <_free_r+0x2e>
 8007d58:	6063      	str	r3, [r4, #4]
 8007d5a:	6014      	str	r4, [r2, #0]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d62:	f000 b8e0 	b.w	8007f26 <__malloc_unlock>
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	d90c      	bls.n	8007d84 <_free_r+0x4c>
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	1862      	adds	r2, r4, r1
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bf04      	itt	eq
 8007d72:	681a      	ldreq	r2, [r3, #0]
 8007d74:	685b      	ldreq	r3, [r3, #4]
 8007d76:	6063      	str	r3, [r4, #4]
 8007d78:	bf04      	itt	eq
 8007d7a:	1852      	addeq	r2, r2, r1
 8007d7c:	6022      	streq	r2, [r4, #0]
 8007d7e:	6004      	str	r4, [r0, #0]
 8007d80:	e7ec      	b.n	8007d5c <_free_r+0x24>
 8007d82:	4613      	mov	r3, r2
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	b10a      	cbz	r2, 8007d8c <_free_r+0x54>
 8007d88:	42a2      	cmp	r2, r4
 8007d8a:	d9fa      	bls.n	8007d82 <_free_r+0x4a>
 8007d8c:	6819      	ldr	r1, [r3, #0]
 8007d8e:	1858      	adds	r0, r3, r1
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d10b      	bne.n	8007dac <_free_r+0x74>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	4401      	add	r1, r0
 8007d98:	1858      	adds	r0, r3, r1
 8007d9a:	4282      	cmp	r2, r0
 8007d9c:	6019      	str	r1, [r3, #0]
 8007d9e:	d1dd      	bne.n	8007d5c <_free_r+0x24>
 8007da0:	6810      	ldr	r0, [r2, #0]
 8007da2:	6852      	ldr	r2, [r2, #4]
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	4401      	add	r1, r0
 8007da8:	6019      	str	r1, [r3, #0]
 8007daa:	e7d7      	b.n	8007d5c <_free_r+0x24>
 8007dac:	d902      	bls.n	8007db4 <_free_r+0x7c>
 8007dae:	230c      	movs	r3, #12
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	e7d3      	b.n	8007d5c <_free_r+0x24>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	1821      	adds	r1, r4, r0
 8007db8:	428a      	cmp	r2, r1
 8007dba:	bf04      	itt	eq
 8007dbc:	6811      	ldreq	r1, [r2, #0]
 8007dbe:	6852      	ldreq	r2, [r2, #4]
 8007dc0:	6062      	str	r2, [r4, #4]
 8007dc2:	bf04      	itt	eq
 8007dc4:	1809      	addeq	r1, r1, r0
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	605c      	str	r4, [r3, #4]
 8007dca:	e7c7      	b.n	8007d5c <_free_r+0x24>
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000208 	.word	0x20000208

08007dd4 <_malloc_r>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	1ccd      	adds	r5, r1, #3
 8007dd8:	f025 0503 	bic.w	r5, r5, #3
 8007ddc:	3508      	adds	r5, #8
 8007dde:	2d0c      	cmp	r5, #12
 8007de0:	bf38      	it	cc
 8007de2:	250c      	movcc	r5, #12
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	4606      	mov	r6, r0
 8007de8:	db01      	blt.n	8007dee <_malloc_r+0x1a>
 8007dea:	42a9      	cmp	r1, r5
 8007dec:	d903      	bls.n	8007df6 <_malloc_r+0x22>
 8007dee:	230c      	movs	r3, #12
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	2000      	movs	r0, #0
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
 8007df6:	f000 f895 	bl	8007f24 <__malloc_lock>
 8007dfa:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <_malloc_r+0xac>)
 8007dfc:	6814      	ldr	r4, [r2, #0]
 8007dfe:	4621      	mov	r1, r4
 8007e00:	b991      	cbnz	r1, 8007e28 <_malloc_r+0x54>
 8007e02:	4c20      	ldr	r4, [pc, #128]	; (8007e84 <_malloc_r+0xb0>)
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	b91b      	cbnz	r3, 8007e10 <_malloc_r+0x3c>
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f83d 	bl	8007e88 <_sbrk_r>
 8007e0e:	6020      	str	r0, [r4, #0]
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f000 f838 	bl	8007e88 <_sbrk_r>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d124      	bne.n	8007e66 <_malloc_r+0x92>
 8007e1c:	230c      	movs	r3, #12
 8007e1e:	6033      	str	r3, [r6, #0]
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f880 	bl	8007f26 <__malloc_unlock>
 8007e26:	e7e4      	b.n	8007df2 <_malloc_r+0x1e>
 8007e28:	680b      	ldr	r3, [r1, #0]
 8007e2a:	1b5b      	subs	r3, r3, r5
 8007e2c:	d418      	bmi.n	8007e60 <_malloc_r+0x8c>
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d90f      	bls.n	8007e52 <_malloc_r+0x7e>
 8007e32:	600b      	str	r3, [r1, #0]
 8007e34:	50cd      	str	r5, [r1, r3]
 8007e36:	18cc      	adds	r4, r1, r3
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f874 	bl	8007f26 <__malloc_unlock>
 8007e3e:	f104 000b 	add.w	r0, r4, #11
 8007e42:	1d23      	adds	r3, r4, #4
 8007e44:	f020 0007 	bic.w	r0, r0, #7
 8007e48:	1ac3      	subs	r3, r0, r3
 8007e4a:	d0d3      	beq.n	8007df4 <_malloc_r+0x20>
 8007e4c:	425a      	negs	r2, r3
 8007e4e:	50e2      	str	r2, [r4, r3]
 8007e50:	e7d0      	b.n	8007df4 <_malloc_r+0x20>
 8007e52:	428c      	cmp	r4, r1
 8007e54:	684b      	ldr	r3, [r1, #4]
 8007e56:	bf16      	itet	ne
 8007e58:	6063      	strne	r3, [r4, #4]
 8007e5a:	6013      	streq	r3, [r2, #0]
 8007e5c:	460c      	movne	r4, r1
 8007e5e:	e7eb      	b.n	8007e38 <_malloc_r+0x64>
 8007e60:	460c      	mov	r4, r1
 8007e62:	6849      	ldr	r1, [r1, #4]
 8007e64:	e7cc      	b.n	8007e00 <_malloc_r+0x2c>
 8007e66:	1cc4      	adds	r4, r0, #3
 8007e68:	f024 0403 	bic.w	r4, r4, #3
 8007e6c:	42a0      	cmp	r0, r4
 8007e6e:	d005      	beq.n	8007e7c <_malloc_r+0xa8>
 8007e70:	1a21      	subs	r1, r4, r0
 8007e72:	4630      	mov	r0, r6
 8007e74:	f000 f808 	bl	8007e88 <_sbrk_r>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d0cf      	beq.n	8007e1c <_malloc_r+0x48>
 8007e7c:	6025      	str	r5, [r4, #0]
 8007e7e:	e7db      	b.n	8007e38 <_malloc_r+0x64>
 8007e80:	20000208 	.word	0x20000208
 8007e84:	2000020c 	.word	0x2000020c

08007e88 <_sbrk_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4c06      	ldr	r4, [pc, #24]	; (8007ea4 <_sbrk_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4605      	mov	r5, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	f7f9 f88c 	bl	8000fb0 <_sbrk>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_sbrk_r+0x1a>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_sbrk_r+0x1a>
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20001b6c 	.word	0x20001b6c

08007ea8 <__utoa>:
 8007ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eaa:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <__utoa+0x78>)
 8007eac:	b08b      	sub	sp, #44	; 0x2c
 8007eae:	4605      	mov	r5, r0
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	466e      	mov	r6, sp
 8007eb4:	f103 0c20 	add.w	ip, r3, #32
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	6859      	ldr	r1, [r3, #4]
 8007ebc:	4637      	mov	r7, r6
 8007ebe:	c703      	stmia	r7!, {r0, r1}
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	4563      	cmp	r3, ip
 8007ec4:	463e      	mov	r6, r7
 8007ec6:	d1f7      	bne.n	8007eb8 <__utoa+0x10>
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	791b      	ldrb	r3, [r3, #4]
 8007ecc:	713b      	strb	r3, [r7, #4]
 8007ece:	1e93      	subs	r3, r2, #2
 8007ed0:	2b22      	cmp	r3, #34	; 0x22
 8007ed2:	6038      	str	r0, [r7, #0]
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	d904      	bls.n	8007ee4 <__utoa+0x3c>
 8007eda:	7023      	strb	r3, [r4, #0]
 8007edc:	461c      	mov	r4, r3
 8007ede:	4620      	mov	r0, r4
 8007ee0:	b00b      	add	sp, #44	; 0x2c
 8007ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee4:	1e66      	subs	r6, r4, #1
 8007ee6:	fbb5 f0f2 	udiv	r0, r5, r2
 8007eea:	af0a      	add	r7, sp, #40	; 0x28
 8007eec:	fb02 5510 	mls	r5, r2, r0, r5
 8007ef0:	443d      	add	r5, r7
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007ef8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007efc:	4605      	mov	r5, r0
 8007efe:	b968      	cbnz	r0, 8007f1c <__utoa+0x74>
 8007f00:	5460      	strb	r0, [r4, r1]
 8007f02:	4423      	add	r3, r4
 8007f04:	4622      	mov	r2, r4
 8007f06:	1b19      	subs	r1, r3, r4
 8007f08:	1b10      	subs	r0, r2, r4
 8007f0a:	4281      	cmp	r1, r0
 8007f0c:	dde7      	ble.n	8007ede <__utoa+0x36>
 8007f0e:	7811      	ldrb	r1, [r2, #0]
 8007f10:	7818      	ldrb	r0, [r3, #0]
 8007f12:	f802 0b01 	strb.w	r0, [r2], #1
 8007f16:	f803 1901 	strb.w	r1, [r3], #-1
 8007f1a:	e7f4      	b.n	8007f06 <__utoa+0x5e>
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e7e2      	b.n	8007ee6 <__utoa+0x3e>
 8007f20:	08008094 	.word	0x08008094

08007f24 <__malloc_lock>:
 8007f24:	4770      	bx	lr

08007f26 <__malloc_unlock>:
 8007f26:	4770      	bx	lr

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
