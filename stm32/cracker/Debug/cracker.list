
cracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007970  08007970  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00017970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001e4  08007b5c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  08007b5c  00021b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018119  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000340b  00000000  00000000  0003832d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  0003b738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  0003c980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024582  00000000  00000000  0003da40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010372  00000000  00000000  00061fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce350  00000000  00000000  00072334  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df8  00000000  00000000  00140700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007864 	.word	0x08007864

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007864 	.word	0x08007864

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <init_target_connection>:
		return INCORRECT_TARGET_RESPONSE;
	}
	return RX_TX_OK;
}

uint32_t init_target_connection(UART_HandleTypeDef *huart){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	uint8_t transmitBuffer[4];
	uint8_t recieveBuffer[4];

	// First set the uart peripheral baud rate to 9600.
	huart->Init.BaudRate = 9600;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004d6:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(huart) != HAL_OK){
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f002 fedf 	bl	800329c <HAL_UART_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <init_target_connection+0x20>
	  return HW_BAUDRATE_CHANGE_ERR;
 80004e4:	2306      	movs	r3, #6
 80004e6:	e033      	b.n	8000550 <init_target_connection+0x88>
	}

	// Send the first 16x 0x00 bytes
	int i;
	for(i =0; i < 16; i++){
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e013      	b.n	8000516 <init_target_connection+0x4e>
		transmitBuffer[0] = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	743b      	strb	r3, [r7, #16]
		if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 80004f2:	f107 0110 	add.w	r1, r7, #16
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	2201      	movs	r2, #1
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f002 ff1b 	bl	8003336 <HAL_UART_Transmit>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <init_target_connection+0x42>
			return TRANSMIT_ERR;
 8000506:	2301      	movs	r3, #1
 8000508:	e022      	b.n	8000550 <init_target_connection+0x88>
		}
		// Wait the required 20ms
		HAL_Delay(20);
 800050a:	2014      	movs	r0, #20
 800050c:	f000 fb62 	bl	8000bd4 <HAL_Delay>
	for(i =0; i < 16; i++){
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	3301      	adds	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	dde8      	ble.n	80004ee <init_target_connection+0x26>
	}

	// After sending another 0x00 the target should respond with a random byte
	if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 800051c:	f107 0110 	add.w	r1, r7, #16
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2201      	movs	r2, #1
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 ff06 	bl	8003336 <HAL_UART_Transmit>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <init_target_connection+0x6c>
		return TRANSMIT_ERR;
 8000530:	2301      	movs	r3, #1
 8000532:	e00d      	b.n	8000550 <init_target_connection+0x88>
	}

	if(HAL_UART_Receive(huart, recieveBuffer, 1, RX_TIMEOUT) != HAL_OK){
 8000534:	f107 010c 	add.w	r1, r7, #12
 8000538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800053c:	2201      	movs	r2, #1
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f002 ff92 	bl	8003468 <HAL_UART_Receive>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <init_target_connection+0x86>
		return NO_RESPONSE;
 800054a:	2302      	movs	r3, #2
 800054c:	e000      	b.n	8000550 <init_target_connection+0x88>
	}
	return CON_INIT_OK;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <usb_uart_print>:
/* USER CODE BEGIN 0 */

/*Please please please don't use print functions for debugging. Use print functions only for
 *status update, that will be used once the program will be in a state to run standalone.*/

void usb_uart_print(uint8_t text[], uint32_t test_size){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	/*7 bit ascii is retarded. - Terry Davis.*/
	// Don't do sizeof dynamic arrays. Learned that the hard way.
    CDC_Transmit_FS((uint8_t*)text, test_size);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	b29b      	uxth	r3, r3
 8000566:	4619      	mov	r1, r3
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f006 fbd9 	bl	8006d20 <CDC_Transmit_FS>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b09c      	sub	sp, #112	; 0x70
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fab7 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f84d 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f92b 	bl	80007e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800058a:	f000 f8b3 	bl	80006f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800058e:	f000 f8fd 	bl	800078c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000592:	f006 fb07 	bl	8006ba4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 fb1b 	bl	8000bd4 <HAL_Delay>
	uint8_t start_text[] = "Press key0 to start cracker.\n";
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <main+0x98>)
 80005a0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005ae:	c407      	stmia	r4!, {r0, r1, r2}
 80005b0:	8023      	strh	r3, [r4, #0]
	usb_uart_print(start_text, sizeof(start_text));
 80005b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005b6:	211e      	movs	r1, #30
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffcd 	bl	8000558 <usb_uart_print>
	//Wait for start button press (key0 on board).
	while(HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin));
 80005be:	bf00      	nop
 80005c0:	2110      	movs	r1, #16
 80005c2:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0x9c>)
 80005c4:	f000 fdd4 	bl	8001170 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f8      	bne.n	80005c0 <main+0x48>
	uint32_t returncode;
	returncode = init_target_connection(&huart1);
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0xa0>)
 80005d0:	f7ff ff7a 	bl	80004c8 <init_target_connection>
 80005d4:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(returncode != CON_INIT_OK)
 80005d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0dc      	beq.n	8000596 <main+0x1e>
	{
		char errorcodeNumberStr[2];
		itoa(returncode, errorcodeNumberStr, 10);
 80005dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005de:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80005e2:	220a      	movs	r2, #10
 80005e4:	4618      	mov	r0, r3
 80005e6:	f007 f81f 	bl	8007628 <itoa>
		uint8_t error_text[] = "Error while initializing target communication. Error number is: ";
 80005ea:	4a0c      	ldr	r2, [pc, #48]	; (800061c <main+0xa4>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4611      	mov	r1, r2
 80005f0:	2241      	movs	r2, #65	; 0x41
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 f82a 	bl	800764c <memcpy>
		usb_uart_print(error_text, sizeof(error_text));
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2141      	movs	r1, #65	; 0x41
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffab 	bl	8000558 <usb_uart_print>
		usb_uart_print((uint8_t *)errorcodeNumberStr, sizeof(errorcodeNumberStr));
 8000602:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffa5 	bl	8000558 <usb_uart_print>
  {
 800060e:	e7c2      	b.n	8000596 <main+0x1e>
 8000610:	0800787c 	.word	0x0800787c
 8000614:	40021000 	.word	0x40021000
 8000618:	20000210 	.word	0x20000210
 800061c:	0800789c 	.word	0x0800789c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 f817 	bl	8007662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000694:	23a8      	movs	r3, #168	; 0xa8
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069c:	2307      	movs	r3, #7
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 feff 	bl	80024a8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f8e0 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f958 	bl	8002988 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 f8c9 	bl	8000874 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM2_Init+0x94>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM2_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM2_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM2_Init+0x94>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM2_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM2_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_TIM2_Init+0x94>)
 800073a:	f002 fb17 	bl	8002d6c <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000744:	f000 f896 	bl	8000874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_TIM2_Init+0x94>)
 8000756:	f002 fb34 	bl	8002dc2 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f888 	bl	8000874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM2_Init+0x94>)
 8000772:	f002 fd17 	bl	80031a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f87a 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000250 	.word	0x20000250

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART1_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f002 fd6a 	bl	800329c <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f851 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000210 	.word	0x20000210
 80007dc:	40011000 	.word	0x40011000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_GPIO_Init+0x8c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_GPIO_Init+0x8c>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_GPIO_Init+0x8c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_GPIO_Init+0x8c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_GPIO_Init+0x8c>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_GPIO_Init+0x8c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_GPIO_Init+0x8c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a0d      	ldr	r2, [pc, #52]	; (800086c <MX_GPIO_Init+0x8c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_GPIO_Init+0x8c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : start_button_Pin */
  GPIO_InitStruct.Pin = start_button_Pin;
 800084a:	2310      	movs	r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000852:	2301      	movs	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(start_button_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_GPIO_Init+0x90>)
 800085e:	f000 faed 	bl	8000e3c <HAL_GPIO_Init>

}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40021000 	.word	0x40021000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x6>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <HAL_MspInit+0x4c>)
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008dc:	d10d      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_TIM_Base_MspInit+0x3c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_TIM_Base_MspInit+0x3c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12c      	bne.n	8000988 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000966:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000978:	2307      	movs	r3, #7
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000984:	f000 fa5a 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40011000 	.word	0x40011000
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8d4 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <OTG_FS_IRQHandler+0x10>)
 80009f6:	f000 fd23 	bl	8001440 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20001764 	.word	0x20001764

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f006 fdb6 	bl	80075a4 <__errno>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20020000 	.word	0x20020000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	20000200 	.word	0x20000200
 8000a6c:	20001b70 	.word	0x20001b70

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemInit+0x28>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <SystemInit+0x28>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SystemInit+0x28>)
 8000a86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd3 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f006 fd71 	bl	80075b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd53 	bl	8000578 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	08007978 	.word	0x08007978
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000ae4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000ae8:	20001b70 	.word	0x20001b70

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f94d 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff feaa 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f965 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 f92d 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000290 	.word	0x20000290

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000290 	.word	0x20000290

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_Delay+0x40>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e16b      	b.n	8001130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 815a 	bne.w	800112a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d00b      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	2b11      	cmp	r3, #17
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0xfc>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b4 	beq.w	800112a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_GPIO_Init+0x310>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_GPIO_Init+0x314>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x318>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x31c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x320>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x324>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x328>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x20a>
 8001042:	2307      	movs	r3, #7
 8001044:	e00e      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001046:	2308      	movs	r3, #8
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104a:	2306      	movs	r3, #6
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4934      	ldr	r1, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_GPIO_Init+0x330>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_GPIO_Init+0x330>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_GPIO_Init+0x330>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_GPIO_Init+0x330>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_GPIO_Init+0x330>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_GPIO_Init+0x330>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae90 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40021c00 	.word	0x40021c00
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b08f      	sub	sp, #60	; 0x3c
 80011a4:	af0a      	add	r7, sp, #40	; 0x28
 80011a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e10f      	b.n	80013d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d106      	bne.n	80011d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f005 feed 	bl	8006fac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 feba 	bl	8003f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	687e      	ldr	r6, [r7, #4]
 80011fe:	466d      	mov	r5, sp
 8001200:	f106 0410 	add.w	r4, r6, #16
 8001204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001210:	e885 0003 	stmia.w	r5, {r0, r1}
 8001214:	1d33      	adds	r3, r6, #4
 8001216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001218:	6838      	ldr	r0, [r7, #0]
 800121a:	f002 fd91 	bl	8003d40 <USB_CoreInit>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d0      	b.n	80013d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fea8 	bl	8003f8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e04a      	b.n	80012d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	333d      	adds	r3, #61	; 0x3d
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	333c      	adds	r3, #60	; 0x3c
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	b298      	uxth	r0, r3
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	3342      	adds	r3, #66	; 0x42
 800127e:	4602      	mov	r2, r0
 8001280:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	1a9b      	subs	r3, r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	333f      	adds	r3, #63	; 0x3f
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	3344      	adds	r3, #68	; 0x44
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	3348      	adds	r3, #72	; 0x48
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	440b      	add	r3, r1
 80012cc:	3350      	adds	r3, #80	; 0x50
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3af      	bcc.n	8001242 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e044      	b.n	8001372 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	1a9b      	subs	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	3301      	adds	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d3b5      	bcc.n	80012e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	687e      	ldr	r6, [r7, #4]
 8001384:	466d      	mov	r5, sp
 8001386:	f106 0410 	add.w	r4, r6, #16
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001396:	e885 0003 	stmia.w	r5, {r0, r1}
 800139a:	1d33      	adds	r3, r6, #4
 800139c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f002 fe1e 	bl	8003fe0 <USB_DevInit>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00d      	b.n	80013d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fe66 	bl	800509c <USB_DevDisconnect>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_PCD_Start+0x1c>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e020      	b.n	8001438 <HAL_PCD_Start+0x5e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	2b01      	cmp	r3, #1
 8001404:	d109      	bne.n	800141a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fd92 	bl	8003f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fe16 	bl	800505a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08d      	sub	sp, #52	; 0x34
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fed4 	bl	8005204 <USB_GetMode>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 839d 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fe38 	bl	80050de <USB_ReadInterrupts>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 8393 	beq.w	8001b9c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fe2f 	bl	80050de <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f002 0202 	and.w	r2, r2, #2
 8001498:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fe1d 	bl	80050de <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d161      	bne.n	8001572 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0210 	bic.w	r2, r2, #16
 80014bc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f003 020f 	and.w	r2, r3, #15
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	3304      	adds	r3, #4
 80014dc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	0c5b      	lsrs	r3, r3, #17
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d124      	bne.n	8001534 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d035      	beq.n	8001562 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	6a38      	ldr	r0, [r7, #32]
 800150a:	f003 fc83 	bl	8004e14 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151a:	441a      	add	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	e016      	b.n	8001562 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	0c5b      	lsrs	r3, r3, #17
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	2b06      	cmp	r3, #6
 800153e:	d110      	bne.n	8001562 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001546:	2208      	movs	r2, #8
 8001548:	4619      	mov	r1, r3
 800154a:	6a38      	ldr	r0, [r7, #32]
 800154c:	f003 fc62 	bl	8004e14 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800155c:	441a      	add	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0210 	orr.w	r2, r2, #16
 8001570:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fdb1 	bl	80050de <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001586:	d16e      	bne.n	8001666 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f003 fdb7 	bl	8005104 <USB_ReadDevAllOutEpInterrupt>
 8001596:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001598:	e062      	b.n	8001660 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d057      	beq.n	8001654 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fddc 	bl	800516c <USB_ReadDevOutEPInterrupt>
 80015b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015cc:	461a      	mov	r2, r3
 80015ce:	2301      	movs	r3, #1
 80015d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 fdb1 	bl	800213c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00c      	beq.n	80015fe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	015a      	lsls	r2, r3, #5
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f0:	461a      	mov	r2, r3
 80015f2:	2308      	movs	r3, #8
 80015f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 feab 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001614:	461a      	mov	r2, r3
 8001616:	2310      	movs	r3, #16
 8001618:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001630:	461a      	mov	r2, r3
 8001632:	2320      	movs	r3, #32
 8001634:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800164c:	461a      	mov	r2, r3
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	085b      	lsrs	r3, r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	d199      	bne.n	800159a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fd37 	bl	80050de <USB_ReadInterrupts>
 8001670:	4603      	mov	r3, r0
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800167a:	f040 80c0 	bne.w	80017fe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fd58 	bl	8005138 <USB_ReadDevAllInEpInterrupt>
 8001688:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800168e:	e0b2      	b.n	80017f6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a7 	beq.w	80017ea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fd7e 	bl	80051a8 <USB_ReadDevInEPInterrupt>
 80016ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d057      	beq.n	8001768 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	2201      	movs	r2, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69f9      	ldr	r1, [r7, #28]
 80016d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016d8:	4013      	ands	r3, r2
 80016da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	461a      	mov	r2, r3
 80016ea:	2301      	movs	r3, #1
 80016ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d132      	bne.n	800175c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3348      	adds	r3, #72	; 0x48
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4403      	add	r3, r0
 8001716:	3344      	adds	r3, #68	; 0x44
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4419      	add	r1, r3
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001720:	4613      	mov	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4403      	add	r3, r0
 800172a:	3348      	adds	r3, #72	; 0x48
 800172c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	2b00      	cmp	r3, #0
 8001732:	d113      	bne.n	800175c <HAL_PCD_IRQHandler+0x31c>
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3350      	adds	r3, #80	; 0x50
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001754:	461a      	mov	r2, r3
 8001756:	2101      	movs	r1, #1
 8001758:	f003 fd86 	bl	8005268 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f005 fca3 	bl	80070ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	2308      	movs	r3, #8
 8001782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179a:	461a      	mov	r2, r3
 800179c:	2310      	movs	r3, #16
 800179e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b6:	461a      	mov	r2, r3
 80017b8:	2340      	movs	r3, #64	; 0x40
 80017ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d2:	461a      	mov	r2, r3
 80017d4:	2302      	movs	r3, #2
 80017d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fc1b 	bl	8002020 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f af49 	bne.w	8001690 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fc6b 	bl	80050de <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800180e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001812:	d122      	bne.n	800185a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800183a:	2100      	movs	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fe27 	bl	8002490 <HAL_PCDEx_LPM_Callback>
 8001842:	e002      	b.n	800184a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f005 fca9 	bl	800719c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fc3d 	bl	80050de <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800186a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800186e:	d112      	bne.n	8001896 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f005 fc65 	bl	8007150 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001894:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fc1f 	bl	80050de <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018aa:	f040 80c7 	bne.w	8001a3c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2110      	movs	r1, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fced 	bl	80042a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	e056      	b.n	8001982 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e0:	461a      	mov	r2, r3
 80018e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f8:	0151      	lsls	r1, r2, #5
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	440a      	add	r2, r1
 80018fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001906:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001918:	0151      	lsls	r1, r2, #5
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	440a      	add	r2, r1
 800191e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001926:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	015a      	lsls	r2, r3, #5
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001934:	461a      	mov	r2, r3
 8001936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800193a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194c:	0151      	lsls	r1, r2, #5
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	440a      	add	r2, r1
 8001952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800195a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	015a      	lsls	r2, r3, #5
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196c:	0151      	lsls	r1, r2, #5
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	440a      	add	r2, r1
 8001972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800197a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	3301      	adds	r3, #1
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001988:	429a      	cmp	r2, r3
 800198a:	d3a3      	bcc.n	80018d4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800199e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d016      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f043 030b 	orr.w	r3, r3, #11
 80019bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ce:	f043 030b 	orr.w	r3, r3, #11
 80019d2:	6453      	str	r3, [r2, #68]	; 0x44
 80019d4:	e015      	b.n	8001a02 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019fc:	f043 030b 	orr.w	r3, r3, #11
 8001a00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a26:	461a      	mov	r2, r3
 8001a28:	f003 fc1e 	bl	8005268 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fb4c 	bl	80050de <USB_ReadInterrupts>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a50:	d124      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fbe2 	bl	8005220 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fc82 	bl	800436a <USB_GetDevSpeed>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681c      	ldr	r4, [r3, #0]
 8001a72:	f001 f947 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8001a76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4620      	mov	r0, r4
 8001a82:	f002 f9bf 	bl	8003e04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f005 fb39 	bl	80070fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb1c 	bl	80050de <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d10a      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f005 fb16 	bl	80070e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f002 0208 	and.w	r2, r2, #8
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fb07 	bl	80050de <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ada:	d10f      	bne.n	8001afc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f005 fb78 	bl	80071dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 faec 	bl	80050de <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b10:	d10f      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f005 fb4b 	bl	80071b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fad1 	bl	80050de <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b46:	d10a      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 fb59 	bl	8007200 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fabb 	bl	80050de <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d115      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f005 fb49 	bl	800721c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	e000      	b.n	8001b9e <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b9c:	bf00      	nop
    }
  }
}
 8001b9e:	3734      	adds	r7, #52	; 0x34
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}

08001ba4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_PCD_SetAddress+0x1a>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e013      	b.n	8001be6 <HAL_PCD_SetAddress+0x42>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fa19 	bl	800500e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	460b      	mov	r3, r1
 8001c02:	803b      	strh	r3, [r7, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da0f      	bge.n	8001c34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
 8001c32:	e00f      	b.n	8001c54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c60:	883a      	ldrh	r2, [r7, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	78ba      	ldrb	r2, [r7, #2]
 8001c6a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c7e:	78bb      	ldrb	r3, [r7, #2]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d102      	bne.n	8001c8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_EP_Open+0xaa>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e00e      	b.n	8001cb6 <HAL_PCD_EP_Open+0xc8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fb84 	bl	80043b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0f      	bge.n	8001cf2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3338      	adds	r3, #56	; 0x38
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	705a      	strb	r2, [r3, #1]
 8001cf0:	e00f      	b.n	8001d12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_Close+0x6e>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e00e      	b.n	8001d4a <HAL_PCD_EP_Close+0x8c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fbc2 	bl	80044c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d102      	bne.n	8001dae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	f002 fe9d 	bl	8004b04 <USB_EP0StartXfer>
 8001dca:	e008      	b.n	8001dde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	f002 fc4f 	bl	800467c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3338      	adds	r3, #56	; 0x38
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2201      	movs	r2, #1
 8001e56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	f002 fe3b 	bl	8004b04 <USB_EP0StartXfer>
 8001e8e:	e008      	b.n	8001ea2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	f002 fbed 	bl	800467c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	f003 020f 	and.w	r2, r3, #15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d901      	bls.n	8001eca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e050      	b.n	8001f6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da0f      	bge.n	8001ef2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 020f 	and.w	r2, r3, #15
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3338      	adds	r3, #56	; 0x38
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	705a      	strb	r2, [r3, #1]
 8001ef0:	e00d      	b.n	8001f0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_PCD_EP_SetStall+0x82>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e01e      	b.n	8001f6c <HAL_PCD_EP_SetStall+0xc0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 ff92 	bl	8004e66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10a      	bne.n	8001f62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	b2d9      	uxtb	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f003 f983 	bl	8005268 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 020f 	and.w	r2, r3, #15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d901      	bls.n	8001f92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e042      	b.n	8002018 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0f      	bge.n	8001fba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	3338      	adds	r3, #56	; 0x38
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	3304      	adds	r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	705a      	strb	r2, [r3, #1]
 8001fb8:	e00f      	b.n	8001fda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_EP_ClrStall+0x86>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00e      	b.n	8002018 <HAL_PCD_EP_ClrStall+0xa4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 ff9a 	bl	8004f42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3338      	adds	r3, #56	; 0x38
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	d901      	bls.n	8002058 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e06c      	b.n	8002132 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3303      	adds	r3, #3
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207c:	e02b      	b.n	80020d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	d902      	bls.n	800209a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3303      	adds	r3, #3
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68d9      	ldr	r1, [r3, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f002 fe76 	bl	8004daa <USB_WritePacket>

    ep->xfer_buff  += len;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	441a      	add	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d809      	bhi.n	8002100 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d203      	bcs.n	8002100 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1be      	bne.n	800207e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	429a      	cmp	r2, r3
 800210a:	d811      	bhi.n	8002130 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	43db      	mvns	r3, r3
 8002126:	6939      	ldr	r1, [r7, #16]
 8002128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800212c:	4013      	ands	r3, r2
 800212e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	333c      	adds	r3, #60	; 0x3c
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	f040 80a0 	bne.w	80022b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a72      	ldr	r2, [pc, #456]	; (800234c <PCD_EP_OutXfrComplete_int+0x210>)
 8002182:	4293      	cmp	r3, r2
 8002184:	f240 80dd 	bls.w	8002342 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80d7 	beq.w	8002342 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e0cb      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	461a      	mov	r2, r3
 80021c2:	2320      	movs	r3, #32
 80021c4:	6093      	str	r3, [r2, #8]
 80021c6:	e0bc      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80b7 	bne.w	8002342 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a5d      	ldr	r2, [pc, #372]	; (800234c <PCD_EP_OutXfrComplete_int+0x210>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d90f      	bls.n	80021fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f2:	461a      	mov	r2, r3
 80021f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f8:	6093      	str	r3, [r2, #8]
 80021fa:	e0a2      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800220e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	0159      	lsls	r1, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	440b      	add	r3, r1
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002222:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4403      	add	r3, r0
 8002232:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002236:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4403      	add	r3, r0
 800225a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4419      	add	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4403      	add	r3, r0
 8002270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002274:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d114      	bne.n	80022a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800229e:	461a      	mov	r2, r3
 80022a0:	2101      	movs	r1, #1
 80022a2:	f002 ffe1 	bl	8005268 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f004 fee3 	bl	8007078 <HAL_PCD_DataOutStageCallback>
 80022b2:	e046      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <PCD_EP_OutXfrComplete_int+0x214>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d124      	bne.n	8002306 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d8:	6093      	str	r3, [r2, #8]
 80022da:	e032      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f2:	461a      	mov	r2, r3
 80022f4:	2320      	movs	r3, #32
 80022f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f004 feba 	bl	8007078 <HAL_PCD_DataOutStageCallback>
 8002304:	e01d      	b.n	8002342 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d114      	bne.n	8002336 <PCD_EP_OutXfrComplete_int+0x1fa>
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d108      	bne.n	8002336 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800232e:	461a      	mov	r2, r3
 8002330:	2100      	movs	r1, #0
 8002332:	f002 ff99 	bl	8005268 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f004 fe9b 	bl	8007078 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	; 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 fe53 	bl	8007054 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f002 ff4c 	bl	8005268 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	; 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e25b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	4ba3      	ldr	r3, [pc, #652]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4ba0      	ldr	r3, [pc, #640]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b9d      	ldr	r3, [pc, #628]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b99      	ldr	r3, [pc, #612]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e236      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b91      	ldr	r3, [pc, #580]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a90      	ldr	r2, [pc, #576]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a8a      	ldr	r2, [pc, #552]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a87      	ldr	r2, [pc, #540]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a83      	ldr	r2, [pc, #524]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a80      	ldr	r2, [pc, #512]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fb2c 	bl	8000bbc <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fb28 	bl	8000bbc <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1fb      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fb18 	bl	8000bbc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fb14 	bl	8000bbc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1e7      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1bb      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4952      	ldr	r1, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe facd 	bl	8000bbc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe fac9 	bl	8000bbc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e19c      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4940      	ldr	r1, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe faac 	bl	8000bbc <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe faa8 	bl	8000bbc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e17b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d030      	beq.n	80026f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fa8c 	bl	8000bbc <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe fa88 	bl	8000bbc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e15b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e015      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fa75 	bl	8000bbc <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe fa71 	bl	8000bbc <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e144      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a0 	beq.w	8002842 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe fa37 	bl	8000bbc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e011      	b.n	8002776 <HAL_RCC_OscConfig+0x2ce>
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	42470000 	.word	0x42470000
 800275c:	42470e80 	.word	0x42470e80
 8002760:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fa2a 	bl	8000bbc <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0fd      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x2f0>
 800278a:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a7c      	ldr	r2, [pc, #496]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027a0:	4b77      	ldr	r3, [pc, #476]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a76      	ldr	r2, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b74      	ldr	r3, [pc, #464]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a73      	ldr	r2, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 80027ba:	4b71      	ldr	r3, [pc, #452]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a70      	ldr	r2, [pc, #448]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe f9ef 	bl	8000bbc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe f9eb 	bl	8000bbc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0bc      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x33a>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe f9d9 	bl	8000bbc <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe f9d5 	bl	8000bbc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0a6      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8092 	beq.w	8002970 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d05c      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d141      	bne.n	80028e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe f9a9 	bl	8000bbc <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe f9a5 	bl	8000bbc <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e078      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	019b      	lsls	r3, r3, #6
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	4933      	ldr	r1, [pc, #204]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f97e 	bl	8000bbc <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f97a 	bl	8000bbc <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04d      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x41c>
 80028e2:	e045      	b.n	8002970 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe f967 	bl	8000bbc <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe f963 	bl	8000bbc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x44a>
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e029      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d115      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d10d      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000
 8002980:	40023800 	.word	0x40023800
 8002984:	42470060 	.word	0x42470060

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe f8a0 	bl	8000bbc <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe f89c 	bl	8000bbc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4601      	mov	r1, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	fa21 f303 	lsr.w	r3, r1, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f800 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	08007928 	.word	0x08007928
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d007      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x32>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x38>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80b4 	bne.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b82:	60bb      	str	r3, [r7, #8]
       break;
 8002b84:	e0b3      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b88:	60bb      	str	r3, [r7, #8]
      break;
 8002b8a:	e0b0      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04a      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea03 0501 	and.w	r5, r3, r1
 8002bb8:	ea04 0602 	and.w	r6, r4, r2
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	0154      	lsls	r4, r2, #5
 8002bca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bce:	014b      	lsls	r3, r1, #5
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	1b49      	subs	r1, r1, r5
 8002bd6:	eb62 0206 	sbc.w	r2, r2, r6
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f04f 0400 	mov.w	r4, #0
 8002be2:	0194      	lsls	r4, r2, #6
 8002be4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002be8:	018b      	lsls	r3, r1, #6
 8002bea:	1a5b      	subs	r3, r3, r1
 8002bec:	eb64 0402 	sbc.w	r4, r4, r2
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	00e2      	lsls	r2, r4, #3
 8002bfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	460b      	mov	r3, r1
 8002c02:	4614      	mov	r4, r2
 8002c04:	195b      	adds	r3, r3, r5
 8002c06:	eb44 0406 	adc.w	r4, r4, r6
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	0262      	lsls	r2, r4, #9
 8002c14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c18:	0259      	lsls	r1, r3, #9
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4621      	mov	r1, r4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f04f 0400 	mov.w	r4, #0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	f7fd facc 	bl	80001c8 <__aeabi_uldivmod>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e049      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	f04f 0400 	mov.w	r4, #0
 8002c42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	ea03 0501 	and.w	r5, r3, r1
 8002c4e:	ea04 0602 	and.w	r6, r4, r2
 8002c52:	4629      	mov	r1, r5
 8002c54:	4632      	mov	r2, r6
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	0154      	lsls	r4, r2, #5
 8002c60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c64:	014b      	lsls	r3, r1, #5
 8002c66:	4619      	mov	r1, r3
 8002c68:	4622      	mov	r2, r4
 8002c6a:	1b49      	subs	r1, r1, r5
 8002c6c:	eb62 0206 	sbc.w	r2, r2, r6
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	0194      	lsls	r4, r2, #6
 8002c7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	1a5b      	subs	r3, r3, r1
 8002c82:	eb64 0402 	sbc.w	r4, r4, r2
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c94:	00d9      	lsls	r1, r3, #3
 8002c96:	460b      	mov	r3, r1
 8002c98:	4614      	mov	r4, r2
 8002c9a:	195b      	adds	r3, r3, r5
 8002c9c:	eb44 0406 	adc.w	r4, r4, r6
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	02a2      	lsls	r2, r4, #10
 8002caa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cae:	0299      	lsls	r1, r3, #10
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	f7fd fa81 	bl	80001c8 <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cea:	60bb      	str	r3, [r7, #8]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	68bb      	ldr	r3, [r7, #8]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4601      	mov	r1, r0
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	08007938 	.word	0x08007938

08002d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d48:	f7ff ffdc 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d4c:	4601      	mov	r1, r0
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	0b5b      	lsrs	r3, r3, #13
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08007938 	.word	0x08007938

08002d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e01d      	b.n	8002dba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fd9a 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f000 f8c0 	bl	8002f30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_ConfigClockSource+0x18>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e0a6      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x166>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002df8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e00:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b40      	cmp	r3, #64	; 0x40
 8002e10:	d067      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x120>
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d80b      	bhi.n	8002e2e <HAL_TIM_ConfigClockSource+0x6c>
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d073      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x140>
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d802      	bhi.n	8002e24 <HAL_TIM_ConfigClockSource+0x62>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06f      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002e22:	e078      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d06c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x140>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d06a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002e2c:	e073      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e2e:	2b70      	cmp	r3, #112	; 0x70
 8002e30:	d00d      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0x8c>
 8002e32:	2b70      	cmp	r3, #112	; 0x70
 8002e34:	d804      	bhi.n	8002e40 <HAL_TIM_ConfigClockSource+0x7e>
 8002e36:	2b50      	cmp	r3, #80	; 0x50
 8002e38:	d033      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xe0>
 8002e3a:	2b60      	cmp	r3, #96	; 0x60
 8002e3c:	d041      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002e3e:	e06a      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d066      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0x152>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4a:	d017      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e4c:	e063      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 f981 	bl	8003164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	609a      	str	r2, [r3, #8]
      break;
 8002e7a:	e04c      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f000 f96a 	bl	8003164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e039      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 f8de 	bl	8003070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f937 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e029      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 f8fd 	bl	80030ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	; 0x60
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f927 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e019      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 f8be 	bl	8003070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	; 0x40
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f917 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002f00:	e009      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f000 f90e 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002f12:	e000      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002f14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a40      	ldr	r2, [pc, #256]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d013      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d00f      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a3d      	ldr	r2, [pc, #244]	; (8003048 <TIM_Base_SetConfig+0x118>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00b      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <TIM_Base_SetConfig+0x11c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d007      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <TIM_Base_SetConfig+0x120>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3a      	ldr	r2, [pc, #232]	; (8003054 <TIM_Base_SetConfig+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <TIM_Base_SetConfig+0x114>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d02b      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f90:	d027      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <TIM_Base_SetConfig+0x118>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d023      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <TIM_Base_SetConfig+0x11c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01f      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <TIM_Base_SetConfig+0x120>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01b      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a29      	ldr	r2, [pc, #164]	; (8003054 <TIM_Base_SetConfig+0x124>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d017      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <TIM_Base_SetConfig+0x128>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <TIM_Base_SetConfig+0x12c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00f      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a26      	ldr	r2, [pc, #152]	; (8003060 <TIM_Base_SetConfig+0x130>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <TIM_Base_SetConfig+0x134>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a24      	ldr	r2, [pc, #144]	; (8003068 <TIM_Base_SetConfig+0x138>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a23      	ldr	r2, [pc, #140]	; (800306c <TIM_Base_SetConfig+0x13c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d108      	bne.n	8002ff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <TIM_Base_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0xf8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <TIM_Base_SetConfig+0x124>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40010000 	.word	0x40010000
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40010400 	.word	0x40010400
 8003058:	40014000 	.word	0x40014000
 800305c:	40014400 	.word	0x40014400
 8003060:	40014800 	.word	0x40014800
 8003064:	40001800 	.word	0x40001800
 8003068:	40001c00 	.word	0x40001c00
 800306c:	40002000 	.word	0x40002000

08003070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 030a 	bic.w	r3, r3, #10
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b087      	sub	sp, #28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0210 	bic.w	r2, r3, #16
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	031b      	lsls	r3, r3, #12
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800310a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	f043 0307 	orr.w	r3, r3, #7
 8003150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	021a      	lsls	r2, r3, #8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	431a      	orrs	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e05a      	b.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d022      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003208:	d01d      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1b      	ldr	r2, [pc, #108]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a18      	ldr	r2, [pc, #96]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a15      	ldr	r2, [pc, #84]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10c      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40010400 	.word	0x40010400
 8003294:	40014000 	.word	0x40014000
 8003298:	40001800 	.word	0x40001800

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e03f      	b.n	800332e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fb22 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f9b1 	bl	8003648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b088      	sub	sp, #32
 800333a:	af02      	add	r7, sp, #8
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	f040 8083 	bne.w	800345e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_UART_Transmit+0x2e>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e07b      	b.n	8003460 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_UART_Transmit+0x40>
 8003372:	2302      	movs	r3, #2
 8003374:	e074      	b.n	8003460 <HAL_UART_Transmit+0x12a>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2221      	movs	r2, #33	; 0x21
 8003388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800338c:	f7fd fc16 	bl	8000bbc <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80033a6:	e042      	b.n	800342e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d122      	bne.n	8003406 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2200      	movs	r2, #0
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8f2 	bl	80035b4 <UART_WaitOnFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e042      	b.n	8003460 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3302      	adds	r3, #2
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	e017      	b.n	800342e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	e013      	b.n	800342e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f8cf 	bl	80035b4 <UART_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e01f      	b.n	8003460 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	781a      	ldrb	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1b7      	bne.n	80033a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f8b6 	bl	80035b4 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e006      	b.n	8003460 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b20      	cmp	r3, #32
 8003486:	f040 8090 	bne.w	80035aa <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_Receive+0x2e>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e088      	b.n	80035ac <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Receive+0x40>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e081      	b.n	80035ac <HAL_UART_Receive+0x144>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2222      	movs	r2, #34	; 0x22
 80034ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034be:	f7fd fb7d 	bl	8000bbc <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80034d8:	e05c      	b.n	8003594 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d12b      	bne.n	800354a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2120      	movs	r1, #32
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f859 	bl	80035b4 <UART_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e04f      	b.n	80035ac <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	b29a      	uxth	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3302      	adds	r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e030      	b.n	8003594 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	b29b      	uxth	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	b29a      	uxth	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	3301      	adds	r3, #1
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	e024      	b.n	8003594 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2120      	movs	r1, #32
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f82d 	bl	80035b4 <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e023      	b.n	80035ac <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d108      	bne.n	800357e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	60ba      	str	r2, [r7, #8]
 8003578:	b2ca      	uxtb	r2, r1
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e00a      	b.n	8003594 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1c59      	adds	r1, r3, #1
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19d      	bne.n	80034da <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c4:	e02c      	b.n	8003620 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d028      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d4:	f7fd faf2 	bl	8000bbc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d21d      	bcs.n	8003620 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e00f      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d0c3      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800368a:	f023 030c 	bic.w	r3, r3, #12
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	430b      	orrs	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	f040 818b 	bne.w	80039d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4ac1      	ldr	r2, [pc, #772]	; (80039c4 <UART_SetConfig+0x37c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d005      	beq.n	80036d0 <UART_SetConfig+0x88>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4abf      	ldr	r2, [pc, #764]	; (80039c8 <UART_SetConfig+0x380>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f040 80bd 	bne.w	800384a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7ff fb38 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80036d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	461d      	mov	r5, r3
 80036da:	f04f 0600 	mov.w	r6, #0
 80036de:	46a8      	mov	r8, r5
 80036e0:	46b1      	mov	r9, r6
 80036e2:	eb18 0308 	adds.w	r3, r8, r8
 80036e6:	eb49 0409 	adc.w	r4, r9, r9
 80036ea:	4698      	mov	r8, r3
 80036ec:	46a1      	mov	r9, r4
 80036ee:	eb18 0805 	adds.w	r8, r8, r5
 80036f2:	eb49 0906 	adc.w	r9, r9, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800370a:	4688      	mov	r8, r1
 800370c:	4691      	mov	r9, r2
 800370e:	eb18 0005 	adds.w	r0, r8, r5
 8003712:	eb49 0106 	adc.w	r1, r9, r6
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	461d      	mov	r5, r3
 800371c:	f04f 0600 	mov.w	r6, #0
 8003720:	196b      	adds	r3, r5, r5
 8003722:	eb46 0406 	adc.w	r4, r6, r6
 8003726:	461a      	mov	r2, r3
 8003728:	4623      	mov	r3, r4
 800372a:	f7fc fd4d 	bl	80001c8 <__aeabi_uldivmod>
 800372e:	4603      	mov	r3, r0
 8003730:	460c      	mov	r4, r1
 8003732:	461a      	mov	r2, r3
 8003734:	4ba5      	ldr	r3, [pc, #660]	; (80039cc <UART_SetConfig+0x384>)
 8003736:	fba3 2302 	umull	r2, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	461d      	mov	r5, r3
 8003744:	f04f 0600 	mov.w	r6, #0
 8003748:	46a9      	mov	r9, r5
 800374a:	46b2      	mov	sl, r6
 800374c:	eb19 0309 	adds.w	r3, r9, r9
 8003750:	eb4a 040a 	adc.w	r4, sl, sl
 8003754:	4699      	mov	r9, r3
 8003756:	46a2      	mov	sl, r4
 8003758:	eb19 0905 	adds.w	r9, r9, r5
 800375c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800376c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003774:	4689      	mov	r9, r1
 8003776:	4692      	mov	sl, r2
 8003778:	eb19 0005 	adds.w	r0, r9, r5
 800377c:	eb4a 0106 	adc.w	r1, sl, r6
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	461d      	mov	r5, r3
 8003786:	f04f 0600 	mov.w	r6, #0
 800378a:	196b      	adds	r3, r5, r5
 800378c:	eb46 0406 	adc.w	r4, r6, r6
 8003790:	461a      	mov	r2, r3
 8003792:	4623      	mov	r3, r4
 8003794:	f7fc fd18 	bl	80001c8 <__aeabi_uldivmod>
 8003798:	4603      	mov	r3, r0
 800379a:	460c      	mov	r4, r1
 800379c:	461a      	mov	r2, r3
 800379e:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <UART_SetConfig+0x384>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a86      	ldr	r2, [pc, #536]	; (80039cc <UART_SetConfig+0x384>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c0:	4498      	add	r8, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	461d      	mov	r5, r3
 80037c6:	f04f 0600 	mov.w	r6, #0
 80037ca:	46a9      	mov	r9, r5
 80037cc:	46b2      	mov	sl, r6
 80037ce:	eb19 0309 	adds.w	r3, r9, r9
 80037d2:	eb4a 040a 	adc.w	r4, sl, sl
 80037d6:	4699      	mov	r9, r3
 80037d8:	46a2      	mov	sl, r4
 80037da:	eb19 0905 	adds.w	r9, r9, r5
 80037de:	eb4a 0a06 	adc.w	sl, sl, r6
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037f6:	4689      	mov	r9, r1
 80037f8:	4692      	mov	sl, r2
 80037fa:	eb19 0005 	adds.w	r0, r9, r5
 80037fe:	eb4a 0106 	adc.w	r1, sl, r6
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	461d      	mov	r5, r3
 8003808:	f04f 0600 	mov.w	r6, #0
 800380c:	196b      	adds	r3, r5, r5
 800380e:	eb46 0406 	adc.w	r4, r6, r6
 8003812:	461a      	mov	r2, r3
 8003814:	4623      	mov	r3, r4
 8003816:	f7fc fcd7 	bl	80001c8 <__aeabi_uldivmod>
 800381a:	4603      	mov	r3, r0
 800381c:	460c      	mov	r4, r1
 800381e:	461a      	mov	r2, r3
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <UART_SetConfig+0x384>)
 8003822:	fba3 1302 	umull	r1, r3, r3, r2
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2164      	movs	r1, #100	; 0x64
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	3332      	adds	r3, #50	; 0x32
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <UART_SetConfig+0x384>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 0207 	and.w	r2, r3, #7
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4442      	add	r2, r8
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	e26f      	b.n	8003d2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384a:	f7ff fa67 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800384e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	461d      	mov	r5, r3
 8003854:	f04f 0600 	mov.w	r6, #0
 8003858:	46a8      	mov	r8, r5
 800385a:	46b1      	mov	r9, r6
 800385c:	eb18 0308 	adds.w	r3, r8, r8
 8003860:	eb49 0409 	adc.w	r4, r9, r9
 8003864:	4698      	mov	r8, r3
 8003866:	46a1      	mov	r9, r4
 8003868:	eb18 0805 	adds.w	r8, r8, r5
 800386c:	eb49 0906 	adc.w	r9, r9, r6
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800387c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003880:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003884:	4688      	mov	r8, r1
 8003886:	4691      	mov	r9, r2
 8003888:	eb18 0005 	adds.w	r0, r8, r5
 800388c:	eb49 0106 	adc.w	r1, r9, r6
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	461d      	mov	r5, r3
 8003896:	f04f 0600 	mov.w	r6, #0
 800389a:	196b      	adds	r3, r5, r5
 800389c:	eb46 0406 	adc.w	r4, r6, r6
 80038a0:	461a      	mov	r2, r3
 80038a2:	4623      	mov	r3, r4
 80038a4:	f7fc fc90 	bl	80001c8 <__aeabi_uldivmod>
 80038a8:	4603      	mov	r3, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	461a      	mov	r2, r3
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <UART_SetConfig+0x384>)
 80038b0:	fba3 2302 	umull	r2, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	461d      	mov	r5, r3
 80038be:	f04f 0600 	mov.w	r6, #0
 80038c2:	46a9      	mov	r9, r5
 80038c4:	46b2      	mov	sl, r6
 80038c6:	eb19 0309 	adds.w	r3, r9, r9
 80038ca:	eb4a 040a 	adc.w	r4, sl, sl
 80038ce:	4699      	mov	r9, r3
 80038d0:	46a2      	mov	sl, r4
 80038d2:	eb19 0905 	adds.w	r9, r9, r5
 80038d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ee:	4689      	mov	r9, r1
 80038f0:	4692      	mov	sl, r2
 80038f2:	eb19 0005 	adds.w	r0, r9, r5
 80038f6:	eb4a 0106 	adc.w	r1, sl, r6
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	461d      	mov	r5, r3
 8003900:	f04f 0600 	mov.w	r6, #0
 8003904:	196b      	adds	r3, r5, r5
 8003906:	eb46 0406 	adc.w	r4, r6, r6
 800390a:	461a      	mov	r2, r3
 800390c:	4623      	mov	r3, r4
 800390e:	f7fc fc5b 	bl	80001c8 <__aeabi_uldivmod>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	461a      	mov	r2, r3
 8003918:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <UART_SetConfig+0x384>)
 800391a:	fba3 1302 	umull	r1, r3, r3, r2
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2164      	movs	r1, #100	; 0x64
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	3332      	adds	r3, #50	; 0x32
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <UART_SetConfig+0x384>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800393a:	4498      	add	r8, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	461d      	mov	r5, r3
 8003940:	f04f 0600 	mov.w	r6, #0
 8003944:	46a9      	mov	r9, r5
 8003946:	46b2      	mov	sl, r6
 8003948:	eb19 0309 	adds.w	r3, r9, r9
 800394c:	eb4a 040a 	adc.w	r4, sl, sl
 8003950:	4699      	mov	r9, r3
 8003952:	46a2      	mov	sl, r4
 8003954:	eb19 0905 	adds.w	r9, r9, r5
 8003958:	eb4a 0a06 	adc.w	sl, sl, r6
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800396c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003970:	4689      	mov	r9, r1
 8003972:	4692      	mov	sl, r2
 8003974:	eb19 0005 	adds.w	r0, r9, r5
 8003978:	eb4a 0106 	adc.w	r1, sl, r6
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	461d      	mov	r5, r3
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	196b      	adds	r3, r5, r5
 8003988:	eb46 0406 	adc.w	r4, r6, r6
 800398c:	461a      	mov	r2, r3
 800398e:	4623      	mov	r3, r4
 8003990:	f7fc fc1a 	bl	80001c8 <__aeabi_uldivmod>
 8003994:	4603      	mov	r3, r0
 8003996:	460c      	mov	r4, r1
 8003998:	461a      	mov	r2, r3
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <UART_SetConfig+0x384>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <UART_SetConfig+0x384>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4442      	add	r2, r8
 80039c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039c2:	e1b2      	b.n	8003d2a <UART_SetConfig+0x6e2>
 80039c4:	40011000 	.word	0x40011000
 80039c8:	40011400 	.word	0x40011400
 80039cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4ad7      	ldr	r2, [pc, #860]	; (8003d34 <UART_SetConfig+0x6ec>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d005      	beq.n	80039e6 <UART_SetConfig+0x39e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4ad6      	ldr	r2, [pc, #856]	; (8003d38 <UART_SetConfig+0x6f0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	f040 80d1 	bne.w	8003b88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e6:	f7ff f9ad 	bl	8002d44 <HAL_RCC_GetPCLK2Freq>
 80039ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	469a      	mov	sl, r3
 80039f0:	f04f 0b00 	mov.w	fp, #0
 80039f4:	46d0      	mov	r8, sl
 80039f6:	46d9      	mov	r9, fp
 80039f8:	eb18 0308 	adds.w	r3, r8, r8
 80039fc:	eb49 0409 	adc.w	r4, r9, r9
 8003a00:	4698      	mov	r8, r3
 8003a02:	46a1      	mov	r9, r4
 8003a04:	eb18 080a 	adds.w	r8, r8, sl
 8003a08:	eb49 090b 	adc.w	r9, r9, fp
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a20:	4688      	mov	r8, r1
 8003a22:	4691      	mov	r9, r2
 8003a24:	eb1a 0508 	adds.w	r5, sl, r8
 8003a28:	eb4b 0609 	adc.w	r6, fp, r9
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0094      	lsls	r4, r2, #2
 8003a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4631      	mov	r1, r6
 8003a4e:	f7fc fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8003a52:	4603      	mov	r3, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	461a      	mov	r2, r3
 8003a58:	4bb8      	ldr	r3, [pc, #736]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	469b      	mov	fp, r3
 8003a68:	f04f 0c00 	mov.w	ip, #0
 8003a6c:	46d9      	mov	r9, fp
 8003a6e:	46e2      	mov	sl, ip
 8003a70:	eb19 0309 	adds.w	r3, r9, r9
 8003a74:	eb4a 040a 	adc.w	r4, sl, sl
 8003a78:	4699      	mov	r9, r3
 8003a7a:	46a2      	mov	sl, r4
 8003a7c:	eb19 090b 	adds.w	r9, r9, fp
 8003a80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a84:	f04f 0100 	mov.w	r1, #0
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a98:	4689      	mov	r9, r1
 8003a9a:	4692      	mov	sl, r2
 8003a9c:	eb1b 0509 	adds.w	r5, fp, r9
 8003aa0:	eb4c 060a 	adc.w	r6, ip, sl
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	f04f 0400 	mov.w	r4, #0
 8003ab6:	0094      	lsls	r4, r2, #2
 8003ab8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003abc:	008b      	lsls	r3, r1, #2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	f7fc fb7f 	bl	80001c8 <__aeabi_uldivmod>
 8003aca:	4603      	mov	r3, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b9a      	ldr	r3, [pc, #616]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2164      	movs	r1, #100	; 0x64
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	3332      	adds	r3, #50	; 0x32
 8003ae4:	4a95      	ldr	r2, [pc, #596]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	4498      	add	r8, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	469b      	mov	fp, r3
 8003af6:	f04f 0c00 	mov.w	ip, #0
 8003afa:	46d9      	mov	r9, fp
 8003afc:	46e2      	mov	sl, ip
 8003afe:	eb19 0309 	adds.w	r3, r9, r9
 8003b02:	eb4a 040a 	adc.w	r4, sl, sl
 8003b06:	4699      	mov	r9, r3
 8003b08:	46a2      	mov	sl, r4
 8003b0a:	eb19 090b 	adds.w	r9, r9, fp
 8003b0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b26:	4689      	mov	r9, r1
 8003b28:	4692      	mov	sl, r2
 8003b2a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b2e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4619      	mov	r1, r3
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	0094      	lsls	r4, r2, #2
 8003b46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b4a:	008b      	lsls	r3, r1, #2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4623      	mov	r3, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	4631      	mov	r1, r6
 8003b54:	f7fc fb38 	bl	80001c8 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	; 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	3332      	adds	r3, #50	; 0x32
 8003b72:	4a72      	ldr	r2, [pc, #456]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4442      	add	r2, r8
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	e0d0      	b.n	8003d2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b88:	f7ff f8c8 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 8003b8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	469a      	mov	sl, r3
 8003b92:	f04f 0b00 	mov.w	fp, #0
 8003b96:	46d0      	mov	r8, sl
 8003b98:	46d9      	mov	r9, fp
 8003b9a:	eb18 0308 	adds.w	r3, r8, r8
 8003b9e:	eb49 0409 	adc.w	r4, r9, r9
 8003ba2:	4698      	mov	r8, r3
 8003ba4:	46a1      	mov	r9, r4
 8003ba6:	eb18 080a 	adds.w	r8, r8, sl
 8003baa:	eb49 090b 	adc.w	r9, r9, fp
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bc2:	4688      	mov	r8, r1
 8003bc4:	4691      	mov	r9, r2
 8003bc6:	eb1a 0508 	adds.w	r5, sl, r8
 8003bca:	eb4b 0609 	adc.w	r6, fp, r9
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	0094      	lsls	r4, r2, #2
 8003be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be6:	008b      	lsls	r3, r1, #2
 8003be8:	461a      	mov	r2, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	4631      	mov	r1, r6
 8003bf0:	f7fc faea 	bl	80001c8 <__aeabi_uldivmod>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	469b      	mov	fp, r3
 8003c0a:	f04f 0c00 	mov.w	ip, #0
 8003c0e:	46d9      	mov	r9, fp
 8003c10:	46e2      	mov	sl, ip
 8003c12:	eb19 0309 	adds.w	r3, r9, r9
 8003c16:	eb4a 040a 	adc.w	r4, sl, sl
 8003c1a:	4699      	mov	r9, r3
 8003c1c:	46a2      	mov	sl, r4
 8003c1e:	eb19 090b 	adds.w	r9, r9, fp
 8003c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c3a:	4689      	mov	r9, r1
 8003c3c:	4692      	mov	sl, r2
 8003c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c42:	eb4c 060a 	adc.w	r6, ip, sl
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	0094      	lsls	r4, r2, #2
 8003c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c5e:	008b      	lsls	r3, r1, #2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	4631      	mov	r1, r6
 8003c68:	f7fc faae 	bl	80001c8 <__aeabi_uldivmod>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c92:	4498      	add	r8, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	469b      	mov	fp, r3
 8003c98:	f04f 0c00 	mov.w	ip, #0
 8003c9c:	46d9      	mov	r9, fp
 8003c9e:	46e2      	mov	sl, ip
 8003ca0:	eb19 0309 	adds.w	r3, r9, r9
 8003ca4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca8:	4699      	mov	r9, r3
 8003caa:	46a2      	mov	sl, r4
 8003cac:	eb19 090b 	adds.w	r9, r9, fp
 8003cb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc8:	4689      	mov	r9, r1
 8003cca:	4692      	mov	sl, r2
 8003ccc:	eb1b 0509 	adds.w	r5, fp, r9
 8003cd0:	eb4c 060a 	adc.w	r6, ip, sl
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f04f 0400 	mov.w	r4, #0
 8003ce6:	0094      	lsls	r4, r2, #2
 8003ce8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cec:	008b      	lsls	r3, r1, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	f7fc fa67 	bl	80001c8 <__aeabi_uldivmod>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003d02:	fba3 1302 	umull	r1, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2164      	movs	r1, #100	; 0x64
 8003d0a:	fb01 f303 	mul.w	r3, r1, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	3332      	adds	r3, #50	; 0x32
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <UART_SetConfig+0x6f4>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4442      	add	r2, r8
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	e7ff      	b.n	8003d2a <UART_SetConfig+0x6e2>
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	51eb851f 	.word	0x51eb851f

08003d40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d40:	b084      	sub	sp, #16
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	f107 001c 	add.w	r0, r7, #28
 8003d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d122      	bne.n	8003d9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 fac6 	bl	8005324 <USB_CoreReset>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e01a      	b.n	8003dd4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f001 faba 	bl	8005324 <USB_CoreReset>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc6:	e005      	b.n	8003dd4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10b      	bne.n	8003df2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f043 0206 	orr.w	r2, r3, #6
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dfe:	b004      	add	sp, #16
 8003e00:	4770      	bx	lr
	...

08003e04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d165      	bne.n	8003ee4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a41      	ldr	r2, [pc, #260]	; (8003f20 <USB_SetTurnaroundTime+0x11c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d906      	bls.n	8003e2e <USB_SetTurnaroundTime+0x2a>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <USB_SetTurnaroundTime+0x120>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d802      	bhi.n	8003e2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e062      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <USB_SetTurnaroundTime+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d906      	bls.n	8003e44 <USB_SetTurnaroundTime+0x40>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a3b      	ldr	r2, [pc, #236]	; (8003f28 <USB_SetTurnaroundTime+0x124>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d802      	bhi.n	8003e44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e3e:	230e      	movs	r3, #14
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	e057      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4a38      	ldr	r2, [pc, #224]	; (8003f28 <USB_SetTurnaroundTime+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d906      	bls.n	8003e5a <USB_SetTurnaroundTime+0x56>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <USB_SetTurnaroundTime+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d802      	bhi.n	8003e5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e54:	230d      	movs	r3, #13
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	e04c      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4a33      	ldr	r2, [pc, #204]	; (8003f2c <USB_SetTurnaroundTime+0x128>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d906      	bls.n	8003e70 <USB_SetTurnaroundTime+0x6c>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4a32      	ldr	r2, [pc, #200]	; (8003f30 <USB_SetTurnaroundTime+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d802      	bhi.n	8003e70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e041      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <USB_SetTurnaroundTime+0x12c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d906      	bls.n	8003e86 <USB_SetTurnaroundTime+0x82>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <USB_SetTurnaroundTime+0x130>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d802      	bhi.n	8003e86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e80:	230b      	movs	r3, #11
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e036      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <USB_SetTurnaroundTime+0x130>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d906      	bls.n	8003e9c <USB_SetTurnaroundTime+0x98>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <USB_SetTurnaroundTime+0x134>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d802      	bhi.n	8003e9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e96:	230a      	movs	r3, #10
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e02b      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <USB_SetTurnaroundTime+0x134>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d906      	bls.n	8003eb2 <USB_SetTurnaroundTime+0xae>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <USB_SetTurnaroundTime+0x138>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d802      	bhi.n	8003eb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003eac:	2309      	movs	r3, #9
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e020      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <USB_SetTurnaroundTime+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d906      	bls.n	8003ec8 <USB_SetTurnaroundTime+0xc4>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <USB_SetTurnaroundTime+0x13c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d802      	bhi.n	8003ec8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e015      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <USB_SetTurnaroundTime+0x13c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d906      	bls.n	8003ede <USB_SetTurnaroundTime+0xda>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <USB_SetTurnaroundTime+0x140>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d802      	bhi.n	8003ede <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ed8:	2307      	movs	r3, #7
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e00a      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ede:	2306      	movs	r3, #6
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e007      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003eea:	2309      	movs	r3, #9
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e001      	b.n	8003ef4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ef0:	2309      	movs	r3, #9
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	00d8acbf 	.word	0x00d8acbf
 8003f24:	00e4e1bf 	.word	0x00e4e1bf
 8003f28:	00f423ff 	.word	0x00f423ff
 8003f2c:	0106737f 	.word	0x0106737f
 8003f30:	011a499f 	.word	0x011a499f
 8003f34:	01312cff 	.word	0x01312cff
 8003f38:	014ca43f 	.word	0x014ca43f
 8003f3c:	016e35ff 	.word	0x016e35ff
 8003f40:	01a6ab1f 	.word	0x01a6ab1f
 8003f44:	01e847ff 	.word	0x01e847ff

08003f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d106      	bne.n	8003fb8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	e00b      	b.n	8003fd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e001      	b.n	8003fd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e003      	b.n	8003fd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003fd0:	2032      	movs	r0, #50	; 0x32
 8003fd2:	f7fc fdff 	bl	8000bd4 <HAL_Delay>

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e009      	b.n	8004014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3340      	adds	r3, #64	; 0x40
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	3301      	adds	r3, #1
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b0e      	cmp	r3, #14
 8004018:	d9f2      	bls.n	8004000 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800401a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d11c      	bne.n	800405a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402e:	f043 0302 	orr.w	r3, r3, #2
 8004032:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
 8004058:	e00b      	b.n	8004072 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004084:	4619      	mov	r1, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408c:	461a      	mov	r2, r3
 800408e:	680b      	ldr	r3, [r1, #0]
 8004090:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b01      	cmp	r3, #1
 8004096:	d10c      	bne.n	80040b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800409e:	2100      	movs	r1, #0
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f949 	bl	8004338 <USB_SetDevSpeed>
 80040a6:	e008      	b.n	80040ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040a8:	2101      	movs	r1, #1
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f944 	bl	8004338 <USB_SetDevSpeed>
 80040b0:	e003      	b.n	80040ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040b2:	2103      	movs	r1, #3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f93f 	bl	8004338 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040ba:	2110      	movs	r1, #16
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8f3 	bl	80042a8 <USB_FlushTxFifo>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f911 	bl	80042f4 <USB_FlushRxFifo>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e043      	b.n	800418e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411c:	d118      	bne.n	8004150 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	461a      	mov	r2, r3
 8004132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e013      	b.n	8004162 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004146:	461a      	mov	r2, r3
 8004148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e008      	b.n	8004162 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	461a      	mov	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3301      	adds	r3, #1
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3b7      	bcc.n	8004106 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e043      	b.n	8004224 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b2:	d118      	bne.n	80041e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e013      	b.n	80041f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e008      	b.n	80041f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800421c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d3b7      	bcc.n	800419c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800424c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f043 0210 	orr.w	r2, r3, #16
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <USB_DevInit+0x2c4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800426c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f043 0208 	orr.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr
 80042a4:	803c3800 	.word	0x803c3800

080042a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	019b      	lsls	r3, r3, #6
 80042ba:	f043 0220 	orr.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <USB_FlushTxFifo+0x48>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e006      	b.n	80042e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d0f0      	beq.n	80042c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	00030d40 	.word	0x00030d40

080042f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2210      	movs	r2, #16
 8004304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3301      	adds	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <USB_FlushRxFifo+0x40>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e006      	b.n	8004326 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d0f0      	beq.n	8004306 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	00030d40 	.word	0x00030d40

08004338 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0306 	and.w	r3, r3, #6
 8004382:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800438a:	2300      	movs	r3, #0
 800438c:	75fb      	strb	r3, [r7, #23]
 800438e:	e00a      	b.n	80043a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d002      	beq.n	800439c <USB_GetDevSpeed+0x32>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d102      	bne.n	80043a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800439c:	2302      	movs	r3, #2
 800439e:	75fb      	strb	r3, [r7, #23]
 80043a0:	e001      	b.n	80043a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043a2:	230f      	movs	r3, #15
 80043a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d13a      	bne.n	8004446 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d155      	bne.n	80044b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	78db      	ldrb	r3, [r3, #3]
 8004422:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004424:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	059b      	lsls	r3, r3, #22
 800442a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800442c:	4313      	orrs	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e036      	b.n	80044b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004464:	4313      	orrs	r3, r2
 8004466:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11a      	bne.n	80044b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800449a:	430b      	orrs	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d161      	bne.n	80045a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f6:	d11f      	bne.n	8004538 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004516:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	2101      	movs	r1, #1
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	b29b      	uxth	r3, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004558:	4013      	ands	r3, r2
 800455a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457c:	4013      	ands	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	0159      	lsls	r1, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	440b      	add	r3, r1
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	4619      	mov	r1, r3
 800459c:	4b35      	ldr	r3, [pc, #212]	; (8004674 <USB_DeactivateEndpoint+0x1b0>)
 800459e:	4013      	ands	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
 80045a2:	e060      	b.n	8004666 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ba:	d11f      	bne.n	80045fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	43db      	mvns	r3, r3
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800461c:	4013      	ands	r3, r2
 800461e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	43db      	mvns	r3, r3
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004640:	4013      	ands	r3, r2
 8004642:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	0159      	lsls	r1, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	440b      	add	r3, r1
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	4619      	mov	r1, r3
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <USB_DeactivateEndpoint+0x1b4>)
 8004662:	4013      	ands	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	ec337800 	.word	0xec337800
 8004678:	eff37800 	.word	0xeff37800

0800467c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	785b      	ldrb	r3, [r3, #1]
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 815c 	bne.w	8004956 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d132      	bne.n	800470c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	0cdb      	lsrs	r3, r3, #19
 8004706:	04db      	lsls	r3, r3, #19
 8004708:	6113      	str	r3, [r2, #16]
 800470a:	e074      	b.n	80047f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004726:	0cdb      	lsrs	r3, r3, #19
 8004728:	04db      	lsls	r3, r3, #19
 800472a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800474a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6959      	ldr	r1, [r3, #20]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	440b      	add	r3, r1
 8004768:	1e59      	subs	r1, r3, #1
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004772:	04d9      	lsls	r1, r3, #19
 8004774:	4b9d      	ldr	r3, [pc, #628]	; (80049ec <USB_EPStartXfer+0x370>)
 8004776:	400b      	ands	r3, r1
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	0148      	lsls	r0, r1, #5
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	4401      	add	r1, r0
 8004780:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004784:	4313      	orrs	r3, r2
 8004786:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	0148      	lsls	r0, r1, #5
 80047a2:	69f9      	ldr	r1, [r7, #28]
 80047a4:	4401      	add	r1, r0
 80047a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047aa:	4313      	orrs	r3, r2
 80047ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	78db      	ldrb	r3, [r3, #3]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d11f      	bne.n	80047f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d14b      	bne.n	8004894 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	461a      	mov	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	78db      	ldrb	r3, [r3, #3]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d128      	bne.n	8004872 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d110      	bne.n	8004852 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e00f      	b.n	8004872 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e12f      	b.n	8004af4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	78db      	ldrb	r3, [r3, #3]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d015      	beq.n	80048e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8117 	beq.w	8004af4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	2101      	movs	r1, #1
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e2:	4313      	orrs	r3, r2
 80048e4:	634b      	str	r3, [r1, #52]	; 0x34
 80048e6:	e105      	b.n	8004af4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d110      	bne.n	800491a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	e00f      	b.n	800493a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	b298      	uxth	r0, r3
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4603      	mov	r3, r0
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fa2b 	bl	8004daa <USB_WritePacket>
 8004954:	e0ce      	b.n	8004af4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	0cdb      	lsrs	r3, r3, #19
 8004972:	04db      	lsls	r3, r3, #19
 8004974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d126      	bne.n	80049f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	0148      	lsls	r0, r1, #5
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	4401      	add	r1, r0
 80049c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049c4:	4313      	orrs	r3, r2
 80049c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049e6:	6113      	str	r3, [r2, #16]
 80049e8:	e036      	b.n	8004a58 <USB_EPStartXfer+0x3dc>
 80049ea:	bf00      	nop
 80049ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4413      	add	r3, r2
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	8afb      	ldrh	r3, [r7, #22]
 8004a16:	04d9      	lsls	r1, r3, #19
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <USB_EPStartXfer+0x484>)
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	0148      	lsls	r0, r1, #5
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	4401      	add	r1, r0
 8004a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	8af9      	ldrh	r1, [r7, #22]
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	0148      	lsls	r0, r1, #5
 8004a4c:	69f9      	ldr	r1, [r7, #28]
 8004a4e:	4401      	add	r1, r0
 8004a50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d10d      	bne.n	8004a7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	460a      	mov	r2, r1
 8004a78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	78db      	ldrb	r3, [r3, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d128      	bne.n	8004ad4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d110      	bne.n	8004ab4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00f      	b.n	8004ad4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004af2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	1ff80000 	.word	0x1ff80000

08004b04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 80cd 	bne.w	8004cc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d132      	bne.n	8004b94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	0cdb      	lsrs	r3, r3, #19
 8004b8e:	04db      	lsls	r3, r3, #19
 8004b90:	6113      	str	r3, [r2, #16]
 8004b92:	e04e      	b.n	8004c32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	0cdb      	lsrs	r3, r3, #19
 8004bb0:	04db      	lsls	r3, r3, #19
 8004bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d903      	bls.n	8004bec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	6939      	ldr	r1, [r7, #16]
 8004c24:	0148      	lsls	r0, r1, #5
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	4401      	add	r1, r0
 8004c2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d11e      	bne.n	8004c76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e092      	b.n	8004d9c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d07e      	beq.n	8004d9c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	2101      	movs	r1, #1
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	634b      	str	r3, [r1, #52]	; 0x34
 8004cbe:	e06d      	b.n	8004d9c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cda:	0cdb      	lsrs	r3, r3, #19
 8004cdc:	04db      	lsls	r3, r3, #19
 8004cde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	0148      	lsls	r0, r1, #5
 8004d4e:	6979      	ldr	r1, [r7, #20]
 8004d50:	4401      	add	r1, r0
 8004d52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10d      	bne.n	8004d7c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	460a      	mov	r2, r1
 8004d7a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b089      	sub	sp, #36	; 0x24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	4611      	mov	r1, r2
 8004db6:	461a      	mov	r2, r3
 8004db8:	460b      	mov	r3, r1
 8004dba:	71fb      	strb	r3, [r7, #7]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004dc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11a      	bne.n	8004e06 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	3303      	adds	r3, #3
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e00f      	b.n	8004dfe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	031a      	lsls	r2, r3, #12
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dea:	461a      	mov	r2, r3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3304      	adds	r3, #4
 8004df6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3eb      	bcc.n	8004dde <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3724      	adds	r7, #36	; 0x24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e00b      	b.n	8004e50 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3304      	adds	r3, #4
 8004e48:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d3ef      	bcc.n	8004e38 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e58:	69fb      	ldr	r3, [r7, #28]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	; 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d12c      	bne.n	8004edc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db12      	blt.n	8004eba <USB_EPSetStall+0x54>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00f      	beq.n	8004eba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e02b      	b.n	8004f34 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	db12      	blt.n	8004f14 <USB_EPSetStall+0xae>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00f      	beq.n	8004f14 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f12:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d128      	bne.n	8004fb0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	78db      	ldrb	r3, [r3, #3]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d003      	beq.n	8004f8e <USB_EPClearStall+0x4c>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	78db      	ldrb	r3, [r3, #3]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d138      	bne.n	8005000 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e027      	b.n	8005000 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d003      	beq.n	8004fe0 <USB_EPClearStall+0x9e>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	78db      	ldrb	r3, [r3, #3]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d10f      	bne.n	8005000 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005030:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005088:	f023 0302 	bic.w	r3, r3, #2
 800508c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ca:	f043 0302 	orr.w	r3, r3, #2
 80050ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	0c1b      	lsrs	r3, r3, #16
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	b29b      	uxth	r3, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800519a:	68bb      	ldr	r3, [r7, #8]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	01db      	lsls	r3, r3, #7
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4013      	ands	r3, r2
 80051f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051f6:	68bb      	ldr	r3, [r7, #8]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0301 	and.w	r3, r3, #1
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	460b      	mov	r3, r1
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	333c      	adds	r3, #60	; 0x3c
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4a26      	ldr	r2, [pc, #152]	; (8005320 <USB_EP0_OutStart+0xb8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d90a      	bls.n	80052a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529c:	d101      	bne.n	80052a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e037      	b.n	8005312 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d0:	f043 0318 	orr.w	r3, r3, #24
 80052d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052ea:	7afb      	ldrb	r3, [r7, #11]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10f      	bne.n	8005310 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800530e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	4f54300a 	.word	0x4f54300a

08005324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <USB_CoreReset+0x64>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e01b      	b.n	800537a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	daf2      	bge.n	8005330 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <USB_CoreReset+0x64>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d901      	bls.n	800536c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e006      	b.n	800537a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d0f0      	beq.n	800535a <USB_CoreReset+0x36>

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	00030d40 	.word	0x00030d40

0800538c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005398:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800539c:	f002 f946 	bl	800762c <malloc>
 80053a0:	4603      	mov	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80053b2:	2302      	movs	r3, #2
 80053b4:	e066      	b.n	8005484 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1b      	ldrb	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d119      	bne.n	80053fa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ca:	2202      	movs	r2, #2
 80053cc:	2181      	movs	r1, #129	; 0x81
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 ff99 	bl	8007306 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053de:	2202      	movs	r2, #2
 80053e0:	2101      	movs	r1, #1
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 ff8f 	bl	8007306 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2210      	movs	r2, #16
 80053f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80053f8:	e016      	b.n	8005428 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	2202      	movs	r2, #2
 80053fe:	2181      	movs	r1, #129	; 0x81
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 ff80 	bl	8007306 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	2202      	movs	r2, #2
 8005410:	2101      	movs	r1, #1
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 ff77 	bl	8007306 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2210      	movs	r2, #16
 8005424:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005428:	2308      	movs	r3, #8
 800542a:	2203      	movs	r2, #3
 800542c:	2182      	movs	r1, #130	; 0x82
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 ff69 	bl	8007306 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	7c1b      	ldrb	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005468:	2101      	movs	r1, #1
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f002 f83a 	bl	80074e4 <USBD_LL_PrepareReceive>
 8005470:	e007      	b.n	8005482 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	2101      	movs	r1, #1
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f002 f831 	bl	80074e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800549c:	2181      	movs	r1, #129	; 0x81
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 ff57 	bl	8007352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054aa:	2101      	movs	r1, #1
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 ff50 	bl	8007352 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054ba:	2182      	movs	r1, #130	; 0x82
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 ff48 	bl	8007352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 f8a5 	bl	800763c <free>
    pdev->pClassData = NULL;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005514:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800552a:	2b00      	cmp	r3, #0
 800552c:	d03a      	beq.n	80055a4 <USBD_CDC_Setup+0xa0>
 800552e:	2b20      	cmp	r3, #32
 8005530:	f040 8097 	bne.w	8005662 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	88db      	ldrh	r3, [r3, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d029      	beq.n	8005590 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b25b      	sxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	da11      	bge.n	800556a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005552:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	88d2      	ldrh	r2, [r2, #6]
 8005558:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800555a:	6939      	ldr	r1, [r7, #16]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	88db      	ldrh	r3, [r3, #6]
 8005560:	461a      	mov	r2, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 fa9d 	bl	8006aa2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005568:	e082      	b.n	8005670 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	785a      	ldrb	r2, [r3, #1]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	88db      	ldrh	r3, [r3, #6]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005580:	6939      	ldr	r1, [r7, #16]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	88db      	ldrh	r3, [r3, #6]
 8005586:	461a      	mov	r2, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 fab6 	bl	8006afa <USBD_CtlPrepareRx>
    break;
 800558e:	e06f      	b.n	8005670 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	7850      	ldrb	r0, [r2, #1]
 800559c:	2200      	movs	r2, #0
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	4798      	blx	r3
    break;
 80055a2:	e065      	b.n	8005670 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b0b      	cmp	r3, #11
 80055aa:	d84f      	bhi.n	800564c <USBD_CDC_Setup+0x148>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <USBD_CDC_Setup+0xb0>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055e5 	.word	0x080055e5
 80055b8:	0800565b 	.word	0x0800565b
 80055bc:	0800564d 	.word	0x0800564d
 80055c0:	0800564d 	.word	0x0800564d
 80055c4:	0800564d 	.word	0x0800564d
 80055c8:	0800564d 	.word	0x0800564d
 80055cc:	0800564d 	.word	0x0800564d
 80055d0:	0800564d 	.word	0x0800564d
 80055d4:	0800564d 	.word	0x0800564d
 80055d8:	0800564d 	.word	0x0800564d
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	08005635 	.word	0x08005635
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d107      	bne.n	80055fe <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055ee:	f107 030c 	add.w	r3, r7, #12
 80055f2:	2202      	movs	r2, #2
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 fa53 	bl	8006aa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80055fc:	e030      	b.n	8005660 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f9dd 	bl	80069c0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005606:	2303      	movs	r3, #3
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	e029      	b.n	8005660 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005612:	2b03      	cmp	r3, #3
 8005614:	d107      	bne.n	8005626 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005616:	f107 030f 	add.w	r3, r7, #15
 800561a:	2201      	movs	r2, #1
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 fa3f 	bl	8006aa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005624:	e01c      	b.n	8005660 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f9c9 	bl	80069c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	75fb      	strb	r3, [r7, #23]
      break;
 8005632:	e015      	b.n	8005660 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563a:	2b03      	cmp	r3, #3
 800563c:	d00f      	beq.n	800565e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f9bd 	bl	80069c0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005646:	2303      	movs	r3, #3
 8005648:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800564a:	e008      	b.n	800565e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 f9b6 	bl	80069c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	75fb      	strb	r3, [r7, #23]
      break;
 8005658:	e002      	b.n	8005660 <USBD_CDC_Setup+0x15c>
      break;
 800565a:	bf00      	nop
 800565c:	e008      	b.n	8005670 <USBD_CDC_Setup+0x16c>
      break;
 800565e:	bf00      	nop
    }
    break;
 8005660:	e006      	b.n	8005670 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 f9ab 	bl	80069c0 <USBD_CtlError>
    ret = USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	75fb      	strb	r3, [r7, #23]
    break;
 800566e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop

0800567c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800568e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800569a:	2303      	movs	r3, #3
 800569c:	e049      	b.n	8005732 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	3318      	adds	r3, #24
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d029      	beq.n	8005710 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3318      	adds	r3, #24
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	78f9      	ldrb	r1, [r7, #3]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	460b      	mov	r3, r1
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a5b      	subs	r3, r3, r1
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4403      	add	r3, r0
 80056dc:	3344      	adds	r3, #68	; 0x44
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80056e4:	fb03 f301 	mul.w	r3, r3, r1
 80056e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3318      	adds	r3, #24
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005702:	78f9      	ldrb	r1, [r7, #3]
 8005704:	2300      	movs	r3, #0
 8005706:	2200      	movs	r2, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 feca 	bl	80074a2 <USBD_LL_Transmit>
 800570e:	e00f      	b.n	8005730 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2200      	movs	r2, #0
 8005714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800574c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005758:	2303      	movs	r3, #3
 800575a:	e015      	b.n	8005788 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fee0 	bl	8007526 <USBD_LL_GetRxDataSize>
 8005766:	4602      	mov	r2, r0
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005782:	4611      	mov	r1, r2
 8005784:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800579e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d015      	beq.n	80057d6 <USBD_CDC_EP0_RxReady+0x46>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057b0:	2bff      	cmp	r3, #255	; 0xff
 80057b2:	d010      	beq.n	80057d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80057c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80057ca:	b292      	uxth	r2, r2
 80057cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	22ff      	movs	r2, #255	; 0xff
 80057d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2243      	movs	r2, #67	; 0x43
 80057ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	20000094 	.word	0x20000094

08005800 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2243      	movs	r2, #67	; 0x43
 800580c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800580e:	4b03      	ldr	r3, [pc, #12]	; (800581c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000050 	.word	0x20000050

08005820 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2243      	movs	r2, #67	; 0x43
 800582c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800582e:	4b03      	ldr	r3, [pc, #12]	; (800583c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	200000d8 	.word	0x200000d8

08005840 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	220a      	movs	r2, #10
 800584c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c

08005860 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	e004      	b.n	800587e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800588a:	b480      	push	{r7}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058cc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005902:	2303      	movs	r3, #3
 8005904:	e01a      	b.n	800593c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800590c:	2b00      	cmp	r3, #0
 800590e:	d114      	bne.n	800593a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2201      	movs	r2, #1
 8005914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800592e:	2181      	movs	r1, #129	; 0x81
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fdb6 	bl	80074a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800595e:	2303      	movs	r3, #3
 8005960:	e016      	b.n	8005990 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7c1b      	ldrb	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005974:	2101      	movs	r1, #1
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fdb4 	bl	80074e4 <USBD_LL_PrepareReceive>
 800597c:	e007      	b.n	800598e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005984:	2340      	movs	r3, #64	; 0x40
 8005986:	2101      	movs	r1, #1
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fdab 	bl	80074e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e025      	b.n	80059fc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	79fa      	ldrb	r2, [r7, #7]
 80059ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f001 fc21 	bl	8007238 <USBD_LL_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e010      	b.n	8005a3e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f107 020e 	add.w	r2, r7, #14
 8005a30:	4610      	mov	r0, r2
 8005a32:	4798      	blx	r3
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fc3e 	bl	80072d0 <USBD_LL_Start>
 8005a54:	4603      	mov	r3, r0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	4611      	mov	r1, r2
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
  }

  return USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 ff2c 	bl	800694c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d00e      	beq.n	8005b36 <USBD_LL_SetupStage+0x5a>
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d302      	bcc.n	8005b22 <USBD_LL_SetupStage+0x46>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d014      	beq.n	8005b4a <USBD_LL_SetupStage+0x6e>
 8005b20:	e01d      	b.n	8005b5e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa18 	bl	8005f60 <USBD_StdDevReq>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
      break;
 8005b34:	e020      	b.n	8005b78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa7c 	bl	800603c <USBD_StdItfReq>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e016      	b.n	8005b78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fab8 	bl	80060c8 <USBD_StdEPReq>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e00c      	b.n	8005b78 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fc0f 	bl	8007390 <USBD_LL_StallEP>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
      break;
 8005b76:	bf00      	nop
  }

  return ret;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d137      	bne.n	8005c06 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d14a      	bne.n	8005c3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d913      	bls.n	8005bdc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	1ad2      	subs	r2, r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bf28      	it	cs
 8005bce:	4613      	movcs	r3, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 ffad 	bl	8006b34 <USBD_CtlContinueRx>
 8005bda:	e030      	b.n	8005c3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d105      	bne.n	8005bfe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 ffa9 	bl	8006b56 <USBD_CtlSendStatus>
 8005c04:	e01b      	b.n	8005c3e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d10e      	bne.n	8005c3a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	7afa      	ldrb	r2, [r7, #11]
 8005c26:	4611      	mov	r1, r2
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	4798      	blx	r3
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	e002      	b.n	8005c40 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e000      	b.n	8005c40 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	460b      	mov	r3, r1
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d16a      	bne.n	8005d32 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3314      	adds	r3, #20
 8005c60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d155      	bne.n	8005d18 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d914      	bls.n	8005ca2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 ff22 	bl	8006ad8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c94:	2300      	movs	r3, #0
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f001 fc22 	bl	80074e4 <USBD_LL_PrepareReceive>
 8005ca0:	e03a      	b.n	8005d18 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d11c      	bne.n	8005ce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d316      	bcc.n	8005ce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20f      	bcs.n	8005ce8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2100      	movs	r1, #0
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 ff03 	bl	8006ad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 fbff 	bl	80074e4 <USBD_LL_PrepareReceive>
 8005ce6:	e017      	b.n	8005d18 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d105      	bne.n	8005d0a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f001 fb3f 	bl	8007390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 ff32 	bl	8006b7c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d123      	bne.n	8005d6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fe9b 	bl	8005a5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d30:	e01b      	b.n	8005d6a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d013      	beq.n	8005d66 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d10e      	bne.n	8005d66 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	7afa      	ldrb	r2, [r7, #11]
 8005d52:	4611      	mov	r1, r2
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	e002      	b.n	8005d6c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e000      	b.n	8005d6c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	4611      	mov	r1, r2
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005db8:	2340      	movs	r3, #64	; 0x40
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 faa1 	bl	8007306 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fa93 	bl	8007306 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2240      	movs	r2, #64	; 0x40
 8005dea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d105      	bne.n	8005e5e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d10b      	bne.n	8005e96 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6852      	ldr	r2, [r2, #4]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	4611      	mov	r1, r2
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
  }

  return USBD_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f40:	8a3b      	ldrh	r3, [r7, #16]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	b21a      	sxth	r2, r3
 8005f46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b21b      	sxth	r3, r3
 8005f4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f50:	89fb      	ldrh	r3, [r7, #14]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d004      	beq.n	8005f84 <USBD_StdDevReq+0x24>
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d002      	beq.n	8005f84 <USBD_StdDevReq+0x24>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <USBD_StdDevReq+0x38>
 8005f82:	e050      	b.n	8006026 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]
    break;
 8005f96:	e04b      	b.n	8006030 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b09      	cmp	r3, #9
 8005f9e:	d83c      	bhi.n	800601a <USBD_StdDevReq+0xba>
 8005fa0:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <USBD_StdDevReq+0x48>)
 8005fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa6:	bf00      	nop
 8005fa8:	08005ffd 	.word	0x08005ffd
 8005fac:	08006011 	.word	0x08006011
 8005fb0:	0800601b 	.word	0x0800601b
 8005fb4:	08006007 	.word	0x08006007
 8005fb8:	0800601b 	.word	0x0800601b
 8005fbc:	08005fdb 	.word	0x08005fdb
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	0800601b 	.word	0x0800601b
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08005fe5 	.word	0x08005fe5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9ce 	bl	8006374 <USBD_GetDescriptor>
      break;
 8005fd8:	e024      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb33 	bl	8006648 <USBD_SetAddress>
      break;
 8005fe2:	e01f      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb70 	bl	80066cc <USBD_SetConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff0:	e018      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fc0d 	bl	8006814 <USBD_GetConfig>
      break;
 8005ffa:	e013      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fc3c 	bl	800687c <USBD_GetStatus>
      break;
 8006004:	e00e      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc6a 	bl	80068e2 <USBD_SetFeature>
      break;
 800600e:	e009      	b.n	8006024 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc79 	bl	800690a <USBD_ClrFeature>
      break;
 8006018:	e004      	b.n	8006024 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fccf 	bl	80069c0 <USBD_CtlError>
      break;
 8006022:	bf00      	nop
    }
    break;
 8006024:	e004      	b.n	8006030 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fcc9 	bl	80069c0 <USBD_CtlError>
    break;
 800602e:	bf00      	nop
  }

  return ret;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop

0800603c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006046:	2300      	movs	r3, #0
 8006048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006052:	2b20      	cmp	r3, #32
 8006054:	d003      	beq.n	800605e <USBD_StdItfReq+0x22>
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d001      	beq.n	800605e <USBD_StdItfReq+0x22>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d12a      	bne.n	80060b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006064:	3b01      	subs	r3, #1
 8006066:	2b02      	cmp	r3, #2
 8006068:	d81d      	bhi.n	80060a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	889b      	ldrh	r3, [r3, #4]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d813      	bhi.n	800609c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d110      	bne.n	80060b0 <USBD_StdItfReq+0x74>
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10d      	bne.n	80060b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fd5e 	bl	8006b56 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800609a:	e009      	b.n	80060b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fc8e 	bl	80069c0 <USBD_CtlError>
      break;
 80060a4:	e004      	b.n	80060b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fc89 	bl	80069c0 <USBD_CtlError>
      break;
 80060ae:	e000      	b.n	80060b2 <USBD_StdItfReq+0x76>
      break;
 80060b0:	bf00      	nop
    }
    break;
 80060b2:	e004      	b.n	80060be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fc82 	bl	80069c0 <USBD_CtlError>
    break;
 80060bc:	bf00      	nop
  }

  return ret;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	889b      	ldrh	r3, [r3, #4]
 80060da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d004      	beq.n	80060f2 <USBD_StdEPReq+0x2a>
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d002      	beq.n	80060f2 <USBD_StdEPReq+0x2a>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <USBD_StdEPReq+0x3e>
 80060f0:	e135      	b.n	800635e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
    break;
 8006104:	e130      	b.n	8006368 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d03e      	beq.n	800618c <USBD_StdEPReq+0xc4>
 800610e:	2b03      	cmp	r3, #3
 8006110:	d002      	beq.n	8006118 <USBD_StdEPReq+0x50>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d077      	beq.n	8006206 <USBD_StdEPReq+0x13e>
 8006116:	e11c      	b.n	8006352 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	2b02      	cmp	r3, #2
 8006120:	d002      	beq.n	8006128 <USBD_StdEPReq+0x60>
 8006122:	2b03      	cmp	r3, #3
 8006124:	d015      	beq.n	8006152 <USBD_StdEPReq+0x8a>
 8006126:	e02b      	b.n	8006180 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <USBD_StdEPReq+0x80>
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d009      	beq.n	8006148 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006134:	7bbb      	ldrb	r3, [r7, #14]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f929 	bl	8007390 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 f925 	bl	8007390 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006146:	e020      	b.n	800618a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fc38 	bl	80069c0 <USBD_CtlError>
        break;
 8006150:	e01b      	b.n	800618a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	885b      	ldrh	r3, [r3, #2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10e      	bne.n	8006178 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <USBD_StdEPReq+0xb0>
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d008      	beq.n	8006178 <USBD_StdEPReq+0xb0>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	88db      	ldrh	r3, [r3, #6]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f90c 	bl	8007390 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fcec 	bl	8006b56 <USBD_CtlSendStatus>

        break;
 800617e:	e004      	b.n	800618a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fc1c 	bl	80069c0 <USBD_CtlError>
        break;
 8006188:	bf00      	nop
      }
      break;
 800618a:	e0e7      	b.n	800635c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006192:	2b02      	cmp	r3, #2
 8006194:	d002      	beq.n	800619c <USBD_StdEPReq+0xd4>
 8006196:	2b03      	cmp	r3, #3
 8006198:	d015      	beq.n	80061c6 <USBD_StdEPReq+0xfe>
 800619a:	e02d      	b.n	80061f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <USBD_StdEPReq+0xf4>
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d009      	beq.n	80061bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f8ef 	bl	8007390 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 f8eb 	bl	8007390 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80061ba:	e023      	b.n	8006204 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fbfe 	bl	80069c0 <USBD_CtlError>
        break;
 80061c4:	e01e      	b.n	8006204 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	885b      	ldrh	r3, [r3, #2]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d119      	bne.n	8006202 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f8f6 	bl	80073ce <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fcb7 	bl	8006b56 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
        }
        break;
 80061f6:	e004      	b.n	8006202 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fbe0 	bl	80069c0 <USBD_CtlError>
        break;
 8006200:	e000      	b.n	8006204 <USBD_StdEPReq+0x13c>
        break;
 8006202:	bf00      	nop
      }
      break;
 8006204:	e0aa      	b.n	800635c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620c:	2b02      	cmp	r3, #2
 800620e:	d002      	beq.n	8006216 <USBD_StdEPReq+0x14e>
 8006210:	2b03      	cmp	r3, #3
 8006212:	d032      	beq.n	800627a <USBD_StdEPReq+0x1b2>
 8006214:	e097      	b.n	8006346 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <USBD_StdEPReq+0x164>
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d004      	beq.n	800622c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fbcb 	bl	80069c0 <USBD_CtlError>
          break;
 800622a:	e091      	b.n	8006350 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800622c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da0b      	bge.n	800624c <USBD_StdEPReq+0x184>
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	3310      	adds	r3, #16
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	e00b      	b.n	8006264 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4413      	add	r3, r2
 8006262:	3304      	adds	r3, #4
 8006264:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2202      	movs	r2, #2
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fc15 	bl	8006aa2 <USBD_CtlSendData>
        break;
 8006278:	e06a      	b.n	8006350 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800627a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da11      	bge.n	80062a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d117      	bne.n	80062cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb8e 	bl	80069c0 <USBD_CtlError>
            break;
 80062a4:	e054      	b.n	8006350 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb7b 	bl	80069c0 <USBD_CtlError>
            break;
 80062ca:	e041      	b.n	8006350 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da0b      	bge.n	80062ec <USBD_StdEPReq+0x224>
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	3310      	adds	r3, #16
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	3304      	adds	r3, #4
 80062ea:	e00b      	b.n	8006304 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	3304      	adds	r3, #4
 8006304:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006306:	7bbb      	ldrb	r3, [r7, #14]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <USBD_StdEPReq+0x24a>
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b80      	cmp	r3, #128	; 0x80
 8006310:	d103      	bne.n	800631a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e00e      	b.n	8006338 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f874 	bl	800740c <USBD_LL_IsStallEP>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2201      	movs	r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e002      	b.n	8006338 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2202      	movs	r2, #2
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fbaf 	bl	8006aa2 <USBD_CtlSendData>
          break;
 8006344:	e004      	b.n	8006350 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fb39 	bl	80069c0 <USBD_CtlError>
        break;
 800634e:	bf00      	nop
      }
      break;
 8006350:	e004      	b.n	800635c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb33 	bl	80069c0 <USBD_CtlError>
      break;
 800635a:	bf00      	nop
    }
    break;
 800635c:	e004      	b.n	8006368 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fb2d 	bl	80069c0 <USBD_CtlError>
    break;
 8006366:	bf00      	nop
  }

  return ret;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	885b      	ldrh	r3, [r3, #2]
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	2b06      	cmp	r3, #6
 8006396:	f200 8128 	bhi.w	80065ea <USBD_GetDescriptor+0x276>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <USBD_GetDescriptor+0x2c>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063bd 	.word	0x080063bd
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	08006415 	.word	0x08006415
 80063ac:	080065eb 	.word	0x080065eb
 80063b0:	080065eb 	.word	0x080065eb
 80063b4:	0800658b 	.word	0x0800658b
 80063b8:	080065b7 	.word	0x080065b7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
    break;
 80063d2:	e112      	b.n	80065fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7c1b      	ldrb	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10d      	bne.n	80063f8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f107 0208 	add.w	r2, r7, #8
 80063e8:	4610      	mov	r0, r2
 80063ea:	4798      	blx	r3
 80063ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80063f6:	e100      	b.n	80065fa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f107 0208 	add.w	r2, r7, #8
 8006404:	4610      	mov	r0, r2
 8006406:	4798      	blx	r3
 8006408:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	2202      	movs	r2, #2
 8006410:	701a      	strb	r2, [r3, #0]
    break;
 8006412:	e0f2      	b.n	80065fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	885b      	ldrh	r3, [r3, #2]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b05      	cmp	r3, #5
 800641c:	f200 80ac 	bhi.w	8006578 <USBD_GetDescriptor+0x204>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <USBD_GetDescriptor+0xb4>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006441 	.word	0x08006441
 800642c:	08006475 	.word	0x08006475
 8006430:	080064a9 	.word	0x080064a9
 8006434:	080064dd 	.word	0x080064dd
 8006438:	08006511 	.word	0x08006511
 800643c:	08006545 	.word	0x08006545
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006462:	e091      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 faaa 	bl	80069c0 <USBD_CtlError>
        err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
      break;
 8006472:	e089      	b.n	8006588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006496:	e077      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa90 	bl	80069c0 <USBD_CtlError>
        err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
      break;
 80064a6:	e06f      	b.n	8006588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ca:	e05d      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa76 	bl	80069c0 <USBD_CtlError>
        err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
      break;
 80064da:	e055      	b.n	8006588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7c12      	ldrb	r2, [r2, #16]
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064fe:	e043      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa5c 	bl	80069c0 <USBD_CtlError>
        err++;
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	3301      	adds	r3, #1
 800650c:	72fb      	strb	r3, [r7, #11]
      break;
 800650e:	e03b      	b.n	8006588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	7c12      	ldrb	r2, [r2, #16]
 8006528:	f107 0108 	add.w	r1, r7, #8
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006532:	e029      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa42 	bl	80069c0 <USBD_CtlError>
        err++;
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	3301      	adds	r3, #1
 8006540:	72fb      	strb	r3, [r7, #11]
      break;
 8006542:	e021      	b.n	8006588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	7c12      	ldrb	r2, [r2, #16]
 800655c:	f107 0108 	add.w	r1, r7, #8
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
 8006564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006566:	e00f      	b.n	8006588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa28 	bl	80069c0 <USBD_CtlError>
        err++;
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	3301      	adds	r3, #1
 8006574:	72fb      	strb	r3, [r7, #11]
      break;
 8006576:	e007      	b.n	8006588 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa20 	bl	80069c0 <USBD_CtlError>
      err++;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	3301      	adds	r3, #1
 8006584:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006586:	bf00      	nop
    }
    break;
 8006588:	e037      	b.n	80065fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	7c1b      	ldrb	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	f107 0208 	add.w	r2, r7, #8
 800659e:	4610      	mov	r0, r2
 80065a0:	4798      	blx	r3
 80065a2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80065a4:	e029      	b.n	80065fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa09 	bl	80069c0 <USBD_CtlError>
      err++;
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	3301      	adds	r3, #1
 80065b2:	72fb      	strb	r3, [r7, #11]
    break;
 80065b4:	e021      	b.n	80065fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	7c1b      	ldrb	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10d      	bne.n	80065da <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	f107 0208 	add.w	r2, r7, #8
 80065ca:	4610      	mov	r0, r2
 80065cc:	4798      	blx	r3
 80065ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	2207      	movs	r2, #7
 80065d6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80065d8:	e00f      	b.n	80065fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f9ef 	bl	80069c0 <USBD_CtlError>
      err++;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
 80065e4:	3301      	adds	r3, #1
 80065e6:	72fb      	strb	r3, [r7, #11]
    break;
 80065e8:	e007      	b.n	80065fa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f9e7 	bl	80069c0 <USBD_CtlError>
    err++;
 80065f2:	7afb      	ldrb	r3, [r7, #11]
 80065f4:	3301      	adds	r3, #1
 80065f6:	72fb      	strb	r3, [r7, #11]
    break;
 80065f8:	bf00      	nop
  }

  if (err != 0U)
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d11e      	bne.n	800663e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	88db      	ldrh	r3, [r3, #6]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d016      	beq.n	8006636 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006608:	893b      	ldrh	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88da      	ldrh	r2, [r3, #6]
 8006612:	893b      	ldrh	r3, [r7, #8]
 8006614:	4293      	cmp	r3, r2
 8006616:	bf28      	it	cs
 8006618:	4613      	movcs	r3, r2
 800661a:	b29b      	uxth	r3, r3
 800661c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	461a      	mov	r2, r3
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fa3c 	bl	8006aa2 <USBD_CtlSendData>
 800662a:	e009      	b.n	8006640 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9c6 	bl	80069c0 <USBD_CtlError>
 8006634:	e004      	b.n	8006640 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa8d 	bl	8006b56 <USBD_CtlSendStatus>
 800663c:	e000      	b.n	8006640 <USBD_GetDescriptor+0x2cc>
    return;
 800663e:	bf00      	nop
    }
  }
}
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop

08006648 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	889b      	ldrh	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d130      	bne.n	80066bc <USBD_SetAddress+0x74>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	88db      	ldrh	r3, [r3, #6]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d12c      	bne.n	80066bc <USBD_SetAddress+0x74>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	885b      	ldrh	r3, [r3, #2]
 8006666:	2b7f      	cmp	r3, #127	; 0x7f
 8006668:	d828      	bhi.n	80066bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	885b      	ldrh	r3, [r3, #2]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667c:	2b03      	cmp	r3, #3
 800667e:	d104      	bne.n	800668a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f99c 	bl	80069c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006688:	e01c      	b.n	80066c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	7bfa      	ldrb	r2, [r7, #15]
 800668e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fee4 	bl	8007464 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fa5a 	bl	8006b56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b0:	e008      	b.n	80066c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ba:	e003      	b.n	80066c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f97e 	bl	80069c0 <USBD_CtlError>
  }
}
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <USBD_SetConfig+0x144>)
 80066e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066e4:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <USBD_SetConfig+0x144>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d905      	bls.n	80066f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f966 	bl	80069c0 <USBD_CtlError>
    return USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e087      	b.n	8006808 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d002      	beq.n	8006708 <USBD_SetConfig+0x3c>
 8006702:	2b03      	cmp	r3, #3
 8006704:	d025      	beq.n	8006752 <USBD_SetConfig+0x86>
 8006706:	e071      	b.n	80067ec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006708:	4b41      	ldr	r3, [pc, #260]	; (8006810 <USBD_SetConfig+0x144>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01c      	beq.n	800674a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006710:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <USBD_SetConfig+0x144>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800671a:	4b3d      	ldr	r3, [pc, #244]	; (8006810 <USBD_SetConfig+0x144>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff f9a7 	bl	8005a74 <USBD_SetClassConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f944 	bl	80069c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006738:	e065      	b.n	8006806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa0b 	bl	8006b56 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2203      	movs	r2, #3
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006748:	e05d      	b.n	8006806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa03 	bl	8006b56 <USBD_CtlSendStatus>
    break;
 8006750:	e059      	b.n	8006806 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006752:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <USBD_SetConfig+0x144>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d112      	bne.n	8006780 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006762:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <USBD_SetConfig+0x144>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800676c:	4b28      	ldr	r3, [pc, #160]	; (8006810 <USBD_SetConfig+0x144>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff f99a 	bl	8005aac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f9ec 	bl	8006b56 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800677e:	e042      	b.n	8006806 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006780:	4b23      	ldr	r3, [pc, #140]	; (8006810 <USBD_SetConfig+0x144>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	429a      	cmp	r2, r3
 800678c:	d02a      	beq.n	80067e4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff f988 	bl	8005aac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800679c:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <USBD_SetConfig+0x144>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <USBD_SetConfig+0x144>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff f961 	bl	8005a74 <USBD_SetClassConfig>
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8fe 	bl	80069c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff f96d 	bl	8005aac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80067da:	e014      	b.n	8006806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f9ba 	bl	8006b56 <USBD_CtlSendStatus>
    break;
 80067e2:	e010      	b.n	8006806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9b6 	bl	8006b56 <USBD_CtlSendStatus>
    break;
 80067ea:	e00c      	b.n	8006806 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f8e6 	bl	80069c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <USBD_SetConfig+0x144>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff f956 	bl	8005aac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	73fb      	strb	r3, [r7, #15]
    break;
 8006804:	bf00      	nop
  }

  return ret;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000204 	.word	0x20000204

08006814 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	88db      	ldrh	r3, [r3, #6]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d004      	beq.n	8006830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8c9 	bl	80069c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800682e:	e021      	b.n	8006874 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006836:	2b01      	cmp	r3, #1
 8006838:	db17      	blt.n	800686a <USBD_GetConfig+0x56>
 800683a:	2b02      	cmp	r3, #2
 800683c:	dd02      	ble.n	8006844 <USBD_GetConfig+0x30>
 800683e:	2b03      	cmp	r3, #3
 8006840:	d00b      	beq.n	800685a <USBD_GetConfig+0x46>
 8006842:	e012      	b.n	800686a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3308      	adds	r3, #8
 800684e:	2201      	movs	r2, #1
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f925 	bl	8006aa2 <USBD_CtlSendData>
      break;
 8006858:	e00c      	b.n	8006874 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	2201      	movs	r2, #1
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f91d 	bl	8006aa2 <USBD_CtlSendData>
      break;
 8006868:	e004      	b.n	8006874 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f8a7 	bl	80069c0 <USBD_CtlError>
      break;
 8006872:	bf00      	nop
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688c:	3b01      	subs	r3, #1
 800688e:	2b02      	cmp	r3, #2
 8006890:	d81e      	bhi.n	80068d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d004      	beq.n	80068a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f88f 	bl	80069c0 <USBD_CtlError>
      break;
 80068a2:	e01a      	b.n	80068da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f043 0202 	orr.w	r2, r3, #2
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	330c      	adds	r3, #12
 80068c4:	2202      	movs	r2, #2
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f8ea 	bl	8006aa2 <USBD_CtlSendData>
    break;
 80068ce:	e004      	b.n	80068da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f874 	bl	80069c0 <USBD_CtlError>
    break;
 80068d8:	bf00      	nop
  }
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	885b      	ldrh	r3, [r3, #2]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f92a 	bl	8006b56 <USBD_CtlSendStatus>
  }
}
 8006902:	bf00      	nop
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691a:	3b01      	subs	r3, #1
 800691c:	2b02      	cmp	r3, #2
 800691e:	d80b      	bhi.n	8006938 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10c      	bne.n	8006942 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f910 	bl	8006b56 <USBD_CtlSendStatus>
      }
      break;
 8006936:	e004      	b.n	8006942 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f840 	bl	80069c0 <USBD_CtlError>
      break;
 8006940:	e000      	b.n	8006944 <USBD_ClrFeature+0x3a>
      break;
 8006942:	bf00      	nop
  }
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	781a      	ldrb	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fad3 	bl	8005f22 <SWAPBYTE>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fac6 	bl	8005f22 <SWAPBYTE>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fab9 	bl	8005f22 <SWAPBYTE>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	80da      	strh	r2, [r3, #6]
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fcdf 	bl	8007390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fcdb 	bl	8007390 <USBD_LL_StallEP>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d036      	beq.n	8006a66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069fc:	6938      	ldr	r0, [r7, #16]
 80069fe:	f000 f836 	bl	8006a6e <USBD_GetLen>
 8006a02:	4603      	mov	r3, r0
 8006a04:	3301      	adds	r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	7812      	ldrb	r2, [r2, #0]
 8006a1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	2203      	movs	r2, #3
 8006a2a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a32:	e013      	b.n	8006a5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4413      	add	r3, r2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	613b      	str	r3, [r7, #16]
    idx++;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e7      	bne.n	8006a34 <USBD_GetString+0x52>
 8006a64:	e000      	b.n	8006a68 <USBD_GetString+0x86>
    return;
 8006a66:	bf00      	nop
  }
}
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a7e:	e005      	b.n	8006a8c <USBD_GetLen+0x1e>
  {
    len++;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	3301      	adds	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1f5      	bne.n	8006a80 <USBD_GetLen+0x12>
  }

  return len;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fcea 	bl	80074a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fcd9 	bl	80074a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	2100      	movs	r1, #0
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fcdd 	bl	80074e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 fccc 	bl	80074e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2204      	movs	r2, #4
 8006b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc98 	bl	80074a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2205      	movs	r2, #5
 8006b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fca6 	bl	80074e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4912      	ldr	r1, [pc, #72]	; (8006bf4 <MX_USB_DEVICE_Init+0x50>)
 8006bac:	4812      	ldr	r0, [pc, #72]	; (8006bf8 <MX_USB_DEVICE_Init+0x54>)
 8006bae:	f7fe fef3 	bl	8005998 <USBD_Init>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006bb8:	f7f9 fe5c 	bl	8000874 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <MX_USB_DEVICE_Init+0x58>)
 8006bbe:	480e      	ldr	r0, [pc, #56]	; (8006bf8 <MX_USB_DEVICE_Init+0x54>)
 8006bc0:	f7fe ff20 	bl	8005a04 <USBD_RegisterClass>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bca:	f7f9 fe53 	bl	8000874 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bce:	490c      	ldr	r1, [pc, #48]	; (8006c00 <MX_USB_DEVICE_Init+0x5c>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <MX_USB_DEVICE_Init+0x54>)
 8006bd2:	f7fe fe45 	bl	8005860 <USBD_CDC_RegisterInterface>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006bdc:	f7f9 fe4a 	bl	8000874 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006be0:	4805      	ldr	r0, [pc, #20]	; (8006bf8 <MX_USB_DEVICE_Init+0x54>)
 8006be2:	f7fe ff30 	bl	8005a46 <USBD_Start>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bec:	f7f9 fe42 	bl	8000874 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bf0:	bf00      	nop
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000130 	.word	0x20000130
 8006bf8:	20000294 	.word	0x20000294
 8006bfc:	20000018 	.word	0x20000018
 8006c00:	2000011c 	.word	0x2000011c

08006c04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	4905      	ldr	r1, [pc, #20]	; (8006c20 <CDC_Init_FS+0x1c>)
 8006c0c:	4805      	ldr	r0, [pc, #20]	; (8006c24 <CDC_Init_FS+0x20>)
 8006c0e:	f7fe fe3c 	bl	800588a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c12:	4905      	ldr	r1, [pc, #20]	; (8006c28 <CDC_Init_FS+0x24>)
 8006c14:	4803      	ldr	r0, [pc, #12]	; (8006c24 <CDC_Init_FS+0x20>)
 8006c16:	f7fe fe51 	bl	80058bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000d64 	.word	0x20000d64
 8006c24:	20000294 	.word	0x20000294
 8006c28:	20000564 	.word	0x20000564

08006c2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	2b23      	cmp	r3, #35	; 0x23
 8006c50:	d84a      	bhi.n	8006ce8 <CDC_Control_FS+0xac>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <CDC_Control_FS+0x1c>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006ce9 	.word	0x08006ce9
 8006c5c:	08006ce9 	.word	0x08006ce9
 8006c60:	08006ce9 	.word	0x08006ce9
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006ce9 	.word	0x08006ce9
 8006c6c:	08006ce9 	.word	0x08006ce9
 8006c70:	08006ce9 	.word	0x08006ce9
 8006c74:	08006ce9 	.word	0x08006ce9
 8006c78:	08006ce9 	.word	0x08006ce9
 8006c7c:	08006ce9 	.word	0x08006ce9
 8006c80:	08006ce9 	.word	0x08006ce9
 8006c84:	08006ce9 	.word	0x08006ce9
 8006c88:	08006ce9 	.word	0x08006ce9
 8006c8c:	08006ce9 	.word	0x08006ce9
 8006c90:	08006ce9 	.word	0x08006ce9
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006ce9 	.word	0x08006ce9
 8006c9c:	08006ce9 	.word	0x08006ce9
 8006ca0:	08006ce9 	.word	0x08006ce9
 8006ca4:	08006ce9 	.word	0x08006ce9
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006ce9 	.word	0x08006ce9
 8006cb0:	08006ce9 	.word	0x08006ce9
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006ce9 	.word	0x08006ce9
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006ce9 	.word	0x08006ce9
 8006ce0:	08006ce9 	.word	0x08006ce9
 8006ce4:	08006ce9 	.word	0x08006ce9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ce8:	bf00      	nop
  }

  return (USBD_OK);
 8006cea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4805      	ldr	r0, [pc, #20]	; (8006d1c <CDC_Receive_FS+0x24>)
 8006d06:	f7fe fdd9 	bl	80058bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d0a:	4804      	ldr	r0, [pc, #16]	; (8006d1c <CDC_Receive_FS+0x24>)
 8006d0c:	f7fe fe1a 	bl	8005944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006d10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000294 	.word	0x20000294

08006d20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d30:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <CDC_Transmit_FS+0x48>)
 8006d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e00b      	b.n	8006d5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d46:	887b      	ldrh	r3, [r7, #2]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4806      	ldr	r0, [pc, #24]	; (8006d68 <CDC_Transmit_FS+0x48>)
 8006d4e:	f7fe fd9c 	bl	800588a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d52:	4805      	ldr	r0, [pc, #20]	; (8006d68 <CDC_Transmit_FS+0x48>)
 8006d54:	f7fe fdc6 	bl	80058e4 <USBD_CDC_TransmitPacket>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000294 	.word	0x20000294

08006d6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2212      	movs	r2, #18
 8006da0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006da2:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	2000014c 	.word	0x2000014c

08006db4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dc6:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	20000160 	.word	0x20000160

08006dd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	6039      	str	r1, [r7, #0]
 8006de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d105      	bne.n	8006df6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	4907      	ldr	r1, [pc, #28]	; (8006e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8006dee:	4808      	ldr	r0, [pc, #32]	; (8006e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8006df0:	f7ff fdf7 	bl	80069e2 <USBD_GetString>
 8006df4:	e004      	b.n	8006e00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	4904      	ldr	r1, [pc, #16]	; (8006e0c <USBD_FS_ProductStrDescriptor+0x34>)
 8006dfa:	4805      	ldr	r0, [pc, #20]	; (8006e10 <USBD_FS_ProductStrDescriptor+0x38>)
 8006dfc:	f7ff fdf1 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20001564 	.word	0x20001564
 8006e10:	080078e0 	.word	0x080078e0

08006e14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	4904      	ldr	r1, [pc, #16]	; (8006e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e24:	4804      	ldr	r0, [pc, #16]	; (8006e38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e26:	f7ff fddc 	bl	80069e2 <USBD_GetString>
  return USBD_StrDesc;
 8006e2a:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20001564 	.word	0x20001564
 8006e38:	080078f8 	.word	0x080078f8

08006e3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	221a      	movs	r2, #26
 8006e4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e4e:	f000 f843 	bl	8006ed8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e52:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000164 	.word	0x20000164

08006e60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	4907      	ldr	r1, [pc, #28]	; (8006e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e76:	4808      	ldr	r0, [pc, #32]	; (8006e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e78:	f7ff fdb3 	bl	80069e2 <USBD_GetString>
 8006e7c:	e004      	b.n	8006e88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	4904      	ldr	r1, [pc, #16]	; (8006e94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e82:	4805      	ldr	r0, [pc, #20]	; (8006e98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e84:	f7ff fdad 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e88:	4b02      	ldr	r3, [pc, #8]	; (8006e94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20001564 	.word	0x20001564
 8006e98:	0800790c 	.word	0x0800790c

08006e9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4907      	ldr	r1, [pc, #28]	; (8006ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eb2:	4808      	ldr	r0, [pc, #32]	; (8006ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eb4:	f7ff fd95 	bl	80069e2 <USBD_GetString>
 8006eb8:	e004      	b.n	8006ec4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ebe:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ec0:	f7ff fd8f 	bl	80069e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ec4:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20001564 	.word	0x20001564
 8006ed4:	08007918 	.word	0x08007918

08006ed8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <Get_SerialNum+0x44>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <Get_SerialNum+0x48>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <Get_SerialNum+0x4c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006efe:	2208      	movs	r2, #8
 8006f00:	4909      	ldr	r1, [pc, #36]	; (8006f28 <Get_SerialNum+0x50>)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f814 	bl	8006f30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f08:	2204      	movs	r2, #4
 8006f0a:	4908      	ldr	r1, [pc, #32]	; (8006f2c <Get_SerialNum+0x54>)
 8006f0c:	68b8      	ldr	r0, [r7, #8]
 8006f0e:	f000 f80f 	bl	8006f30 <IntToUnicode>
  }
}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	1fff7a10 	.word	0x1fff7a10
 8006f20:	1fff7a14 	.word	0x1fff7a14
 8006f24:	1fff7a18 	.word	0x1fff7a18
 8006f28:	20000166 	.word	0x20000166
 8006f2c:	20000176 	.word	0x20000176

08006f30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
 8006f46:	e027      	b.n	8006f98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	0f1b      	lsrs	r3, r3, #28
 8006f4c:	2b09      	cmp	r3, #9
 8006f4e:	d80b      	bhi.n	8006f68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	0f1b      	lsrs	r3, r3, #28
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	440b      	add	r3, r1
 8006f60:	3230      	adds	r2, #48	; 0x30
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	e00a      	b.n	8006f7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	0f1b      	lsrs	r3, r3, #28
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4619      	mov	r1, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	440b      	add	r3, r1
 8006f78:	3237      	adds	r2, #55	; 0x37
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	3301      	adds	r3, #1
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	3301      	adds	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]
 8006f98:	7dfa      	ldrb	r2, [r7, #23]
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d3d3      	bcc.n	8006f48 <IntToUnicode+0x18>
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fcc:	d13a      	bne.n	8007044 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <HAL_PCD_MspInit+0xa0>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_PCD_MspInit+0xa0>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fde:	4b1b      	ldr	r3, [pc, #108]	; (800704c <HAL_PCD_MspInit+0xa0>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4619      	mov	r1, r3
 8007006:	4812      	ldr	r0, [pc, #72]	; (8007050 <HAL_PCD_MspInit+0xa4>)
 8007008:	f7f9 ff18 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <HAL_PCD_MspInit+0xa0>)
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	4a0e      	ldr	r2, [pc, #56]	; (800704c <HAL_PCD_MspInit+0xa0>)
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	6353      	str	r3, [r2, #52]	; 0x34
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_PCD_MspInit+0xa0>)
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <HAL_PCD_MspInit+0xa0>)
 8007022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007026:	6453      	str	r3, [r2, #68]	; 0x44
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <HAL_PCD_MspInit+0xa0>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007034:	2200      	movs	r2, #0
 8007036:	2100      	movs	r1, #0
 8007038:	2043      	movs	r0, #67	; 0x43
 800703a:	f7f9 fec8 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800703e:	2043      	movs	r0, #67	; 0x43
 8007040:	f7f9 fee1 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007044:	bf00      	nop
 8007046:	3728      	adds	r7, #40	; 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40023800 	.word	0x40023800
 8007050:	40020000 	.word	0x40020000

08007054 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007068:	4619      	mov	r1, r3
 800706a:	4610      	mov	r0, r2
 800706c:	f7fe fd36 	bl	8005adc <USBD_LL_SetupStage>
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	4619      	mov	r1, r3
 80070a2:	f7fe fd6e 	bl	8005b82 <USBD_LL_DataOutStage>
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	3348      	adds	r3, #72	; 0x48
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	4619      	mov	r1, r3
 80070d6:	f7fe fdb7 	bl	8005c48 <USBD_LL_DataInStage>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe febb 	bl	8005e6c <USBD_LL_SOF>
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
 8007116:	e008      	b.n	800712a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d102      	bne.n	8007126 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e001      	b.n	800712a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007126:	f7f9 fba5 	bl	8000874 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007130:	7bfa      	ldrb	r2, [r7, #15]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fe5e 	bl	8005df6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fe17 	bl	8005d74 <USBD_LL_Reset>
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fe59 	bl	8005e16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007176:	f043 0301 	orr.w	r3, r3, #1
 800717a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <HAL_PCD_SuspendCallback+0x48>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	4a03      	ldr	r2, [pc, #12]	; (8007198 <HAL_PCD_SuspendCallback+0x48>)
 800718a:	f043 0306 	orr.w	r3, r3, #6
 800718e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed00 	.word	0xe000ed00

0800719c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fe48 	bl	8005e40 <USBD_LL_Resume>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fe73 	bl	8005eba <USBD_LL_IsoOUTIncomplete>
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fe54 	bl	8005ea0 <USBD_LL_IsoINIncomplete>
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fe60 	bl	8005ed4 <USBD_LL_DevConnected>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fe5d 	bl	8005eea <USBD_LL_DevDisconnected>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d13c      	bne.n	80072c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007248:	4a20      	ldr	r2, [pc, #128]	; (80072cc <USBD_LL_Init+0x94>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <USBD_LL_Init+0x94>)
 8007254:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007258:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <USBD_LL_Init+0x94>)
 800725a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800725e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007260:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <USBD_LL_Init+0x94>)
 8007262:	2204      	movs	r2, #4
 8007264:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007266:	4b19      	ldr	r3, [pc, #100]	; (80072cc <USBD_LL_Init+0x94>)
 8007268:	2202      	movs	r2, #2
 800726a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800726c:	4b17      	ldr	r3, [pc, #92]	; (80072cc <USBD_LL_Init+0x94>)
 800726e:	2200      	movs	r2, #0
 8007270:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007272:	4b16      	ldr	r3, [pc, #88]	; (80072cc <USBD_LL_Init+0x94>)
 8007274:	2202      	movs	r2, #2
 8007276:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007278:	4b14      	ldr	r3, [pc, #80]	; (80072cc <USBD_LL_Init+0x94>)
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800727e:	4b13      	ldr	r3, [pc, #76]	; (80072cc <USBD_LL_Init+0x94>)
 8007280:	2200      	movs	r2, #0
 8007282:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <USBD_LL_Init+0x94>)
 8007286:	2200      	movs	r2, #0
 8007288:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800728a:	4b10      	ldr	r3, [pc, #64]	; (80072cc <USBD_LL_Init+0x94>)
 800728c:	2200      	movs	r2, #0
 800728e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <USBD_LL_Init+0x94>)
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007296:	480d      	ldr	r0, [pc, #52]	; (80072cc <USBD_LL_Init+0x94>)
 8007298:	f7f9 ff82 	bl	80011a0 <HAL_PCD_Init>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072a2:	f7f9 fae7 	bl	8000874 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072a6:	2180      	movs	r1, #128	; 0x80
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <USBD_LL_Init+0x94>)
 80072aa:	f7fb f8e0 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072ae:	2240      	movs	r2, #64	; 0x40
 80072b0:	2100      	movs	r1, #0
 80072b2:	4806      	ldr	r0, [pc, #24]	; (80072cc <USBD_LL_Init+0x94>)
 80072b4:	f7fb f894 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072b8:	2280      	movs	r2, #128	; 0x80
 80072ba:	2101      	movs	r1, #1
 80072bc:	4803      	ldr	r0, [pc, #12]	; (80072cc <USBD_LL_Init+0x94>)
 80072be:	f7fb f88f 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20001764 	.word	0x20001764

080072d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fa f877 	bl	80013da <HAL_PCD_Start>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 f92a 	bl	800754c <USBD_Get_USB_Status>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	461a      	mov	r2, r3
 8007314:	4603      	mov	r3, r0
 8007316:	70fb      	strb	r3, [r7, #3]
 8007318:	460b      	mov	r3, r1
 800731a:	70bb      	strb	r3, [r7, #2]
 800731c:	4613      	mov	r3, r2
 800731e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800732e:	78bb      	ldrb	r3, [r7, #2]
 8007330:	883a      	ldrh	r2, [r7, #0]
 8007332:	78f9      	ldrb	r1, [r7, #3]
 8007334:	f7fa fc5b 	bl	8001bee <HAL_PCD_EP_Open>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f904 	bl	800754c <USBD_Get_USB_Status>
 8007344:	4603      	mov	r3, r0
 8007346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007348:	7bbb      	ldrb	r3, [r7, #14]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f7fa fca4 	bl	8001cbe <HAL_PCD_EP_Close>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f8e5 	bl	800754c <USBD_Get_USB_Status>
 8007382:	4603      	mov	r3, r0
 8007384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007386:	7bbb      	ldrb	r3, [r7, #14]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fa fd7c 	bl	8001eac <HAL_PCD_EP_SetStall>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f8c6 	bl	800754c <USBD_Get_USB_Status>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fa fdc1 	bl	8001f74 <HAL_PCD_EP_ClrStall>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f8a7 	bl	800754c <USBD_Get_USB_Status>
 80073fe:	4603      	mov	r3, r0
 8007400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007402:	7bbb      	ldrb	r3, [r7, #14]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800741e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007424:	2b00      	cmp	r3, #0
 8007426:	da0b      	bge.n	8007440 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	333e      	adds	r3, #62	; 0x3e
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	e00b      	b.n	8007458 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007456:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	4611      	mov	r1, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7fa fb8e 	bl	8001ba4 <HAL_PCD_SetAddress>
 8007488:	4603      	mov	r3, r0
 800748a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 f85c 	bl	800754c <USBD_Get_USB_Status>
 8007494:	4603      	mov	r3, r0
 8007496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007498:	7bbb      	ldrb	r3, [r7, #14]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	460b      	mov	r3, r1
 80074b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074c0:	7af9      	ldrb	r1, [r7, #11]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	f7fa fca7 	bl	8001e18 <HAL_PCD_EP_Transmit>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f83b 	bl	800754c <USBD_Get_USB_Status>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074da:	7dbb      	ldrb	r3, [r7, #22]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	460b      	mov	r3, r1
 80074f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007502:	7af9      	ldrb	r1, [r7, #11]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	f7fa fc23 	bl	8001d52 <HAL_PCD_EP_Receive>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007510:	7dfb      	ldrb	r3, [r7, #23]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f81a 	bl	800754c <USBD_Get_USB_Status>
 8007518:	4603      	mov	r3, r0
 800751a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800751c:	7dbb      	ldrb	r3, [r7, #22]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f7fa fc53 	bl	8001de8 <HAL_PCD_EP_GetRxCount>
 8007542:	4603      	mov	r3, r0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	2b03      	cmp	r3, #3
 800755e:	d817      	bhi.n	8007590 <USBD_Get_USB_Status+0x44>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <USBD_Get_USB_Status+0x1c>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007579 	.word	0x08007579
 800756c:	0800757f 	.word	0x0800757f
 8007570:	08007585 	.word	0x08007585
 8007574:	0800758b 	.word	0x0800758b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
    break;
 800757c:	e00b      	b.n	8007596 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	73fb      	strb	r3, [r7, #15]
    break;
 8007582:	e008      	b.n	8007596 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
    break;
 8007588:	e005      	b.n	8007596 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800758a:	2303      	movs	r3, #3
 800758c:	73fb      	strb	r3, [r7, #15]
    break;
 800758e:	e002      	b.n	8007596 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007590:	2303      	movs	r3, #3
 8007592:	73fb      	strb	r3, [r7, #15]
    break;
 8007594:	bf00      	nop
  }
  return usb_status;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <__errno>:
 80075a4:	4b01      	ldr	r3, [pc, #4]	; (80075ac <__errno+0x8>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20000180 	.word	0x20000180

080075b0 <__libc_init_array>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4e0d      	ldr	r6, [pc, #52]	; (80075e8 <__libc_init_array+0x38>)
 80075b4:	4c0d      	ldr	r4, [pc, #52]	; (80075ec <__libc_init_array+0x3c>)
 80075b6:	1ba4      	subs	r4, r4, r6
 80075b8:	10a4      	asrs	r4, r4, #2
 80075ba:	2500      	movs	r5, #0
 80075bc:	42a5      	cmp	r5, r4
 80075be:	d109      	bne.n	80075d4 <__libc_init_array+0x24>
 80075c0:	4e0b      	ldr	r6, [pc, #44]	; (80075f0 <__libc_init_array+0x40>)
 80075c2:	4c0c      	ldr	r4, [pc, #48]	; (80075f4 <__libc_init_array+0x44>)
 80075c4:	f000 f94e 	bl	8007864 <_init>
 80075c8:	1ba4      	subs	r4, r4, r6
 80075ca:	10a4      	asrs	r4, r4, #2
 80075cc:	2500      	movs	r5, #0
 80075ce:	42a5      	cmp	r5, r4
 80075d0:	d105      	bne.n	80075de <__libc_init_array+0x2e>
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075d8:	4798      	blx	r3
 80075da:	3501      	adds	r5, #1
 80075dc:	e7ee      	b.n	80075bc <__libc_init_array+0xc>
 80075de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075e2:	4798      	blx	r3
 80075e4:	3501      	adds	r5, #1
 80075e6:	e7f2      	b.n	80075ce <__libc_init_array+0x1e>
 80075e8:	08007970 	.word	0x08007970
 80075ec:	08007970 	.word	0x08007970
 80075f0:	08007970 	.word	0x08007970
 80075f4:	08007974 	.word	0x08007974

080075f8 <__itoa>:
 80075f8:	1e93      	subs	r3, r2, #2
 80075fa:	2b22      	cmp	r3, #34	; 0x22
 80075fc:	b510      	push	{r4, lr}
 80075fe:	460c      	mov	r4, r1
 8007600:	d904      	bls.n	800760c <__itoa+0x14>
 8007602:	2300      	movs	r3, #0
 8007604:	700b      	strb	r3, [r1, #0]
 8007606:	461c      	mov	r4, r3
 8007608:	4620      	mov	r0, r4
 800760a:	bd10      	pop	{r4, pc}
 800760c:	2a0a      	cmp	r2, #10
 800760e:	d109      	bne.n	8007624 <__itoa+0x2c>
 8007610:	2800      	cmp	r0, #0
 8007612:	da07      	bge.n	8007624 <__itoa+0x2c>
 8007614:	232d      	movs	r3, #45	; 0x2d
 8007616:	700b      	strb	r3, [r1, #0]
 8007618:	4240      	negs	r0, r0
 800761a:	2101      	movs	r1, #1
 800761c:	4421      	add	r1, r4
 800761e:	f000 f8e1 	bl	80077e4 <__utoa>
 8007622:	e7f1      	b.n	8007608 <__itoa+0x10>
 8007624:	2100      	movs	r1, #0
 8007626:	e7f9      	b.n	800761c <__itoa+0x24>

08007628 <itoa>:
 8007628:	f7ff bfe6 	b.w	80075f8 <__itoa>

0800762c <malloc>:
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <malloc+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f000 b86d 	b.w	8007710 <_malloc_r>
 8007636:	bf00      	nop
 8007638:	20000180 	.word	0x20000180

0800763c <free>:
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <free+0xc>)
 800763e:	4601      	mov	r1, r0
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	f000 b817 	b.w	8007674 <_free_r>
 8007646:	bf00      	nop
 8007648:	20000180 	.word	0x20000180

0800764c <memcpy>:
 800764c:	b510      	push	{r4, lr}
 800764e:	1e43      	subs	r3, r0, #1
 8007650:	440a      	add	r2, r1
 8007652:	4291      	cmp	r1, r2
 8007654:	d100      	bne.n	8007658 <memcpy+0xc>
 8007656:	bd10      	pop	{r4, pc}
 8007658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007660:	e7f7      	b.n	8007652 <memcpy+0x6>

08007662 <memset>:
 8007662:	4402      	add	r2, r0
 8007664:	4603      	mov	r3, r0
 8007666:	4293      	cmp	r3, r2
 8007668:	d100      	bne.n	800766c <memset+0xa>
 800766a:	4770      	bx	lr
 800766c:	f803 1b01 	strb.w	r1, [r3], #1
 8007670:	e7f9      	b.n	8007666 <memset+0x4>
	...

08007674 <_free_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4605      	mov	r5, r0
 8007678:	2900      	cmp	r1, #0
 800767a:	d045      	beq.n	8007708 <_free_r+0x94>
 800767c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007680:	1f0c      	subs	r4, r1, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfb8      	it	lt
 8007686:	18e4      	addlt	r4, r4, r3
 8007688:	f000 f8ea 	bl	8007860 <__malloc_lock>
 800768c:	4a1f      	ldr	r2, [pc, #124]	; (800770c <_free_r+0x98>)
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	4610      	mov	r0, r2
 8007692:	b933      	cbnz	r3, 80076a2 <_free_r+0x2e>
 8007694:	6063      	str	r3, [r4, #4]
 8007696:	6014      	str	r4, [r2, #0]
 8007698:	4628      	mov	r0, r5
 800769a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800769e:	f000 b8e0 	b.w	8007862 <__malloc_unlock>
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	d90c      	bls.n	80076c0 <_free_r+0x4c>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	1862      	adds	r2, r4, r1
 80076aa:	4293      	cmp	r3, r2
 80076ac:	bf04      	itt	eq
 80076ae:	681a      	ldreq	r2, [r3, #0]
 80076b0:	685b      	ldreq	r3, [r3, #4]
 80076b2:	6063      	str	r3, [r4, #4]
 80076b4:	bf04      	itt	eq
 80076b6:	1852      	addeq	r2, r2, r1
 80076b8:	6022      	streq	r2, [r4, #0]
 80076ba:	6004      	str	r4, [r0, #0]
 80076bc:	e7ec      	b.n	8007698 <_free_r+0x24>
 80076be:	4613      	mov	r3, r2
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	b10a      	cbz	r2, 80076c8 <_free_r+0x54>
 80076c4:	42a2      	cmp	r2, r4
 80076c6:	d9fa      	bls.n	80076be <_free_r+0x4a>
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	1858      	adds	r0, r3, r1
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d10b      	bne.n	80076e8 <_free_r+0x74>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	4401      	add	r1, r0
 80076d4:	1858      	adds	r0, r3, r1
 80076d6:	4282      	cmp	r2, r0
 80076d8:	6019      	str	r1, [r3, #0]
 80076da:	d1dd      	bne.n	8007698 <_free_r+0x24>
 80076dc:	6810      	ldr	r0, [r2, #0]
 80076de:	6852      	ldr	r2, [r2, #4]
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	4401      	add	r1, r0
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e7d7      	b.n	8007698 <_free_r+0x24>
 80076e8:	d902      	bls.n	80076f0 <_free_r+0x7c>
 80076ea:	230c      	movs	r3, #12
 80076ec:	602b      	str	r3, [r5, #0]
 80076ee:	e7d3      	b.n	8007698 <_free_r+0x24>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	1821      	adds	r1, r4, r0
 80076f4:	428a      	cmp	r2, r1
 80076f6:	bf04      	itt	eq
 80076f8:	6811      	ldreq	r1, [r2, #0]
 80076fa:	6852      	ldreq	r2, [r2, #4]
 80076fc:	6062      	str	r2, [r4, #4]
 80076fe:	bf04      	itt	eq
 8007700:	1809      	addeq	r1, r1, r0
 8007702:	6021      	streq	r1, [r4, #0]
 8007704:	605c      	str	r4, [r3, #4]
 8007706:	e7c7      	b.n	8007698 <_free_r+0x24>
 8007708:	bd38      	pop	{r3, r4, r5, pc}
 800770a:	bf00      	nop
 800770c:	20000208 	.word	0x20000208

08007710 <_malloc_r>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	1ccd      	adds	r5, r1, #3
 8007714:	f025 0503 	bic.w	r5, r5, #3
 8007718:	3508      	adds	r5, #8
 800771a:	2d0c      	cmp	r5, #12
 800771c:	bf38      	it	cc
 800771e:	250c      	movcc	r5, #12
 8007720:	2d00      	cmp	r5, #0
 8007722:	4606      	mov	r6, r0
 8007724:	db01      	blt.n	800772a <_malloc_r+0x1a>
 8007726:	42a9      	cmp	r1, r5
 8007728:	d903      	bls.n	8007732 <_malloc_r+0x22>
 800772a:	230c      	movs	r3, #12
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	2000      	movs	r0, #0
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	f000 f895 	bl	8007860 <__malloc_lock>
 8007736:	4a21      	ldr	r2, [pc, #132]	; (80077bc <_malloc_r+0xac>)
 8007738:	6814      	ldr	r4, [r2, #0]
 800773a:	4621      	mov	r1, r4
 800773c:	b991      	cbnz	r1, 8007764 <_malloc_r+0x54>
 800773e:	4c20      	ldr	r4, [pc, #128]	; (80077c0 <_malloc_r+0xb0>)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	b91b      	cbnz	r3, 800774c <_malloc_r+0x3c>
 8007744:	4630      	mov	r0, r6
 8007746:	f000 f83d 	bl	80077c4 <_sbrk_r>
 800774a:	6020      	str	r0, [r4, #0]
 800774c:	4629      	mov	r1, r5
 800774e:	4630      	mov	r0, r6
 8007750:	f000 f838 	bl	80077c4 <_sbrk_r>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d124      	bne.n	80077a2 <_malloc_r+0x92>
 8007758:	230c      	movs	r3, #12
 800775a:	6033      	str	r3, [r6, #0]
 800775c:	4630      	mov	r0, r6
 800775e:	f000 f880 	bl	8007862 <__malloc_unlock>
 8007762:	e7e4      	b.n	800772e <_malloc_r+0x1e>
 8007764:	680b      	ldr	r3, [r1, #0]
 8007766:	1b5b      	subs	r3, r3, r5
 8007768:	d418      	bmi.n	800779c <_malloc_r+0x8c>
 800776a:	2b0b      	cmp	r3, #11
 800776c:	d90f      	bls.n	800778e <_malloc_r+0x7e>
 800776e:	600b      	str	r3, [r1, #0]
 8007770:	50cd      	str	r5, [r1, r3]
 8007772:	18cc      	adds	r4, r1, r3
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f874 	bl	8007862 <__malloc_unlock>
 800777a:	f104 000b 	add.w	r0, r4, #11
 800777e:	1d23      	adds	r3, r4, #4
 8007780:	f020 0007 	bic.w	r0, r0, #7
 8007784:	1ac3      	subs	r3, r0, r3
 8007786:	d0d3      	beq.n	8007730 <_malloc_r+0x20>
 8007788:	425a      	negs	r2, r3
 800778a:	50e2      	str	r2, [r4, r3]
 800778c:	e7d0      	b.n	8007730 <_malloc_r+0x20>
 800778e:	428c      	cmp	r4, r1
 8007790:	684b      	ldr	r3, [r1, #4]
 8007792:	bf16      	itet	ne
 8007794:	6063      	strne	r3, [r4, #4]
 8007796:	6013      	streq	r3, [r2, #0]
 8007798:	460c      	movne	r4, r1
 800779a:	e7eb      	b.n	8007774 <_malloc_r+0x64>
 800779c:	460c      	mov	r4, r1
 800779e:	6849      	ldr	r1, [r1, #4]
 80077a0:	e7cc      	b.n	800773c <_malloc_r+0x2c>
 80077a2:	1cc4      	adds	r4, r0, #3
 80077a4:	f024 0403 	bic.w	r4, r4, #3
 80077a8:	42a0      	cmp	r0, r4
 80077aa:	d005      	beq.n	80077b8 <_malloc_r+0xa8>
 80077ac:	1a21      	subs	r1, r4, r0
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 f808 	bl	80077c4 <_sbrk_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d0cf      	beq.n	8007758 <_malloc_r+0x48>
 80077b8:	6025      	str	r5, [r4, #0]
 80077ba:	e7db      	b.n	8007774 <_malloc_r+0x64>
 80077bc:	20000208 	.word	0x20000208
 80077c0:	2000020c 	.word	0x2000020c

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4c06      	ldr	r4, [pc, #24]	; (80077e0 <_sbrk_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4605      	mov	r5, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	f7f9 f918 	bl	8000a04 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20001b6c 	.word	0x20001b6c

080077e4 <__utoa>:
 80077e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e6:	4b1d      	ldr	r3, [pc, #116]	; (800785c <__utoa+0x78>)
 80077e8:	b08b      	sub	sp, #44	; 0x2c
 80077ea:	4605      	mov	r5, r0
 80077ec:	460c      	mov	r4, r1
 80077ee:	466e      	mov	r6, sp
 80077f0:	f103 0c20 	add.w	ip, r3, #32
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	6859      	ldr	r1, [r3, #4]
 80077f8:	4637      	mov	r7, r6
 80077fa:	c703      	stmia	r7!, {r0, r1}
 80077fc:	3308      	adds	r3, #8
 80077fe:	4563      	cmp	r3, ip
 8007800:	463e      	mov	r6, r7
 8007802:	d1f7      	bne.n	80077f4 <__utoa+0x10>
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	791b      	ldrb	r3, [r3, #4]
 8007808:	713b      	strb	r3, [r7, #4]
 800780a:	1e93      	subs	r3, r2, #2
 800780c:	2b22      	cmp	r3, #34	; 0x22
 800780e:	6038      	str	r0, [r7, #0]
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	d904      	bls.n	8007820 <__utoa+0x3c>
 8007816:	7023      	strb	r3, [r4, #0]
 8007818:	461c      	mov	r4, r3
 800781a:	4620      	mov	r0, r4
 800781c:	b00b      	add	sp, #44	; 0x2c
 800781e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007820:	1e66      	subs	r6, r4, #1
 8007822:	fbb5 f0f2 	udiv	r0, r5, r2
 8007826:	af0a      	add	r7, sp, #40	; 0x28
 8007828:	fb02 5510 	mls	r5, r2, r0, r5
 800782c:	443d      	add	r5, r7
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007834:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007838:	4605      	mov	r5, r0
 800783a:	b968      	cbnz	r0, 8007858 <__utoa+0x74>
 800783c:	5460      	strb	r0, [r4, r1]
 800783e:	4423      	add	r3, r4
 8007840:	4622      	mov	r2, r4
 8007842:	1b19      	subs	r1, r3, r4
 8007844:	1b10      	subs	r0, r2, r4
 8007846:	4281      	cmp	r1, r0
 8007848:	dde7      	ble.n	800781a <__utoa+0x36>
 800784a:	7811      	ldrb	r1, [r2, #0]
 800784c:	7818      	ldrb	r0, [r3, #0]
 800784e:	f802 0b01 	strb.w	r0, [r2], #1
 8007852:	f803 1901 	strb.w	r1, [r3], #-1
 8007856:	e7f4      	b.n	8007842 <__utoa+0x5e>
 8007858:	460b      	mov	r3, r1
 800785a:	e7e2      	b.n	8007822 <__utoa+0x3e>
 800785c:	08007940 	.word	0x08007940

08007860 <__malloc_lock>:
 8007860:	4770      	bx	lr

08007862 <__malloc_unlock>:
 8007862:	4770      	bx	lr

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
