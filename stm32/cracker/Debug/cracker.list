
cracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000198c  200001e4  0800820c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800820c  00021b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e7c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000346a  00000000  00000000  00039090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001278  00000000  00000000  0003c500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003d778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245fa  00000000  00000000  0003e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001046d  00000000  00000000  00062e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce55b  00000000  00000000  000732cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014182a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  001418a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ea8 	.word	0x08007ea8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08007ea8 	.word	0x08007ea8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <read_and_reset_timer>:
#include "cracker.h"

/*Try not to write blocking functions.*/

uint32_t read_and_reset_timer(TIM_HandleTypeDef *htim)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// Read timer only if it is stopped. If it isn't stopped stop and reset timer.
	if(htim->Instance->CCR1 != 0x00)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d009      	beq.n	80004ee <read_and_reset_timer+0x26>
	{
		htim->Instance->CCR1 = 0;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
		htim->Instance->CNT = 0x00000000;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2200      	movs	r2, #0
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
		return 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e008      	b.n	8000500 <read_and_reset_timer+0x38>
	}

	uint32_t timer_count;
	timer_count = htim->Instance->CNT;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f4:	60fb      	str	r3, [r7, #12]

	//Reset the timer counter;
	htim->Instance->CNT = 0x00000000;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
	return timer_count;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <clean_rx_buffer>:

void clean_rx_buffer(UART_HandleTypeDef *huart){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	/*Cleans (reads) the entire RX buffer*/
	uint8_t recieveBuffer[8];
	HAL_UART_Receive(huart, recieveBuffer, 8, RX_TIMEOUT);
 8000514:	f107 0108 	add.w	r1, r7, #8
 8000518:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800051c:	2208      	movs	r2, #8
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f003 fac4 	bl	8003aac <HAL_UART_Receive>
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <transmit_recieve_byte>:

uint32_t transmit_recieve_byte(UART_HandleTypeDef *huart, uint8_t transmitedByte, uint8_t expectedRxByte){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
 8000538:	4613      	mov	r3, r2
 800053a:	70bb      	strb	r3, [r7, #2]
	/* Transmits a uart byte and checks if the response matches the desired one.*/
	uint8_t transmitBuffer[4];
	uint8_t recieveBuffer[4];

	clean_rx_buffer(huart);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ffe5 	bl	800050c <clean_rx_buffer>

	transmitBuffer[0] = transmitedByte;
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	733b      	strb	r3, [r7, #12]
	if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 8000546:	f107 010c 	add.w	r1, r7, #12
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	2201      	movs	r2, #1
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f003 fa13 	bl	800397a <HAL_UART_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <transmit_recieve_byte+0x32>
		return TRANSMIT_ERR;
 800055a:	2301      	movs	r3, #1
 800055c:	e016      	b.n	800058c <transmit_recieve_byte+0x60>
	}
	if(HAL_UART_Receive(huart, recieveBuffer, 1, RX_TIMEOUT) != HAL_OK){
 800055e:	f107 0108 	add.w	r1, r7, #8
 8000562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000566:	2201      	movs	r2, #1
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f003 fa9f 	bl	8003aac <HAL_UART_Receive>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <transmit_recieve_byte+0x4c>
		return NO_RESPONSE;
 8000574:	2302      	movs	r3, #2
 8000576:	e009      	b.n	800058c <transmit_recieve_byte+0x60>
	}
	if(recieveBuffer[0] != expectedRxByte)
 8000578:	7a3b      	ldrb	r3, [r7, #8]
 800057a:	78ba      	ldrb	r2, [r7, #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d001      	beq.n	8000584 <transmit_recieve_byte+0x58>
	{
		return INCORRECT_TARGET_RESPONSE;
 8000580:	2303      	movs	r3, #3
 8000582:	e003      	b.n	800058c <transmit_recieve_byte+0x60>
	}

	clean_rx_buffer(huart);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ffc1 	bl	800050c <clean_rx_buffer>

	return RX_TX_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <init_target_connection>:

uint32_t init_target_connection(UART_HandleTypeDef *huart){
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	/* This functions initializes the uart connection to target device. */
	uint32_t tx_rx_status;
	uint8_t transmitBuffer[4];

	// First set the uart peripheral baud rate to 9600.
	huart->Init.BaudRate = 9600;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a2:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(huart) != HAL_OK){
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f003 f99b 	bl	80038e0 <HAL_UART_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <init_target_connection+0x20>
	  return HW_BAUDRATE_CHANGE_ERR;
 80005b0:	2306      	movs	r3, #6
 80005b2:	e031      	b.n	8000618 <init_target_connection+0x84>
	}

	// Send the first 16x 0x00 bytes
	int i;
	for(i =0; i < 16; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e013      	b.n	80005e2 <init_target_connection+0x4e>
		transmitBuffer[0] = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	733b      	strb	r3, [r7, #12]
		if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	2364      	movs	r3, #100	; 0x64
 80005c4:	2201      	movs	r2, #1
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f003 f9d7 	bl	800397a <HAL_UART_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <init_target_connection+0x42>
			return TRANSMIT_ERR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e020      	b.n	8000618 <init_target_connection+0x84>
		}
		// Wait the required 20ms
		HAL_Delay(20);
 80005d6:	2014      	movs	r0, #20
 80005d8:	f000 fd92 	bl	8001100 <HAL_Delay>
	for(i =0; i < 16; i++){
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3301      	adds	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	dde8      	ble.n	80005ba <init_target_connection+0x26>
	}

	if(HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
 80005e8:	f107 010c 	add.w	r1, r7, #12
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	2201      	movs	r2, #1
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f003 f9c2 	bl	800397a <HAL_UART_Transmit>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <init_target_connection+0x6c>
		return TRANSMIT_ERR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e00b      	b.n	8000618 <init_target_connection+0x84>
	}

	// Check if the baud rate switch was successful by asking target for bootloader version.
	// Bootloader version is returned as a string e.g. "VER.1.48", so the first responded byte should be 'V' or hex 0x56.
	tx_rx_status = transmit_recieve_byte(huart, 0xFB, 0x56);
 8000600:	2256      	movs	r2, #86	; 0x56
 8000602:	21fb      	movs	r1, #251	; 0xfb
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff91 	bl	800052c <transmit_recieve_byte>
 800060a:	6138      	str	r0, [r7, #16]
	if(tx_rx_status != RX_TX_OK){
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <init_target_connection+0x82>
		return tx_rx_status;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	e000      	b.n	8000618 <init_target_connection+0x84>
	}
	return CON_INIT_OK;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <set_baudrate>:

uint32_t set_baudrate(UART_HandleTypeDef *huart, uint32_t baudrate){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	/*Set the desired baud rate.*/
	uint32_t tx_rx_status;
	// Initiate the baud rate change
	tx_rx_status = transmit_recieve_byte(huart, 0xB0, 0xB0);
 800062a:	22b0      	movs	r2, #176	; 0xb0
 800062c:	21b0      	movs	r1, #176	; 0xb0
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff7c 	bl	800052c <transmit_recieve_byte>
 8000634:	60f8      	str	r0, [r7, #12]
	if(tx_rx_status != RX_TX_OK){
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <set_baudrate+0x20>
		return tx_rx_status;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	e055      	b.n	80006ec <set_baudrate+0xcc>
	}

	switch(baudrate){
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000646:	d01e      	beq.n	8000686 <set_baudrate+0x66>
 8000648:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800064c:	d806      	bhi.n	800065c <set_baudrate+0x3c>
 800064e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000652:	d00a      	beq.n	800066a <set_baudrate+0x4a>
 8000654:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000658:	d00e      	beq.n	8000678 <set_baudrate+0x58>
 800065a:	e029      	b.n	80006b0 <set_baudrate+0x90>
 800065c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000660:	d018      	beq.n	8000694 <set_baudrate+0x74>
 8000662:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000666:	d01c      	beq.n	80006a2 <set_baudrate+0x82>
 8000668:	e022      	b.n	80006b0 <set_baudrate+0x90>
		case 9600:
			tx_rx_status = transmit_recieve_byte(huart, 0xB0, 0xB0);
 800066a:	22b0      	movs	r2, #176	; 0xb0
 800066c:	21b0      	movs	r1, #176	; 0xb0
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff5c 	bl	800052c <transmit_recieve_byte>
 8000674:	60f8      	str	r0, [r7, #12]
			break;
 8000676:	e01d      	b.n	80006b4 <set_baudrate+0x94>

		case 19200:
			tx_rx_status = transmit_recieve_byte(huart, 0xB1, 0xB1);
 8000678:	22b1      	movs	r2, #177	; 0xb1
 800067a:	21b1      	movs	r1, #177	; 0xb1
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ff55 	bl	800052c <transmit_recieve_byte>
 8000682:	60f8      	str	r0, [r7, #12]
			break;
 8000684:	e016      	b.n	80006b4 <set_baudrate+0x94>

		case 38400:
			tx_rx_status = transmit_recieve_byte(huart, 0xB2, 0xB2);
 8000686:	22b2      	movs	r2, #178	; 0xb2
 8000688:	21b2      	movs	r1, #178	; 0xb2
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff4e 	bl	800052c <transmit_recieve_byte>
 8000690:	60f8      	str	r0, [r7, #12]
			break;
 8000692:	e00f      	b.n	80006b4 <set_baudrate+0x94>

		case 57600:
			tx_rx_status = transmit_recieve_byte(huart, 0xB3, 0xB3);
 8000694:	22b3      	movs	r2, #179	; 0xb3
 8000696:	21b3      	movs	r1, #179	; 0xb3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff47 	bl	800052c <transmit_recieve_byte>
 800069e:	60f8      	str	r0, [r7, #12]
			break;
 80006a0:	e008      	b.n	80006b4 <set_baudrate+0x94>

		case 115200:
			tx_rx_status = transmit_recieve_byte(huart, 0xB4, 0xB4);
 80006a2:	22b4      	movs	r2, #180	; 0xb4
 80006a4:	21b4      	movs	r1, #180	; 0xb4
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff40 	bl	800052c <transmit_recieve_byte>
 80006ac:	60f8      	str	r0, [r7, #12]
			break;
 80006ae:	e001      	b.n	80006b4 <set_baudrate+0x94>

		default:
			return INCORRECT_BAUDRATE;
 80006b0:	2305      	movs	r3, #5
 80006b2:	e01b      	b.n	80006ec <set_baudrate+0xcc>
	}

	// Check if baud rate change handshake was successful.
	if(tx_rx_status != RX_TX_OK){
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <set_baudrate+0x9e>
		return BAURATE_HANDSHAKE_FAILED;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e016      	b.n	80006ec <set_baudrate+0xcc>
	}
	// Now change the uart baud rate.
	huart->Init.BaudRate = baudrate;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(huart) != HAL_OK){
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f003 f90b 	bl	80038e0 <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <set_baudrate+0xb4>
	  return HW_BAUDRATE_CHANGE_ERR;
 80006d0:	2306      	movs	r3, #6
 80006d2:	e00b      	b.n	80006ec <set_baudrate+0xcc>
	}

	// Check if the baud rate switch was successful by asking target for bootloader version.
	// Bootloader version is returned as a string e.g. "VER.1.48", so the first responded byte should be 'V' or hex 0x56.
	tx_rx_status = transmit_recieve_byte(huart, 0xFB, 0x56);
 80006d4:	2256      	movs	r2, #86	; 0x56
 80006d6:	21fb      	movs	r1, #251	; 0xfb
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff27 	bl	800052c <transmit_recieve_byte>
 80006de:	60f8      	str	r0, [r7, #12]
	if(tx_rx_status != RX_TX_OK){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <set_baudrate+0xca>
		return ERROR_AFTER_BAUDRATE_SWITCH;
 80006e6:	2307      	movs	r3, #7
 80006e8:	e000      	b.n	80006ec <set_baudrate+0xcc>
	}

	return BAUDRATE_CHANGE_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <target_reset>:

void target_reset(GPIO_TypeDef *port, uint16_t reset_pin, uint16_t mode_pin){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	807b      	strh	r3, [r7, #2]
 8000700:	4613      	mov	r3, r2
 8000702:	803b      	strh	r3, [r7, #0]
	/*Reset the target and pull mode pin to low.*/
	HAL_GPIO_WritePin(port, mode_pin, GPIO_PIN_RESET);
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 ffde 	bl	80016cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000714:	f000 fcf4 	bl	8001100 <HAL_Delay>
	HAL_GPIO_WritePin(port, reset_pin, GPIO_PIN_RESET);
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 ffd4 	bl	80016cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f000 fcea 	bl	8001100 <HAL_Delay>
	HAL_GPIO_WritePin(port, reset_pin, GPIO_PIN_SET);
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 ffca 	bl	80016cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073c:	f000 fce0 	bl	8001100 <HAL_Delay>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <send_one_key_byte>:

void send_one_key_byte(uint8_t byte, uint8_t byte_pos,  UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim){
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	60ba      	str	r2, [r7, #8]
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4603      	mov	r3, r0
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	460b      	mov	r3, r1
 8000758:	73bb      	strb	r3, [r7, #14]
	// byte_pos max value is 6!
	uint8_t transmitBuffer[2];

	//Initial comm part
	transmitBuffer[0] = 0x50;
 800075a:	2350      	movs	r3, #80	; 0x50
 800075c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	transmitBuffer[1] = 0x70;
 8000760:	2370      	movs	r3, #112	; 0x70
 8000762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_UART_Transmit(huart, transmitBuffer, 2, TX_TIMEOUT);
 8000766:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	2202      	movs	r2, #2
 800076e:	68b8      	ldr	r0, [r7, #8]
 8000770:	f003 f903 	bl	800397a <HAL_UART_Transmit>
	HAL_Delay(100);
 8000774:	2064      	movs	r0, #100	; 0x64
 8000776:	f000 fcc3 	bl	8001100 <HAL_Delay>
	transmitBuffer[0] = 0x70;
 800077a:	2370      	movs	r3, #112	; 0x70
 800077c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	HAL_UART_Transmit(huart, transmitBuffer, 1, TX_TIMEOUT);
 8000780:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	2201      	movs	r2, #1
 8000788:	68b8      	ldr	r0, [r7, #8]
 800078a:	f003 f8f6 	bl	800397a <HAL_UART_Transmit>
	HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fcb6 	bl	8001100 <HAL_Delay>

	uint8_t header[] = {0xf5, 0xdf, 0xff, 0x00, 0x07};
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <send_one_key_byte+0xb8>)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079e:	6018      	str	r0, [r3, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(huart, header, sizeof(header), TX_TIMEOUT);
 80007a4:	f107 011c 	add.w	r1, r7, #28
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2205      	movs	r2, #5
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f003 f8e4 	bl	800397a <HAL_UART_Transmit>

	HAL_Delay(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 fca4 	bl	8001100 <HAL_Delay>
	// Reset the timer
	read_and_reset_timer(htim);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fe85 	bl	80004c8 <read_and_reset_timer>

	uint8_t key[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	2370      	movs	r3, #112	; 0x70
 80007ca:	76fb      	strb	r3, [r7, #27]
	key[byte_pos] = byte;
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007d2:	4413      	add	r3, r2
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	f803 2c14 	strb.w	r2, [r3, #-20]
	HAL_UART_Transmit(huart, key, sizeof(key), TX_TIMEOUT);
 80007da:	f107 0114 	add.w	r1, r7, #20
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2208      	movs	r2, #8
 80007e2:	68b8      	ldr	r0, [r7, #8]
 80007e4:	f003 f8c9 	bl	800397a <HAL_UART_Transmit>
	HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	; 0x64
 80007ea:	f000 fc89 	bl	8001100 <HAL_Delay>

	HAL_Delay(500);
 80007ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f2:	f000 fc85 	bl	8001100 <HAL_Delay>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	08007ec0 	.word	0x08007ec0

08000804 <usb_uart_print>:
/* USER CODE BEGIN 0 */

/*Please please please don't use print functions for debugging. Use print functions only for
 *status update, that will be used once the program will be in a state to run standalone.*/

void usb_uart_print(uint8_t text[], uint32_t text_size){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	/*7 bit ascii is retarded. - Terry Davis.*/
	// Don't do sizeof dynamic arrays as function arguments. Learned that the hard way.
    CDC_Transmit_FS((uint8_t*)text, text_size);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b29b      	uxth	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f006 fda5 	bl	8007364 <CDC_Transmit_FS>
    HAL_Delay(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 fc70 	bl	8001100 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <send_1byte>:
    return result;
}


uint32_t send_1byte(uint8_t byte, uint8_t byte_pos)
{
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]

	uint32_t timer_ticks;
	uint32_t returncode;
	// Reset target first
	target_reset(GPIOE, target_reset_Pin, target_mode_Pin);
 8000838:	2240      	movs	r2, #64	; 0x40
 800083a:	2120      	movs	r1, #32
 800083c:	4831      	ldr	r0, [pc, #196]	; (8000904 <send_1byte+0xdc>)
 800083e:	f7ff ff59 	bl	80006f4 <target_reset>

	// Initiate the target communication
	returncode = init_target_connection(&huart1);
 8000842:	4831      	ldr	r0, [pc, #196]	; (8000908 <send_1byte+0xe0>)
 8000844:	f7ff fea6 	bl	8000594 <init_target_connection>
 8000848:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(returncode != CON_INIT_OK)
 800084a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01c      	beq.n	800088a <send_1byte+0x62>
	{
		char errorcodeNumberStr[2];
		itoa(returncode, errorcodeNumberStr, 10);
 8000850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000852:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000856:	220a      	movs	r2, #10
 8000858:	4618      	mov	r0, r3
 800085a:	f007 fa07 	bl	8007c6c <itoa>
		uint8_t init_error_text[] = "Error while initializing target communication. Error number is: ";
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <send_1byte+0xe4>)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4611      	mov	r1, r2
 8000866:	2241      	movs	r2, #65	; 0x41
 8000868:	4618      	mov	r0, r3
 800086a:	f007 fa11 	bl	8007c90 <memcpy>
		usb_uart_print(init_error_text, sizeof(init_error_text));
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2141      	movs	r1, #65	; 0x41
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffc5 	bl	8000804 <usb_uart_print>
		usb_uart_print((uint8_t *)errorcodeNumberStr, sizeof(errorcodeNumberStr));
 800087a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffbf 	bl	8000804 <usb_uart_print>
		return 0;
 8000886:	2300      	movs	r3, #0
 8000888:	e038      	b.n	80008fc <send_1byte+0xd4>
	}

	returncode = set_baudrate(&huart1, 9600);
 800088a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <send_1byte+0xe0>)
 8000890:	f7ff fec6 	bl	8000620 <set_baudrate>
 8000894:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(returncode != BAUDRATE_CHANGE_OK)
 8000896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000898:	2b00      	cmp	r3, #0
 800089a:	d024      	beq.n	80008e6 <send_1byte+0xbe>
	{
		char errorcodeNumberStr[2];
		itoa(returncode, errorcodeNumberStr, 10);
 800089c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800089e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80008a2:	220a      	movs	r2, #10
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 f9e1 	bl	8007c6c <itoa>
		uint8_t baudrate_error_text[] = "Error while switching baud rate. Error number is: ";
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <send_1byte+0xe8>)
 80008ac:	f107 040c 	add.w	r4, r7, #12
 80008b0:	461d      	mov	r5, r3
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	8022      	strh	r2, [r4, #0]
 80008c4:	3402      	adds	r4, #2
 80008c6:	0c1b      	lsrs	r3, r3, #16
 80008c8:	7023      	strb	r3, [r4, #0]
		usb_uart_print(baudrate_error_text, sizeof(baudrate_error_text));
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2133      	movs	r1, #51	; 0x33
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff97 	bl	8000804 <usb_uart_print>
		usb_uart_print((uint8_t *)errorcodeNumberStr, sizeof(errorcodeNumberStr));
 80008d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008da:	2102      	movs	r1, #2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff91 	bl	8000804 <usb_uart_print>
		return 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e00a      	b.n	80008fc <send_1byte+0xd4>
	}

	send_one_key_byte(byte, byte_pos, &huart1, &htim2);
 80008e6:	79b9      	ldrb	r1, [r7, #6]
 80008e8:	79f8      	ldrb	r0, [r7, #7]
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <send_1byte+0xec>)
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <send_1byte+0xe0>)
 80008ee:	f7ff ff2b 	bl	8000748 <send_one_key_byte>
	timer_ticks = read_and_reset_timer(&htim2);
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <send_1byte+0xec>)
 80008f4:	f7ff fde8 	bl	80004c8 <read_and_reset_timer>
 80008f8:	65b8      	str	r0, [r7, #88]	; 0x58

	return timer_ticks;
 80008fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3760      	adds	r7, #96	; 0x60
 8000900:	46bd      	mov	sp, r7
 8000902:	bdb0      	pop	{r4, r5, r7, pc}
 8000904:	40021000 	.word	0x40021000
 8000908:	20000210 	.word	0x20000210
 800090c:	08007ec8 	.word	0x08007ec8
 8000910:	08007f0c 	.word	0x08007f0c
 8000914:	20000250 	.word	0x20000250

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fb7d 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f891 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f000 f96f 	bl	8000c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 800092a:	f000 f8f7 	bl	8000b1c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800092e:	f000 f941 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000932:	f006 fc59 	bl	80071e8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093a:	f000 fbe1 	bl	8001100 <HAL_Delay>
	uint8_t initial_text[] = "Press key0 to start cracker.\n";
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <main+0x11c>)
 8000940:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800094e:	c407      	stmia	r4!, {r0, r1, r2}
 8000950:	8023      	strh	r3, [r4, #0]
	usb_uart_print(initial_text, sizeof(initial_text));
 8000952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000956:	211e      	movs	r1, #30
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff53 	bl	8000804 <usb_uart_print>
	//Wait for start button press (key0 on board).
	while(HAL_GPIO_ReadPin(start_button_GPIO_Port, start_button_Pin));
 800095e:	bf00      	nop
 8000960:	2110      	movs	r1, #16
 8000962:	4835      	ldr	r0, [pc, #212]	; (8000a38 <main+0x120>)
 8000964:	f000 fe9a 	bl	800169c <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f8      	bne.n	8000960 <main+0x48>

	uint8_t start_text[] = "Cracker started.\n";
 800096e:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <main+0x124>)
 8000970:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000974:	461d      	mov	r5, r3
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	682b      	ldr	r3, [r5, #0]
 800097c:	8023      	strh	r3, [r4, #0]
	usb_uart_print(start_text, sizeof(start_text));
 800097e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000982:	2112      	movs	r1, #18
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff3d 	bl	8000804 <usb_uart_print>
	HAL_Delay(500);
 800098a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098e:	f000 fbb7 	bl	8001100 <HAL_Delay>

	int i;
	for(i = 0; i < 256; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000996:	e049      	b.n	8000a2c <main+0x114>
	{
		uint32_t timer_ticks;
		timer_ticks = send_1byte(i, 0);
 8000998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff42 	bl	8000828 <send_1byte>
 80009a4:	66b8      	str	r0, [r7, #104]	; 0x68



		uint8_t time_text[] = "Ticks for Byte  ";
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <main+0x128>)
 80009a8:	f107 0420 	add.w	r4, r7, #32
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	7023      	strb	r3, [r4, #0]
		usb_uart_print(time_text, sizeof(time_text));
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	2111      	movs	r1, #17
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff21 	bl	8000804 <usb_uart_print>

		char byte_no[3];
		itoa(i, byte_no, 10);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	220a      	movs	r2, #10
 80009c8:	4619      	mov	r1, r3
 80009ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80009cc:	f007 f94e 	bl	8007c6c <itoa>
		usb_uart_print((uint8_t *)byte_no, sizeof(byte_no));
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2103      	movs	r1, #3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff14 	bl	8000804 <usb_uart_print>

		uint8_t time_text2[] = " are: ";
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <main+0x12c>)
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e6:	6018      	str	r0, [r3, #0]
 80009e8:	3304      	adds	r3, #4
 80009ea:	8019      	strh	r1, [r3, #0]
 80009ec:	3302      	adds	r3, #2
 80009ee:	0c0a      	lsrs	r2, r1, #16
 80009f0:	701a      	strb	r2, [r3, #0]
		usb_uart_print(time_text2, sizeof(time_text2));
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2107      	movs	r1, #7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff03 	bl	8000804 <usb_uart_print>

		char timer_ticks_str[10];
		itoa(timer_ticks, timer_ticks_str, 10);
 80009fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a00:	f107 0108 	add.w	r1, r7, #8
 8000a04:	220a      	movs	r2, #10
 8000a06:	4618      	mov	r0, r3
 8000a08:	f007 f930 	bl	8007c6c <itoa>
		usb_uart_print((uint8_t *)timer_ticks_str, sizeof(timer_ticks_str));
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	210a      	movs	r1, #10
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fef6 	bl	8000804 <usb_uart_print>

		uint8_t time_text3[] = "\n";
 8000a18:	230a      	movs	r3, #10
 8000a1a:	80bb      	strh	r3, [r7, #4]
		usb_uart_print(time_text3, sizeof(time_text3));
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff feef 	bl	8000804 <usb_uart_print>
	for(i = 0; i < 256; i++)
 8000a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a28:	3301      	adds	r3, #1
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	ddb2      	ble.n	8000998 <main+0x80>
  {
 8000a32:	e780      	b.n	8000936 <main+0x1e>
 8000a34:	08007f40 	.word	0x08007f40
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	08007f60 	.word	0x08007f60
 8000a40:	08007f74 	.word	0x08007f74
 8000a44:	08007f88 	.word	0x08007f88

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 f925 	bl	8007ca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000abc:	23a8      	movs	r3, #168	; 0xa8
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 0320 	add.w	r3, r7, #32
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 ffbd 	bl	8002a4c <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad8:	f000 f92c 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2105      	movs	r1, #5
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fa16 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b06:	f000 f915 	bl	8000d34 <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b62:	f002 fbd5 	bl	8003310 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b6c:	f000 f8e2 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b7e:	f002 fc41 	bl	8003404 <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b88:	f000 f8d4 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM2_Init+0x94>)
 8000b9a:	f002 fe25 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f8c6 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000250 	.word	0x20000250

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART1_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART1_UART_Init+0x4c>)
 8000bec:	f002 fe78 	bl	80038e0 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f89d 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000210 	.word	0x20000210
 8000c04:	40011000 	.word	0x40011000

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a38      	ldr	r2, [pc, #224]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a31      	ldr	r2, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_GPIO_Init+0x11c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(target_reset_GPIO_Port, target_reset_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	4825      	ldr	r0, [pc, #148]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000c94:	f000 fd1a 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(target_mode_GPIO_Port, target_mode_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000c9e:	f000 fd15 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : start_button_Pin */
  GPIO_InitStruct.Pin = start_button_Pin;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(start_button_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000cb6:	f000 fb57 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : target_reset_Pin */
  GPIO_InitStruct.Pin = target_reset_Pin;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cbe:	2311      	movs	r3, #17
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(target_reset_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000cd2:	f000 fb49 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : target_mode_Pin */
  GPIO_InitStruct.Pin = target_mode_Pin;
 8000cd6:	2340      	movs	r3, #64	; 0x40
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(target_mode_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <MX_GPIO_Init+0x120>)
 8000cee:	f000 fb3b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : tx_trigger_Pin rx_trigger_Pin */
  GPIO_InitStruct.Pin = tx_trigger_Pin|rx_trigger_Pin;
 8000cf2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_GPIO_Init+0x124>)
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <MX_GPIO_Init+0x128>)
 8000d08:	f000 fb2e 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2017      	movs	r0, #23
 8000d12:	f000 faf2 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d16:	2017      	movs	r0, #23
 8000d18:	f000 fb0b 	bl	8001332 <HAL_NVIC_EnableIRQ>

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	10210000 	.word	0x10210000
 8000d30:	40020800 	.word	0x40020800

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <Error_Handler+0x6>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d9c:	d10d      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12c      	bne.n	8000e48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0310 	orr.w	r3, r3, #16
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_UART_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_UART_MspInit+0x8c>)
 8000e44:	f000 fa90 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f90a 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_7)){
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <EXTI9_5_IRQHandler+0x64>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d017      	beq.n	8000ef0 <EXTI9_5_IRQHandler+0x40>
	  // Timer must be stopped and reset to start again.
	  if((htim2.Instance->CCR1 == 0x00) & (htim2.Instance->CNT == 0x00))
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <EXTI9_5_IRQHandler+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <EXTI9_5_IRQHandler+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <EXTI9_5_IRQHandler+0x50>
	  {
		  HAL_TIM_Base_Start(&htim2);
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <EXTI9_5_IRQHandler+0x68>)
 8000eea:	f002 fa3c 	bl	8003366 <HAL_TIM_Base_Start>
 8000eee:	e007      	b.n	8000f00 <EXTI9_5_IRQHandler+0x50>

  }
  else
  {
	  // Don't do anything if timer is stopped.
	  if(htim2.Instance->CCR1 != 0x00)
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <EXTI9_5_IRQHandler+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <EXTI9_5_IRQHandler+0x50>
	  {
		  HAL_TIM_Base_Stop(&htim2);
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <EXTI9_5_IRQHandler+0x68>)
 8000efc:	f002 fa57 	bl	80033ae <HAL_TIM_Base_Stop>
	  }

  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f00:	2080      	movs	r0, #128	; 0x80
 8000f02:	f000 fbfd 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f0a:	f000 fbf9 	bl	8001700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40013c00 	.word	0x40013c00
 8000f18:	20000250 	.word	0x20000250

08000f1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <OTG_FS_IRQHandler+0x10>)
 8000f22:	f000 fd60 	bl	80019e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20001764 	.word	0x20001764

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f006 fe42 	bl	8007be8 <__errno>
 8000f64:	4602      	mov	r2, r0
 8000f66:	230c      	movs	r3, #12
 8000f68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20020000 	.word	0x20020000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	20000200 	.word	0x20000200
 8000f98:	20001b70 	.word	0x20001b70

08000f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <SystemInit+0x28>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <SystemInit+0x28>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SystemInit+0x28>)
 8000fb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fce:	e003      	b.n	8000fd8 <LoopCopyDataInit>

08000fd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fd6:	3104      	adds	r1, #4

08000fd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe0:	d3f6      	bcc.n	8000fd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fe4:	e002      	b.n	8000fec <LoopFillZerobss>

08000fe6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fe6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe8:	f842 3b04 	str.w	r3, [r2], #4

08000fec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff0:	d3f9      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd3 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f006 fdfd 	bl	8007bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fc8d 	bl	8000918 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001004:	08008028 	.word	0x08008028
  ldr  r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800100c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001010:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001014:	20001b70 	.word	0x20001b70

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_Init+0x40>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_Init+0x40>)
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_Init+0x40>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f94d 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f808 	bl	8001060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001050:	f7ff fe74 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023c00 	.word	0x40023c00

08001060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x54>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x58>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f965 	bl	800134e <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f000 f92d 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_InitTick+0x5c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000290 	.word	0x20000290

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000290 	.word	0x20000290

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_Delay+0x40>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e16b      	b.n	800165c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 815a 	bne.w	8001656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d00b      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b6:	2b11      	cmp	r3, #17
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0xfc>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80b4 	beq.w	8001656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_GPIO_Init+0x308>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_GPIO_Init+0x308>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_GPIO_Init+0x308>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a5a      	ldr	r2, [pc, #360]	; (8001674 <HAL_GPIO_Init+0x30c>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_GPIO_Init+0x310>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a50      	ldr	r2, [pc, #320]	; (800167c <HAL_GPIO_Init+0x314>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_GPIO_Init+0x318>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_GPIO_Init+0x31c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x324>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x328>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4a      	ldr	r2, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x32c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20a>
 800156e:	2307      	movs	r3, #7
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001572:	2308      	movs	r3, #8
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4934      	ldr	r1, [pc, #208]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_GPIO_Init+0x330>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d2:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_GPIO_Init+0x330>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x330>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x330>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_GPIO_Init+0x330>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_GPIO_Init+0x330>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x330>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_GPIO_Init+0x330>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae90 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f806 	bl	8001730 <HAL_GPIO_EXTI_Callback>
  }
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013c00 	.word	0x40013c00

08001730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001748:	b08f      	sub	sp, #60	; 0x3c
 800174a:	af0a      	add	r7, sp, #40	; 0x28
 800174c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e10f      	b.n	8001978 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f005 ff3c 	bl	80075f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2203      	movs	r2, #3
 800177c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 ff09 	bl	80045ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	687e      	ldr	r6, [r7, #4]
 80017a4:	466d      	mov	r5, sp
 80017a6:	f106 0410 	add.w	r4, r6, #16
 80017aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ba:	1d33      	adds	r3, r6, #4
 80017bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f002 fde0 	bl	8004384 <USB_CoreInit>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0d0      	b.n	8001978 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fef7 	bl	80045d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e04a      	b.n	800187e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	333d      	adds	r3, #61	; 0x3d
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	333c      	adds	r3, #60	; 0x3c
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	b298      	uxth	r0, r3
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3342      	adds	r3, #66	; 0x42
 8001824:	4602      	mov	r2, r0
 8001826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	333f      	adds	r3, #63	; 0x3f
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	3344      	adds	r3, #68	; 0x44
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	3348      	adds	r3, #72	; 0x48
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3350      	adds	r3, #80	; 0x50
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3301      	adds	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d3af      	bcc.n	80017e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e044      	b.n	8001918 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	3301      	adds	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3b5      	bcc.n	800188e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	687e      	ldr	r6, [r7, #4]
 800192a:	466d      	mov	r5, sp
 800192c:	f106 0410 	add.w	r4, r6, #16
 8001930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800193c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001940:	1d33      	adds	r3, r6, #4
 8001942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f002 fe6d 	bl	8004624 <USB_DevInit>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e00d      	b.n	8001978 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 feb5 	bl	80056e0 <USB_DevDisconnect>

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001980 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_PCD_Start+0x1c>
 8001998:	2302      	movs	r3, #2
 800199a:	e020      	b.n	80019de <HAL_PCD_Start+0x5e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d109      	bne.n	80019c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d005      	beq.n	80019c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fde1 	bl	800458c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fe65 	bl	800569e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019e6:	b590      	push	{r4, r7, lr}
 80019e8:	b08d      	sub	sp, #52	; 0x34
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 ff23 	bl	8005848 <USB_GetMode>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 839d 	bne.w	8002144 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fe87 	bl	8005722 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8393 	beq.w	8002142 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fe7e 	bl	8005722 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d107      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f002 0202 	and.w	r2, r2, #2
 8001a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 fe6c 	bl	8005722 <USB_ReadInterrupts>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d161      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0210 	bic.w	r2, r2, #16
 8001a62:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	0c5b      	lsrs	r3, r3, #17
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d124      	bne.n	8001ada <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d035      	beq.n	8001b08 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a38      	ldr	r0, [r7, #32]
 8001ab0:	f003 fcd2 	bl	8005458 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac0:	441a      	add	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	441a      	add	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	619a      	str	r2, [r3, #24]
 8001ad8:	e016      	b.n	8001b08 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	0c5b      	lsrs	r3, r3, #17
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d110      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001aec:	2208      	movs	r2, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	6a38      	ldr	r0, [r7, #32]
 8001af2:	f003 fcb1 	bl	8005458 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b02:	441a      	add	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0210 	orr.w	r2, r2, #16
 8001b16:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fe00 	bl	8005722 <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b2c:	d16e      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fe06 	bl	8005748 <USB_ReadDevAllOutEpInterrupt>
 8001b3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b3e:	e062      	b.n	8001c06 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d057      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 fe2b 	bl	80057b0 <USB_ReadDevOutEPInterrupt>
 8001b5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b72:	461a      	mov	r2, r3
 8001b74:	2301      	movs	r3, #1
 8001b76:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fdb0 	bl	80026e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b96:	461a      	mov	r2, r3
 8001b98:	2308      	movs	r3, #8
 8001b9a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 feaa 	bl	80028f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2320      	movs	r3, #32
 8001bda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d199      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fd86 	bl	8005722 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c20:	f040 80c0 	bne.w	8001da4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fda7 	bl	800577c <USB_ReadDevAllInEpInterrupt>
 8001c2e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c34:	e0b2      	b.n	8001d9c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a7 	beq.w	8001d90 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fdcd 	bl	80057ec <USB_ReadDevInEPInterrupt>
 8001c52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d057      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	2201      	movs	r2, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69f9      	ldr	r1, [r7, #28]
 8001c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c7e:	4013      	ands	r3, r2
 8001c80:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2301      	movs	r3, #1
 8001c92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d132      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3348      	adds	r3, #72	; 0x48
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4403      	add	r3, r0
 8001cbc:	3344      	adds	r3, #68	; 0x44
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4419      	add	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4403      	add	r3, r0
 8001cd0:	3348      	adds	r3, #72	; 0x48
 8001cd2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d113      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x31c>
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d108      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	f003 fdd5 	bl	80058ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f005 fcf2 	bl	80076f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d24:	461a      	mov	r2, r3
 8001d26:	2308      	movs	r3, #8
 8001d28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d40:	461a      	mov	r2, r3
 8001d42:	2310      	movs	r3, #16
 8001d44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fc1b 	bl	80025c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	3301      	adds	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f47f af49 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fcba 	bl	8005722 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001db8:	d122      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001de0:	2100      	movs	r1, #0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fe26 	bl	8002a34 <HAL_PCDEx_LPM_Callback>
 8001de8:	e002      	b.n	8001df0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f005 fcf8 	bl	80077e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fc8c 	bl	8005722 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e14:	d112      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f005 fcb4 	bl	8007794 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fc6e 	bl	8005722 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e50:	f040 80c7 	bne.w	8001fe2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 fd3c 	bl	80048ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e78:	e056      	b.n	8001f28 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e86:	461a      	mov	r2, r3
 8001e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e9e:	0151      	lsls	r1, r2, #5
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	440a      	add	r2, r1
 8001ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ea8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ebe:	0151      	lsls	r1, r2, #5
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ec8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ecc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eda:	461a      	mov	r2, r3
 8001edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ee0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef2:	0151      	lsls	r1, r2, #5
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	440a      	add	r2, r1
 8001ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f12:	0151      	lsls	r1, r2, #5
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	440a      	add	r2, r1
 8001f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3a3      	bcc.n	8001e7a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f5e:	f043 030b 	orr.w	r3, r3, #11
 8001f62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f74:	f043 030b 	orr.w	r3, r3, #11
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	e015      	b.n	8001fa8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f8e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa2:	f043 030b 	orr.w	r3, r3, #11
 8001fa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001fba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f003 fc6d 	bl	80058ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fb9b 	bl	8005722 <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff6:	d124      	bne.n	8002042 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fc31 	bl	8005864 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f002 fcd1 	bl	80049ae <USB_GetDevSpeed>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	f001 f946 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 800201c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4620      	mov	r0, r4
 8002028:	f002 fa0e 	bl	8004448 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f005 fb88 	bl	8007742 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fb6b 	bl	8005722 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d10a      	bne.n	800206c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 fb65 	bl	8007726 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f002 0208 	and.w	r2, r2, #8
 800206a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fb56 	bl	8005722 <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002080:	d10f      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f005 fbc7 	bl	8007820 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fb3b 	bl	8005722 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020b6:	d10f      	bne.n	80020d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f005 fb9a 	bl	80077fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fb20 	bl	8005722 <USB_ReadInterrupts>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d10a      	bne.n	8002104 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 fba8 	bl	8007844 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fb0a 	bl	8005722 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d115      	bne.n	8002144 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f005 fb98 	bl	8007860 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	e000      	b.n	8002144 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002142:	bf00      	nop
    }
  }
}
 8002144:	3734      	adds	r7, #52	; 0x34
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_SetAddress+0x1a>
 8002160:	2302      	movs	r3, #2
 8002162:	e013      	b.n	800218c <HAL_PCD_SetAddress+0x42>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fa68 	bl	8005652 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	70fb      	strb	r3, [r7, #3]
 80021a6:	460b      	mov	r3, r1
 80021a8:	803b      	strh	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da0f      	bge.n	80021da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	705a      	strb	r2, [r3, #1]
 80021d8:	e00f      	b.n	80021fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002206:	883a      	ldrh	r2, [r7, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	78ba      	ldrb	r2, [r7, #2]
 8002210:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002224:	78bb      	ldrb	r3, [r7, #2]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d102      	bne.n	8002230 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_PCD_EP_Open+0xaa>
 800223a:	2302      	movs	r3, #2
 800223c:	e00e      	b.n	800225c <HAL_PCD_EP_Open+0xc8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fbd3 	bl	80049f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800225a:	7afb      	ldrb	r3, [r7, #11]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	da0f      	bge.n	8002298 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	e00f      	b.n	80022b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_PCD_EP_Close+0x6e>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e00e      	b.n	80022f0 <HAL_PCD_EP_Close+0x8c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fc11 	bl	8004b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	460b      	mov	r3, r1
 8002306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	6979      	ldr	r1, [r7, #20]
 800236c:	f002 feec 	bl	8005148 <USB_EP0StartXfer>
 8002370:	e008      	b.n	8002384 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6979      	ldr	r1, [r7, #20]
 8002380:	f002 fc9e 	bl	8004cc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023b0:	681b      	ldr	r3, [r3, #0]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	460b      	mov	r3, r1
 80023cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	f003 020f 	and.w	r2, r3, #15
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	3338      	adds	r3, #56	; 0x38
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4413      	add	r3, r2
 80023e2:	3304      	adds	r3, #4
 80023e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2201      	movs	r2, #1
 80023fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	b2da      	uxtb	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	6979      	ldr	r1, [r7, #20]
 8002430:	f002 fe8a 	bl	8005148 <USB_EP0StartXfer>
 8002434:	e008      	b.n	8002448 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	6979      	ldr	r1, [r7, #20]
 8002444:	f002 fc3c 	bl	8004cc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d901      	bls.n	8002470 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e050      	b.n	8002512 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	da0f      	bge.n	8002498 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2201      	movs	r2, #1
 8002494:	705a      	strb	r2, [r3, #1]
 8002496:	e00d      	b.n	80024b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	3304      	adds	r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_PCD_EP_SetStall+0x82>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e01e      	b.n	8002512 <HAL_PCD_EP_SetStall+0xc0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ffe1 	bl	80054aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	b2d9      	uxtb	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002502:	461a      	mov	r2, r3
 8002504:	f003 f9d2 	bl	80058ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d901      	bls.n	8002538 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e042      	b.n	80025be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da0f      	bge.n	8002560 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	f003 020f 	and.w	r2, r3, #15
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3338      	adds	r3, #56	; 0x38
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	705a      	strb	r2, [r3, #1]
 800255e:	e00f      	b.n	8002580 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	f003 020f 	and.w	r2, r3, #15
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
 8002576:	3304      	adds	r3, #4
 8002578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_EP_ClrStall+0x86>
 800259c:	2302      	movs	r3, #2
 800259e:	e00e      	b.n	80025be <HAL_PCD_EP_ClrStall+0xa4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 ffe9 	bl	8005586 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	3338      	adds	r3, #56	; 0x38
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d901      	bls.n	80025fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06c      	b.n	80026d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	d902      	bls.n	800261a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3303      	adds	r3, #3
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002622:	e02b      	b.n	800267c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	429a      	cmp	r2, r3
 8002638:	d902      	bls.n	8002640 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3303      	adds	r3, #3
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002658:	b2db      	uxtb	r3, r3
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4603      	mov	r3, r0
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f002 fec5 	bl	80053ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	441a      	add	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	441a      	add	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	b29b      	uxth	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	429a      	cmp	r2, r3
 8002690:	d809      	bhi.n	80026a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800269a:	429a      	cmp	r2, r3
 800269c:	d203      	bcs.n	80026a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1be      	bne.n	8002624 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d811      	bhi.n	80026d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	2201      	movs	r2, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026d2:	4013      	ands	r3, r2
 80026d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	333c      	adds	r3, #60	; 0x3c
 80026f8:	3304      	adds	r3, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 80a0 	bne.w	8002858 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a72      	ldr	r2, [pc, #456]	; (80028f0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002726:	4293      	cmp	r3, r2
 8002728:	f240 80dd 	bls.w	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80d7 	beq.w	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274a:	6093      	str	r3, [r2, #8]
 800274c:	e0cb      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002764:	461a      	mov	r2, r3
 8002766:	2320      	movs	r3, #32
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	e0bc      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 80b7 	bne.w	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a5d      	ldr	r2, [pc, #372]	; (80028f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d90f      	bls.n	80027a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002796:	461a      	mov	r2, r3
 8002798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279c:	6093      	str	r3, [r2, #8]
 800279e:	e0a2      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	0159      	lsls	r1, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	440b      	add	r3, r1
 80027bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80027c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4403      	add	r3, r0
 80027d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4403      	add	r3, r0
 80027fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4419      	add	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002818:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <PCD_EP_OutXfrComplete_int+0x16a>
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002842:	461a      	mov	r2, r3
 8002844:	2101      	movs	r1, #1
 8002846:	f003 f831 	bl	80058ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f004 ff33 	bl	80076bc <HAL_PCD_DataOutStageCallback>
 8002856:	e046      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d124      	bne.n	80028aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002876:	461a      	mov	r2, r3
 8002878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800287c:	6093      	str	r3, [r2, #8]
 800287e:	e032      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002896:	461a      	mov	r2, r3
 8002898:	2320      	movs	r3, #32
 800289a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f004 ff0a 	bl	80076bc <HAL_PCD_DataOutStageCallback>
 80028a8:	e01d      	b.n	80028e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d114      	bne.n	80028da <PCD_EP_OutXfrComplete_int+0x1fa>
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d2:	461a      	mov	r2, r3
 80028d4:	2100      	movs	r1, #0
 80028d6:	f002 ffe9 	bl	80058ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f004 feeb 	bl	80076bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	4f54300a 	.word	0x4f54300a
 80028f4:	4f54310a 	.word	0x4f54310a

080028f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a15      	ldr	r2, [pc, #84]	; (8002980 <PCD_EP_OutSetupPacket_int+0x88>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d90e      	bls.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f004 fea3 	bl	8007698 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <PCD_EP_OutSetupPacket_int+0x88>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d90c      	bls.n	8002974 <PCD_EP_OutSetupPacket_int+0x7c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800296c:	461a      	mov	r2, r3
 800296e:	2101      	movs	r1, #1
 8002970:	f002 ff9c 	bl	80058ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	4f54300a 	.word	0x4f54300a

08002984 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
 8002990:	4613      	mov	r3, r2
 8002992:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029a2:	883b      	ldrh	r3, [r7, #0]
 80029a4:	0419      	lsls	r1, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
 80029b0:	e028      	b.n	8002a04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]
 80029c4:	e00d      	b.n	80029e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3340      	adds	r3, #64	; 0x40
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4413      	add	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ec      	bcc.n	80029c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029ec:	883b      	ldrh	r3, [r7, #0]
 80029ee:	0418      	lsls	r0, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4302      	orrs	r2, r0
 80029fc:	3340      	adds	r3, #64	; 0x40
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e25b      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	4ba3      	ldr	r3, [pc, #652]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4ba0      	ldr	r3, [pc, #640]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b9d      	ldr	r3, [pc, #628]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b99      	ldr	r3, [pc, #612]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e236      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a90      	ldr	r2, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a8a      	ldr	r2, [pc, #552]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a87      	ldr	r2, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe faf0 	bl	80010e8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe faec 	bl	80010e8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e1fb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fadc 	bl	80010e8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fad8 	bl	80010e8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1e7      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b6c      	ldr	r3, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1bb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4952      	ldr	r1, [pc, #328]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_OscConfig+0x2b0>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fa91 	bl	80010e8 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fe fa8d 	bl	80010e8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e19c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4940      	ldr	r1, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x2b0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fa70 	bl	80010e8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fa6c 	bl	80010e8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e17b      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d030      	beq.n	8002c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_OscConfig+0x2b4>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe fa50 	bl	80010e8 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fa4c 	bl	80010e8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e15b      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
 8002c6a:	e015      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x2b4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fa39 	bl	80010e8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fa35 	bl	80010e8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e144      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a0 	beq.w	8002de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fe f9fb 	bl	80010e8 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ce>
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	42470000 	.word	0x42470000
 8002d00:	42470e80 	.word	0x42470e80
 8002d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7fe f9ee 	bl	80010e8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0fd      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCC_OscConfig+0x4d4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2f0>
 8002d2e:	4b7d      	ldr	r3, [pc, #500]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a7c      	ldr	r2, [pc, #496]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x312>
 8002d44:	4b77      	ldr	r3, [pc, #476]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a76      	ldr	r2, [pc, #472]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b74      	ldr	r3, [pc, #464]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a73      	ldr	r2, [pc, #460]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x32a>
 8002d5e:	4b71      	ldr	r3, [pc, #452]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a70      	ldr	r2, [pc, #448]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a6d      	ldr	r2, [pc, #436]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7fe f9b3 	bl	80010e8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe f9af 	bl	80010e8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0bc      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x33a>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe f99d 	bl	80010e8 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe f999 	bl	80010e8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0a6      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a51      	ldr	r2, [pc, #324]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8092 	beq.w	8002f14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d05c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d141      	bne.n	8002e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f96d 	bl	80010e8 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe f969 	bl	80010e8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e078      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4933      	ldr	r1, [pc, #204]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe f942 	bl	80010e8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fe f93e 	bl	80010e8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04d      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x41c>
 8002e86:	e045      	b.n	8002f14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x4dc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe f92b 	bl	80010e8 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe f927 	bl	80010e8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e036      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x44a>
 8002eb4:	e02e      	b.n	8002f14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e029      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d115      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eea:	4013      	ands	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10d      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40007000 	.word	0x40007000
 8002f24:	40023800 	.word	0x40023800
 8002f28:	42470060 	.word	0x42470060

08002f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0cc      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d90c      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d044      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d119      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e067      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4934      	ldr	r1, [pc, #208]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe f864 	bl	80010e8 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe f860 	bl	80010e8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04f      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20c      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f821 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd ffc4 	bl	8001060 <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08007fd8 	.word	0x08007fd8
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310e:	4b63      	ldr	r3, [pc, #396]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d007      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x32>
 800311a:	2b08      	cmp	r3, #8
 800311c:	d008      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x38>
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80b4 	bne.w	800328c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003126:	60bb      	str	r3, [r7, #8]
       break;
 8003128:	e0b3      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b5e      	ldr	r3, [pc, #376]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800312c:	60bb      	str	r3, [r7, #8]
      break;
 800312e:	e0b0      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b5a      	ldr	r3, [pc, #360]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04a      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b55      	ldr	r3, [pc, #340]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	f04f 0400 	mov.w	r4, #0
 8003150:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	ea03 0501 	and.w	r5, r3, r1
 800315c:	ea04 0602 	and.w	r6, r4, r2
 8003160:	4629      	mov	r1, r5
 8003162:	4632      	mov	r2, r6
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	0154      	lsls	r4, r2, #5
 800316e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003172:	014b      	lsls	r3, r1, #5
 8003174:	4619      	mov	r1, r3
 8003176:	4622      	mov	r2, r4
 8003178:	1b49      	subs	r1, r1, r5
 800317a:	eb62 0206 	sbc.w	r2, r2, r6
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	f04f 0400 	mov.w	r4, #0
 8003186:	0194      	lsls	r4, r2, #6
 8003188:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800318c:	018b      	lsls	r3, r1, #6
 800318e:	1a5b      	subs	r3, r3, r1
 8003190:	eb64 0402 	sbc.w	r4, r4, r2
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	00e2      	lsls	r2, r4, #3
 800319e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031a2:	00d9      	lsls	r1, r3, #3
 80031a4:	460b      	mov	r3, r1
 80031a6:	4614      	mov	r4, r2
 80031a8:	195b      	adds	r3, r3, r5
 80031aa:	eb44 0406 	adc.w	r4, r4, r6
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	0262      	lsls	r2, r4, #9
 80031b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031bc:	0259      	lsls	r1, r3, #9
 80031be:	460b      	mov	r3, r1
 80031c0:	4614      	mov	r4, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	4621      	mov	r1, r4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	461a      	mov	r2, r3
 80031ce:	4623      	mov	r3, r4
 80031d0:	f7fc fffa 	bl	80001c8 <__aeabi_uldivmod>
 80031d4:	4603      	mov	r3, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e049      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	ea03 0501 	and.w	r5, r3, r1
 80031f2:	ea04 0602 	and.w	r6, r4, r2
 80031f6:	4629      	mov	r1, r5
 80031f8:	4632      	mov	r2, r6
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	0154      	lsls	r4, r2, #5
 8003204:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003208:	014b      	lsls	r3, r1, #5
 800320a:	4619      	mov	r1, r3
 800320c:	4622      	mov	r2, r4
 800320e:	1b49      	subs	r1, r1, r5
 8003210:	eb62 0206 	sbc.w	r2, r2, r6
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0194      	lsls	r4, r2, #6
 800321e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	1a5b      	subs	r3, r3, r1
 8003226:	eb64 0402 	sbc.w	r4, r4, r2
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	00e2      	lsls	r2, r4, #3
 8003234:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003238:	00d9      	lsls	r1, r3, #3
 800323a:	460b      	mov	r3, r1
 800323c:	4614      	mov	r4, r2
 800323e:	195b      	adds	r3, r3, r5
 8003240:	eb44 0406 	adc.w	r4, r4, r6
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	02a2      	lsls	r2, r4, #10
 800324e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003252:	0299      	lsls	r1, r3, #10
 8003254:	460b      	mov	r3, r1
 8003256:	4614      	mov	r4, r2
 8003258:	4618      	mov	r0, r3
 800325a:	4621      	mov	r1, r4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f04f 0400 	mov.w	r4, #0
 8003262:	461a      	mov	r2, r3
 8003264:	4623      	mov	r3, r4
 8003266:	f7fc ffaf 	bl	80001c8 <__aeabi_uldivmod>
 800326a:	4603      	mov	r3, r0
 800326c:	460c      	mov	r4, r1
 800326e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	60bb      	str	r3, [r7, #8]
      break;
 800328a:	e002      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800328e:	60bb      	str	r3, [r7, #8]
      break;
 8003290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003292:	68bb      	ldr	r3, [r7, #8]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4601      	mov	r1, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08007fe8 	.word	0x08007fe8

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032ec:	f7ff ffdc 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f0:	4601      	mov	r1, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0b5b      	lsrs	r3, r3, #13
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4a03      	ldr	r2, [pc, #12]	; (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	08007fe8 	.word	0x08007fe8

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01d      	b.n	800335e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fd fd28 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f910 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d007      	beq.n	8003398 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_TIM_Base_Stop+0x40>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	f240 4344 	movw	r3, #1092	; 0x444
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_Base_Stop+0x40>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e0a6      	b.n	800356a <HAL_TIM_ConfigClockSource+0x166>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800343a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003442:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d067      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x120>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d80b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x6c>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d073      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d802      	bhi.n	8003466 <HAL_TIM_ConfigClockSource+0x62>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d06f      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003464:	e078      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003466:	2b20      	cmp	r3, #32
 8003468:	d06c      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
 800346a:	2b30      	cmp	r3, #48	; 0x30
 800346c:	d06a      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800346e:	e073      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003470:	2b70      	cmp	r3, #112	; 0x70
 8003472:	d00d      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x8c>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d804      	bhi.n	8003482 <HAL_TIM_ConfigClockSource+0x7e>
 8003478:	2b50      	cmp	r3, #80	; 0x50
 800347a:	d033      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xe0>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d041      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003480:	e06a      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d066      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x152>
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d017      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800348e:	e063      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f000 f982 	bl	80037a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e04c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f000 f96b 	bl	80037a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e039      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f000 f8df 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2150      	movs	r1, #80	; 0x50
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f938 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003502:	e029      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	461a      	mov	r2, r3
 8003512:	f000 f8fe 	bl	8003712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2160      	movs	r1, #96	; 0x60
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f928 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003522:	e019      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	461a      	mov	r2, r3
 8003532:	f000 f8bf 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f918 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003542:	e009      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 f90f 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003554:	e000      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a40      	ldr	r2, [pc, #256]	; (8003688 <TIM_Base_SetConfig+0x114>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3d      	ldr	r2, [pc, #244]	; (800368c <TIM_Base_SetConfig+0x118>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <TIM_Base_SetConfig+0x11c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <TIM_Base_SetConfig+0x120>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <TIM_Base_SetConfig+0x124>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <TIM_Base_SetConfig+0x114>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d027      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <TIM_Base_SetConfig+0x118>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d023      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	; (8003690 <TIM_Base_SetConfig+0x11c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <TIM_Base_SetConfig+0x120>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <TIM_Base_SetConfig+0x124>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d017      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <TIM_Base_SetConfig+0x128>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <TIM_Base_SetConfig+0x12c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <TIM_Base_SetConfig+0x130>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <TIM_Base_SetConfig+0x134>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <TIM_Base_SetConfig+0x138>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <TIM_Base_SetConfig+0x13c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <TIM_Base_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0xf8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <TIM_Base_SetConfig+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40010400 	.word	0x40010400
 800369c:	40014000 	.word	0x40014000
 80036a0:	40014400 	.word	0x40014400
 80036a4:	40014800 	.word	0x40014800
 80036a8:	40001800 	.word	0x40001800
 80036ac:	40001c00 	.word	0x40001c00
 80036b0:	40002000 	.word	0x40002000

080036b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f023 0201 	bic.w	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 030a 	bic.w	r3, r3, #10
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0210 	bic.w	r2, r3, #16
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	f043 0307 	orr.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e05a      	b.n	80038b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d01d      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d018      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00e      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d009      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10c      	bne.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	4313      	orrs	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40001800 	.word	0x40001800

080038e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03f      	b.n	8003972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fa60 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9b1 	bl	8003c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af02      	add	r7, sp, #8
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	f040 8083 	bne.w	8003aa2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Transmit+0x2e>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e07b      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Transmit+0x40>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e074      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2221      	movs	r2, #33	; 0x21
 80039cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fb8a 	bl	80010e8 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039ea:	e042      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a02:	d122      	bne.n	8003a4a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8f2 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e042      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a30:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	e017      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	e013      	b.n	8003a72 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8cf 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e01f      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	60ba      	str	r2, [r7, #8]
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1b7      	bne.n	80039ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8b6 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e006      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	f040 8090 	bne.w	8003bee <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_UART_Receive+0x2e>
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e088      	b.n	8003bf0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Receive+0x40>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e081      	b.n	8003bf0 <HAL_UART_Receive+0x144>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b02:	f7fd faf1 	bl	80010e8 <HAL_GetTick>
 8003b06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b1c:	e05c      	b.n	8003bd8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d12b      	bne.n	8003b8e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2120      	movs	r1, #32
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f859 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e04f      	b.n	8003bf0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10c      	bne.n	8003b76 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3302      	adds	r3, #2
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	e030      	b.n	8003bd8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	e024      	b.n	8003bd8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2120      	movs	r1, #32
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f82d 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e023      	b.n	8003bf0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	60ba      	str	r2, [r7, #8]
 8003bbc:	b2ca      	uxtb	r2, r1
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e00a      	b.n	8003bd8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d19d      	bne.n	8003b1e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c08:	e02c      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d028      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c18:	f7fd fa66 	bl	80010e8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d21d      	bcs.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e00f      	b.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d0c3      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cce:	f023 030c 	bic.w	r3, r3, #12
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfa:	f040 818b 	bne.w	8004014 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4ac1      	ldr	r2, [pc, #772]	; (8004008 <UART_SetConfig+0x37c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d005      	beq.n	8003d14 <UART_SetConfig+0x88>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4abf      	ldr	r2, [pc, #764]	; (800400c <UART_SetConfig+0x380>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f040 80bd 	bne.w	8003e8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d14:	f7ff fae8 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8003d18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	461d      	mov	r5, r3
 8003d1e:	f04f 0600 	mov.w	r6, #0
 8003d22:	46a8      	mov	r8, r5
 8003d24:	46b1      	mov	r9, r6
 8003d26:	eb18 0308 	adds.w	r3, r8, r8
 8003d2a:	eb49 0409 	adc.w	r4, r9, r9
 8003d2e:	4698      	mov	r8, r3
 8003d30:	46a1      	mov	r9, r4
 8003d32:	eb18 0805 	adds.w	r8, r8, r5
 8003d36:	eb49 0906 	adc.w	r9, r9, r6
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d4e:	4688      	mov	r8, r1
 8003d50:	4691      	mov	r9, r2
 8003d52:	eb18 0005 	adds.w	r0, r8, r5
 8003d56:	eb49 0106 	adc.w	r1, r9, r6
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	461d      	mov	r5, r3
 8003d60:	f04f 0600 	mov.w	r6, #0
 8003d64:	196b      	adds	r3, r5, r5
 8003d66:	eb46 0406 	adc.w	r4, r6, r6
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	f7fc fa2b 	bl	80001c8 <__aeabi_uldivmod>
 8003d72:	4603      	mov	r3, r0
 8003d74:	460c      	mov	r4, r1
 8003d76:	461a      	mov	r2, r3
 8003d78:	4ba5      	ldr	r3, [pc, #660]	; (8004010 <UART_SetConfig+0x384>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	461d      	mov	r5, r3
 8003d88:	f04f 0600 	mov.w	r6, #0
 8003d8c:	46a9      	mov	r9, r5
 8003d8e:	46b2      	mov	sl, r6
 8003d90:	eb19 0309 	adds.w	r3, r9, r9
 8003d94:	eb4a 040a 	adc.w	r4, sl, sl
 8003d98:	4699      	mov	r9, r3
 8003d9a:	46a2      	mov	sl, r4
 8003d9c:	eb19 0905 	adds.w	r9, r9, r5
 8003da0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003db4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003db8:	4689      	mov	r9, r1
 8003dba:	4692      	mov	sl, r2
 8003dbc:	eb19 0005 	adds.w	r0, r9, r5
 8003dc0:	eb4a 0106 	adc.w	r1, sl, r6
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	f04f 0600 	mov.w	r6, #0
 8003dce:	196b      	adds	r3, r5, r5
 8003dd0:	eb46 0406 	adc.w	r4, r6, r6
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	f7fc f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b8b      	ldr	r3, [pc, #556]	; (8004010 <UART_SetConfig+0x384>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a86      	ldr	r2, [pc, #536]	; (8004010 <UART_SetConfig+0x384>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e04:	4498      	add	r8, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	461d      	mov	r5, r3
 8003e0a:	f04f 0600 	mov.w	r6, #0
 8003e0e:	46a9      	mov	r9, r5
 8003e10:	46b2      	mov	sl, r6
 8003e12:	eb19 0309 	adds.w	r3, r9, r9
 8003e16:	eb4a 040a 	adc.w	r4, sl, sl
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	eb19 0905 	adds.w	r9, r9, r5
 8003e22:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e3a:	4689      	mov	r9, r1
 8003e3c:	4692      	mov	sl, r2
 8003e3e:	eb19 0005 	adds.w	r0, r9, r5
 8003e42:	eb4a 0106 	adc.w	r1, sl, r6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	f04f 0600 	mov.w	r6, #0
 8003e50:	196b      	adds	r3, r5, r5
 8003e52:	eb46 0406 	adc.w	r4, r6, r6
 8003e56:	461a      	mov	r2, r3
 8003e58:	4623      	mov	r3, r4
 8003e5a:	f7fc f9b5 	bl	80001c8 <__aeabi_uldivmod>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <UART_SetConfig+0x384>)
 8003e66:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2164      	movs	r1, #100	; 0x64
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	4a65      	ldr	r2, [pc, #404]	; (8004010 <UART_SetConfig+0x384>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 0207 	and.w	r2, r3, #7
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4442      	add	r2, r8
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e26f      	b.n	800436e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e8e:	f7ff fa17 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8003e92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	461d      	mov	r5, r3
 8003e98:	f04f 0600 	mov.w	r6, #0
 8003e9c:	46a8      	mov	r8, r5
 8003e9e:	46b1      	mov	r9, r6
 8003ea0:	eb18 0308 	adds.w	r3, r8, r8
 8003ea4:	eb49 0409 	adc.w	r4, r9, r9
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	46a1      	mov	r9, r4
 8003eac:	eb18 0805 	adds.w	r8, r8, r5
 8003eb0:	eb49 0906 	adc.w	r9, r9, r6
 8003eb4:	f04f 0100 	mov.w	r1, #0
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ec0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ec4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ec8:	4688      	mov	r8, r1
 8003eca:	4691      	mov	r9, r2
 8003ecc:	eb18 0005 	adds.w	r0, r8, r5
 8003ed0:	eb49 0106 	adc.w	r1, r9, r6
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	461d      	mov	r5, r3
 8003eda:	f04f 0600 	mov.w	r6, #0
 8003ede:	196b      	adds	r3, r5, r5
 8003ee0:	eb46 0406 	adc.w	r4, r6, r6
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	f7fc f96e 	bl	80001c8 <__aeabi_uldivmod>
 8003eec:	4603      	mov	r3, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <UART_SetConfig+0x384>)
 8003ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	461d      	mov	r5, r3
 8003f02:	f04f 0600 	mov.w	r6, #0
 8003f06:	46a9      	mov	r9, r5
 8003f08:	46b2      	mov	sl, r6
 8003f0a:	eb19 0309 	adds.w	r3, r9, r9
 8003f0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f12:	4699      	mov	r9, r3
 8003f14:	46a2      	mov	sl, r4
 8003f16:	eb19 0905 	adds.w	r9, r9, r5
 8003f1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f32:	4689      	mov	r9, r1
 8003f34:	4692      	mov	sl, r2
 8003f36:	eb19 0005 	adds.w	r0, r9, r5
 8003f3a:	eb4a 0106 	adc.w	r1, sl, r6
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	461d      	mov	r5, r3
 8003f44:	f04f 0600 	mov.w	r6, #0
 8003f48:	196b      	adds	r3, r5, r5
 8003f4a:	eb46 0406 	adc.w	r4, r6, r6
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4623      	mov	r3, r4
 8003f52:	f7fc f939 	bl	80001c8 <__aeabi_uldivmod>
 8003f56:	4603      	mov	r3, r0
 8003f58:	460c      	mov	r4, r1
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <UART_SetConfig+0x384>)
 8003f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2164      	movs	r1, #100	; 0x64
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a27      	ldr	r2, [pc, #156]	; (8004010 <UART_SetConfig+0x384>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f7e:	4498      	add	r8, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	461d      	mov	r5, r3
 8003f84:	f04f 0600 	mov.w	r6, #0
 8003f88:	46a9      	mov	r9, r5
 8003f8a:	46b2      	mov	sl, r6
 8003f8c:	eb19 0309 	adds.w	r3, r9, r9
 8003f90:	eb4a 040a 	adc.w	r4, sl, sl
 8003f94:	4699      	mov	r9, r3
 8003f96:	46a2      	mov	sl, r4
 8003f98:	eb19 0905 	adds.w	r9, r9, r5
 8003f9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb4:	4689      	mov	r9, r1
 8003fb6:	4692      	mov	sl, r2
 8003fb8:	eb19 0005 	adds.w	r0, r9, r5
 8003fbc:	eb4a 0106 	adc.w	r1, sl, r6
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	f04f 0600 	mov.w	r6, #0
 8003fca:	196b      	adds	r3, r5, r5
 8003fcc:	eb46 0406 	adc.w	r4, r6, r6
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f7fc f8f8 	bl	80001c8 <__aeabi_uldivmod>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	460c      	mov	r4, r1
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <UART_SetConfig+0x384>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	; 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	3332      	adds	r3, #50	; 0x32
 8003ff2:	4a07      	ldr	r2, [pc, #28]	; (8004010 <UART_SetConfig+0x384>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 0207 	and.w	r2, r3, #7
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4442      	add	r2, r8
 8004004:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004006:	e1b2      	b.n	800436e <UART_SetConfig+0x6e2>
 8004008:	40011000 	.word	0x40011000
 800400c:	40011400 	.word	0x40011400
 8004010:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4ad7      	ldr	r2, [pc, #860]	; (8004378 <UART_SetConfig+0x6ec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d005      	beq.n	800402a <UART_SetConfig+0x39e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4ad6      	ldr	r2, [pc, #856]	; (800437c <UART_SetConfig+0x6f0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f040 80d1 	bne.w	80041cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800402a:	f7ff f95d 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 800402e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	469a      	mov	sl, r3
 8004034:	f04f 0b00 	mov.w	fp, #0
 8004038:	46d0      	mov	r8, sl
 800403a:	46d9      	mov	r9, fp
 800403c:	eb18 0308 	adds.w	r3, r8, r8
 8004040:	eb49 0409 	adc.w	r4, r9, r9
 8004044:	4698      	mov	r8, r3
 8004046:	46a1      	mov	r9, r4
 8004048:	eb18 080a 	adds.w	r8, r8, sl
 800404c:	eb49 090b 	adc.w	r9, r9, fp
 8004050:	f04f 0100 	mov.w	r1, #0
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800405c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004060:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004064:	4688      	mov	r8, r1
 8004066:	4691      	mov	r9, r2
 8004068:	eb1a 0508 	adds.w	r5, sl, r8
 800406c:	eb4b 0609 	adc.w	r6, fp, r9
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4619      	mov	r1, r3
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	0094      	lsls	r4, r2, #2
 8004084:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004088:	008b      	lsls	r3, r1, #2
 800408a:	461a      	mov	r2, r3
 800408c:	4623      	mov	r3, r4
 800408e:	4628      	mov	r0, r5
 8004090:	4631      	mov	r1, r6
 8004092:	f7fc f899 	bl	80001c8 <__aeabi_uldivmod>
 8004096:	4603      	mov	r3, r0
 8004098:	460c      	mov	r4, r1
 800409a:	461a      	mov	r2, r3
 800409c:	4bb8      	ldr	r3, [pc, #736]	; (8004380 <UART_SetConfig+0x6f4>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	469b      	mov	fp, r3
 80040ac:	f04f 0c00 	mov.w	ip, #0
 80040b0:	46d9      	mov	r9, fp
 80040b2:	46e2      	mov	sl, ip
 80040b4:	eb19 0309 	adds.w	r3, r9, r9
 80040b8:	eb4a 040a 	adc.w	r4, sl, sl
 80040bc:	4699      	mov	r9, r3
 80040be:	46a2      	mov	sl, r4
 80040c0:	eb19 090b 	adds.w	r9, r9, fp
 80040c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040dc:	4689      	mov	r9, r1
 80040de:	4692      	mov	sl, r2
 80040e0:	eb1b 0509 	adds.w	r5, fp, r9
 80040e4:	eb4c 060a 	adc.w	r6, ip, sl
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	0094      	lsls	r4, r2, #2
 80040fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004100:	008b      	lsls	r3, r1, #2
 8004102:	461a      	mov	r2, r3
 8004104:	4623      	mov	r3, r4
 8004106:	4628      	mov	r0, r5
 8004108:	4631      	mov	r1, r6
 800410a:	f7fc f85d 	bl	80001c8 <__aeabi_uldivmod>
 800410e:	4603      	mov	r3, r0
 8004110:	460c      	mov	r4, r1
 8004112:	461a      	mov	r2, r3
 8004114:	4b9a      	ldr	r3, [pc, #616]	; (8004380 <UART_SetConfig+0x6f4>)
 8004116:	fba3 1302 	umull	r1, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2164      	movs	r1, #100	; 0x64
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a95      	ldr	r2, [pc, #596]	; (8004380 <UART_SetConfig+0x6f4>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	4498      	add	r8, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	469b      	mov	fp, r3
 800413a:	f04f 0c00 	mov.w	ip, #0
 800413e:	46d9      	mov	r9, fp
 8004140:	46e2      	mov	sl, ip
 8004142:	eb19 0309 	adds.w	r3, r9, r9
 8004146:	eb4a 040a 	adc.w	r4, sl, sl
 800414a:	4699      	mov	r9, r3
 800414c:	46a2      	mov	sl, r4
 800414e:	eb19 090b 	adds.w	r9, r9, fp
 8004152:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800416a:	4689      	mov	r9, r1
 800416c:	4692      	mov	sl, r2
 800416e:	eb1b 0509 	adds.w	r5, fp, r9
 8004172:	eb4c 060a 	adc.w	r6, ip, sl
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4619      	mov	r1, r3
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	f04f 0400 	mov.w	r4, #0
 8004188:	0094      	lsls	r4, r2, #2
 800418a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800418e:	008b      	lsls	r3, r1, #2
 8004190:	461a      	mov	r2, r3
 8004192:	4623      	mov	r3, r4
 8004194:	4628      	mov	r0, r5
 8004196:	4631      	mov	r1, r6
 8004198:	f7fc f816 	bl	80001c8 <__aeabi_uldivmod>
 800419c:	4603      	mov	r3, r0
 800419e:	460c      	mov	r4, r1
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b77      	ldr	r3, [pc, #476]	; (8004380 <UART_SetConfig+0x6f4>)
 80041a4:	fba3 1302 	umull	r1, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	2164      	movs	r1, #100	; 0x64
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	3332      	adds	r3, #50	; 0x32
 80041b6:	4a72      	ldr	r2, [pc, #456]	; (8004380 <UART_SetConfig+0x6f4>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4442      	add	r2, r8
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	e0d0      	b.n	800436e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7ff f878 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80041d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	469a      	mov	sl, r3
 80041d6:	f04f 0b00 	mov.w	fp, #0
 80041da:	46d0      	mov	r8, sl
 80041dc:	46d9      	mov	r9, fp
 80041de:	eb18 0308 	adds.w	r3, r8, r8
 80041e2:	eb49 0409 	adc.w	r4, r9, r9
 80041e6:	4698      	mov	r8, r3
 80041e8:	46a1      	mov	r9, r4
 80041ea:	eb18 080a 	adds.w	r8, r8, sl
 80041ee:	eb49 090b 	adc.w	r9, r9, fp
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004202:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004206:	4688      	mov	r8, r1
 8004208:	4691      	mov	r9, r2
 800420a:	eb1a 0508 	adds.w	r5, sl, r8
 800420e:	eb4b 0609 	adc.w	r6, fp, r9
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4619      	mov	r1, r3
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	0094      	lsls	r4, r2, #2
 8004226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800422a:	008b      	lsls	r3, r1, #2
 800422c:	461a      	mov	r2, r3
 800422e:	4623      	mov	r3, r4
 8004230:	4628      	mov	r0, r5
 8004232:	4631      	mov	r1, r6
 8004234:	f7fb ffc8 	bl	80001c8 <__aeabi_uldivmod>
 8004238:	4603      	mov	r3, r0
 800423a:	460c      	mov	r4, r1
 800423c:	461a      	mov	r2, r3
 800423e:	4b50      	ldr	r3, [pc, #320]	; (8004380 <UART_SetConfig+0x6f4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	469b      	mov	fp, r3
 800424e:	f04f 0c00 	mov.w	ip, #0
 8004252:	46d9      	mov	r9, fp
 8004254:	46e2      	mov	sl, ip
 8004256:	eb19 0309 	adds.w	r3, r9, r9
 800425a:	eb4a 040a 	adc.w	r4, sl, sl
 800425e:	4699      	mov	r9, r3
 8004260:	46a2      	mov	sl, r4
 8004262:	eb19 090b 	adds.w	r9, r9, fp
 8004266:	eb4a 0a0c 	adc.w	sl, sl, ip
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004276:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800427a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800427e:	4689      	mov	r9, r1
 8004280:	4692      	mov	sl, r2
 8004282:	eb1b 0509 	adds.w	r5, fp, r9
 8004286:	eb4c 060a 	adc.w	r6, ip, sl
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	0094      	lsls	r4, r2, #2
 800429e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	4631      	mov	r1, r6
 80042ac:	f7fb ff8c 	bl	80001c8 <__aeabi_uldivmod>
 80042b0:	4603      	mov	r3, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b32      	ldr	r3, [pc, #200]	; (8004380 <UART_SetConfig+0x6f4>)
 80042b8:	fba3 1302 	umull	r1, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	2164      	movs	r1, #100	; 0x64
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	3332      	adds	r3, #50	; 0x32
 80042ca:	4a2d      	ldr	r2, [pc, #180]	; (8004380 <UART_SetConfig+0x6f4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d6:	4498      	add	r8, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	469b      	mov	fp, r3
 80042dc:	f04f 0c00 	mov.w	ip, #0
 80042e0:	46d9      	mov	r9, fp
 80042e2:	46e2      	mov	sl, ip
 80042e4:	eb19 0309 	adds.w	r3, r9, r9
 80042e8:	eb4a 040a 	adc.w	r4, sl, sl
 80042ec:	4699      	mov	r9, r3
 80042ee:	46a2      	mov	sl, r4
 80042f0:	eb19 090b 	adds.w	r9, r9, fp
 80042f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004308:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430c:	4689      	mov	r9, r1
 800430e:	4692      	mov	sl, r2
 8004310:	eb1b 0509 	adds.w	r5, fp, r9
 8004314:	eb4c 060a 	adc.w	r6, ip, sl
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4619      	mov	r1, r3
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	f04f 0400 	mov.w	r4, #0
 800432a:	0094      	lsls	r4, r2, #2
 800432c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004330:	008b      	lsls	r3, r1, #2
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	4628      	mov	r0, r5
 8004338:	4631      	mov	r1, r6
 800433a:	f7fb ff45 	bl	80001c8 <__aeabi_uldivmod>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	461a      	mov	r2, r3
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <UART_SetConfig+0x6f4>)
 8004346:	fba3 1302 	umull	r1, r3, r3, r2
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2164      	movs	r1, #100	; 0x64
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	3332      	adds	r3, #50	; 0x32
 8004358:	4a09      	ldr	r2, [pc, #36]	; (8004380 <UART_SetConfig+0x6f4>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	f003 020f 	and.w	r2, r3, #15
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4442      	add	r2, r8
 800436a:	609a      	str	r2, [r3, #8]
}
 800436c:	e7ff      	b.n	800436e <UART_SetConfig+0x6e2>
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	40011000 	.word	0x40011000
 800437c:	40011400 	.word	0x40011400
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004384:	b084      	sub	sp, #16
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	f107 001c 	add.w	r0, r7, #28
 8004392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	d122      	bne.n	80043e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fac6 	bl	8005968 <USB_CoreReset>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e01a      	b.n	8004418 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 faba 	bl	8005968 <USB_CoreReset>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
 800440a:	e005      	b.n	8004418 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10b      	bne.n	8004436 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f043 0206 	orr.w	r2, r3, #6
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004442:	b004      	add	sp, #16
 8004444:	4770      	bx	lr
	...

08004448 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d165      	bne.n	8004528 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a41      	ldr	r2, [pc, #260]	; (8004564 <USB_SetTurnaroundTime+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d906      	bls.n	8004472 <USB_SetTurnaroundTime+0x2a>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a40      	ldr	r2, [pc, #256]	; (8004568 <USB_SetTurnaroundTime+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d802      	bhi.n	8004472 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800446c:	230f      	movs	r3, #15
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e062      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <USB_SetTurnaroundTime+0x120>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d906      	bls.n	8004488 <USB_SetTurnaroundTime+0x40>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <USB_SetTurnaroundTime+0x124>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d802      	bhi.n	8004488 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004482:	230e      	movs	r3, #14
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e057      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a38      	ldr	r2, [pc, #224]	; (800456c <USB_SetTurnaroundTime+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d906      	bls.n	800449e <USB_SetTurnaroundTime+0x56>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a37      	ldr	r2, [pc, #220]	; (8004570 <USB_SetTurnaroundTime+0x128>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d802      	bhi.n	800449e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004498:	230d      	movs	r3, #13
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e04c      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a33      	ldr	r2, [pc, #204]	; (8004570 <USB_SetTurnaroundTime+0x128>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d906      	bls.n	80044b4 <USB_SetTurnaroundTime+0x6c>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a32      	ldr	r2, [pc, #200]	; (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d802      	bhi.n	80044b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ae:	230c      	movs	r3, #12
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	e041      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <USB_SetTurnaroundTime+0x12c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d906      	bls.n	80044ca <USB_SetTurnaroundTime+0x82>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <USB_SetTurnaroundTime+0x130>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d802      	bhi.n	80044ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044c4:	230b      	movs	r3, #11
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e036      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <USB_SetTurnaroundTime+0x130>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d906      	bls.n	80044e0 <USB_SetTurnaroundTime+0x98>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <USB_SetTurnaroundTime+0x134>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d802      	bhi.n	80044e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044da:	230a      	movs	r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e02b      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <USB_SetTurnaroundTime+0x134>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d906      	bls.n	80044f6 <USB_SetTurnaroundTime+0xae>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a25      	ldr	r2, [pc, #148]	; (8004580 <USB_SetTurnaroundTime+0x138>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d802      	bhi.n	80044f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044f0:	2309      	movs	r3, #9
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e020      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <USB_SetTurnaroundTime+0x138>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d906      	bls.n	800450c <USB_SetTurnaroundTime+0xc4>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004506:	2308      	movs	r3, #8
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e015      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <USB_SetTurnaroundTime+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d906      	bls.n	8004522 <USB_SetTurnaroundTime+0xda>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <USB_SetTurnaroundTime+0x140>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d802      	bhi.n	8004522 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800451c:	2307      	movs	r3, #7
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e00a      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004522:	2306      	movs	r3, #6
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e007      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800452e:	2309      	movs	r3, #9
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e001      	b.n	8004538 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004534:	2309      	movs	r3, #9
 8004536:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	00d8acbf 	.word	0x00d8acbf
 8004568:	00e4e1bf 	.word	0x00e4e1bf
 800456c:	00f423ff 	.word	0x00f423ff
 8004570:	0106737f 	.word	0x0106737f
 8004574:	011a499f 	.word	0x011a499f
 8004578:	01312cff 	.word	0x01312cff
 800457c:	014ca43f 	.word	0x014ca43f
 8004580:	016e35ff 	.word	0x016e35ff
 8004584:	01a6ab1f 	.word	0x01a6ab1f
 8004588:	01e847ff 	.word	0x01e847ff

0800458c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d106      	bne.n	80045fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	e00b      	b.n	8004614 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	e001      	b.n	8004614 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e003      	b.n	800461c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004614:	2032      	movs	r0, #50	; 0x32
 8004616:	f7fc fd73 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004624:	b084      	sub	sp, #16
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e009      	b.n	8004658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3340      	adds	r3, #64	; 0x40
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	3301      	adds	r3, #1
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b0e      	cmp	r3, #14
 800465c:	d9f2      	bls.n	8004644 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11c      	bne.n	800469e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
 800469c:	e00b      	b.n	80046b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	4619      	mov	r1, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	461a      	mov	r2, r3
 80046d2:	680b      	ldr	r3, [r1, #0]
 80046d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10c      	bne.n	80046f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046e2:	2100      	movs	r1, #0
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f949 	bl	800497c <USB_SetDevSpeed>
 80046ea:	e008      	b.n	80046fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046ec:	2101      	movs	r1, #1
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f944 	bl	800497c <USB_SetDevSpeed>
 80046f4:	e003      	b.n	80046fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046f6:	2103      	movs	r1, #3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f93f 	bl	800497c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046fe:	2110      	movs	r1, #16
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8f3 	bl	80048ec <USB_FlushTxFifo>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f911 	bl	8004938 <USB_FlushRxFifo>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	461a      	mov	r2, r3
 8004734:	2300      	movs	r3, #0
 8004736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	e043      	b.n	80047d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d118      	bne.n	8004794 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e013      	b.n	80047a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	461a      	mov	r2, r3
 800478c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e008      	b.n	80047a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	461a      	mov	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3301      	adds	r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d3b7      	bcc.n	800474a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e043      	b.n	8004868 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d118      	bne.n	800482a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	461a      	mov	r2, r3
 800480c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e013      	b.n	800483c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e008      	b.n	800483c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	461a      	mov	r2, r3
 800485c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	429a      	cmp	r2, r3
 800486e:	d3b7      	bcc.n	80047e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <USB_DevInit+0x2c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f043 0208 	orr.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048e4:	b004      	add	sp, #16
 80048e6:	4770      	bx	lr
 80048e8:	803c3800 	.word	0x803c3800

080048ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <USB_FlushTxFifo+0x48>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e006      	b.n	8004926 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d0f0      	beq.n	8004906 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	00030d40 	.word	0x00030d40

08004938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2210      	movs	r2, #16
 8004948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <USB_FlushRxFifo+0x40>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d0f0      	beq.n	800494a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e00a      	b.n	80049ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d002      	beq.n	80049e0 <USB_GetDevSpeed+0x32>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d102      	bne.n	80049e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049e0:	2302      	movs	r3, #2
 80049e2:	75fb      	strb	r3, [r7, #23]
 80049e4:	e001      	b.n	80049ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049e6:	230f      	movs	r3, #15
 80049e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d13a      	bne.n	8004a8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d155      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	78db      	ldrb	r3, [r3, #3]
 8004a66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	059b      	lsls	r3, r3, #22
 8004a6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a70:	4313      	orrs	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e036      	b.n	8004af8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11a      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	78db      	ldrb	r3, [r3, #3]
 8004adc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d161      	bne.n	8004be8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3a:	d11f      	bne.n	8004b7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0159      	lsls	r1, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	4619      	mov	r1, r3
 8004be0:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <USB_DeactivateEndpoint+0x1b0>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
 8004be6:	e060      	b.n	8004caa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfe:	d11f      	bne.n	8004c40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4013      	ands	r3, r2
 8004c62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <USB_DeactivateEndpoint+0x1b4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	ec337800 	.word	0xec337800
 8004cbc:	eff37800 	.word	0xeff37800

08004cc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 815c 	bne.w	8004f9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d132      	bne.n	8004d50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d48:	0cdb      	lsrs	r3, r3, #19
 8004d4a:	04db      	lsls	r3, r3, #19
 8004d4c:	6113      	str	r3, [r2, #16]
 8004d4e:	e074      	b.n	8004e3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	0cdb      	lsrs	r3, r3, #19
 8004d6c:	04db      	lsls	r3, r3, #19
 8004d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6959      	ldr	r1, [r3, #20]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	440b      	add	r3, r1
 8004dac:	1e59      	subs	r1, r3, #1
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db6:	04d9      	lsls	r1, r3, #19
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <USB_EPStartXfer+0x370>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	0148      	lsls	r0, r1, #5
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	4401      	add	r1, r0
 8004dc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	0148      	lsls	r0, r1, #5
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	4401      	add	r1, r0
 8004dea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dee:	4313      	orrs	r3, r2
 8004df0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	78db      	ldrb	r3, [r3, #3]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d11f      	bne.n	8004e3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d14b      	bne.n	8004ed8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	78db      	ldrb	r3, [r3, #3]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d128      	bne.n	8004eb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e00f      	b.n	8004eb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e12f      	b.n	8005138 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	78db      	ldrb	r3, [r3, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d015      	beq.n	8004f2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8117 	beq.w	8005138 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f26:	4313      	orrs	r3, r2
 8004f28:	634b      	str	r3, [r1, #52]	; 0x34
 8004f2a:	e105      	b.n	8005138 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e00f      	b.n	8004f7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa2b 	bl	80053ee <USB_WritePacket>
 8004f98:	e0ce      	b.n	8005138 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb4:	0cdb      	lsrs	r3, r3, #19
 8004fb6:	04db      	lsls	r3, r3, #19
 8004fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d126      	bne.n	8005034 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	0148      	lsls	r0, r1, #5
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4401      	add	r1, r0
 8005004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800502a:	6113      	str	r3, [r2, #16]
 800502c:	e036      	b.n	800509c <USB_EPStartXfer+0x3dc>
 800502e:	bf00      	nop
 8005030:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4413      	add	r3, r2
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	8afb      	ldrh	r3, [r7, #22]
 800505a:	04d9      	lsls	r1, r3, #19
 800505c:	4b39      	ldr	r3, [pc, #228]	; (8005144 <USB_EPStartXfer+0x484>)
 800505e:	400b      	ands	r3, r1
 8005060:	69b9      	ldr	r1, [r7, #24]
 8005062:	0148      	lsls	r0, r1, #5
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	4401      	add	r1, r0
 8005068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800506c:	4313      	orrs	r3, r2
 800506e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	8af9      	ldrh	r1, [r7, #22]
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	0148      	lsls	r0, r1, #5
 8005090:	69f9      	ldr	r1, [r7, #28]
 8005092:	4401      	add	r1, r0
 8005094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10d      	bne.n	80050be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	68d9      	ldr	r1, [r3, #12]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ba:	460a      	mov	r2, r1
 80050bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	78db      	ldrb	r3, [r3, #3]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d128      	bne.n	8005118 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d110      	bne.n	80050f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e00f      	b.n	8005118 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	1ff80000 	.word	0x1ff80000

08005148 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 80cd 	bne.w	8005304 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d132      	bne.n	80051d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d0:	0cdb      	lsrs	r3, r3, #19
 80051d2:	04db      	lsls	r3, r3, #19
 80051d4:	6113      	str	r3, [r2, #16]
 80051d6:	e04e      	b.n	8005276 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	0cdb      	lsrs	r3, r3, #19
 80051f4:	04db      	lsls	r3, r3, #19
 80051f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005212:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005216:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800521a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d903      	bls.n	8005230 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	0151      	lsls	r1, r2, #5
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	440a      	add	r2, r1
 8005246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800524e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005266:	6939      	ldr	r1, [r7, #16]
 8005268:	0148      	lsls	r0, r1, #5
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	4401      	add	r1, r0
 800526e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005272:	4313      	orrs	r3, r2
 8005274:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d11e      	bne.n	80052ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	461a      	mov	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e092      	b.n	80053e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d07e      	beq.n	80053e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	2101      	movs	r1, #1
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	6979      	ldr	r1, [r7, #20]
 80052fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fe:	4313      	orrs	r3, r2
 8005300:	634b      	str	r3, [r1, #52]	; 0x34
 8005302:	e06d      	b.n	80053e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531e:	0cdb      	lsrs	r3, r3, #19
 8005320:	04db      	lsls	r3, r3, #19
 8005322:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005346:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005376:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538e:	6939      	ldr	r1, [r7, #16]
 8005390:	0148      	lsls	r0, r1, #5
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	4401      	add	r1, r0
 8005396:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800539a:	4313      	orrs	r3, r2
 800539c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d10d      	bne.n	80053c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68d9      	ldr	r1, [r3, #12]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	460a      	mov	r2, r1
 80053be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b089      	sub	sp, #36	; 0x24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	4611      	mov	r1, r2
 80053fa:	461a      	mov	r2, r3
 80053fc:	460b      	mov	r3, r1
 80053fe:	71fb      	strb	r3, [r7, #7]
 8005400:	4613      	mov	r3, r2
 8005402:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800540c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11a      	bne.n	800544a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005414:	88bb      	ldrh	r3, [r7, #4]
 8005416:	3303      	adds	r3, #3
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800541c:	2300      	movs	r3, #0
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e00f      	b.n	8005442 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	031a      	lsls	r2, r3, #12
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542e:	461a      	mov	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3304      	adds	r3, #4
 800543a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3301      	adds	r3, #1
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d3eb      	bcc.n	8005422 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3724      	adds	r7, #36	; 0x24
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	3303      	adds	r3, #3
 8005472:	089b      	lsrs	r3, r3, #2
 8005474:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e00b      	b.n	8005494 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	601a      	str	r2, [r3, #0]
    pDest++;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	3304      	adds	r3, #4
 800548c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	3301      	adds	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3ef      	bcc.n	800547c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800549c:	69fb      	ldr	r3, [r7, #28]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3724      	adds	r7, #36	; 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d12c      	bne.n	8005520 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db12      	blt.n	80054fe <USB_EPSetStall+0x54>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00f      	beq.n	80054fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e02b      	b.n	8005578 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db12      	blt.n	8005558 <USB_EPSetStall+0xae>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00f      	beq.n	8005558 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005556:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005576:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d128      	bne.n	80055f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d003      	beq.n	80055d2 <USB_EPClearStall+0x4c>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	78db      	ldrb	r3, [r3, #3]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d138      	bne.n	8005644 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e027      	b.n	8005644 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005612:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d003      	beq.n	8005624 <USB_EPClearStall+0x9e>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	78db      	ldrb	r3, [r3, #3]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d10f      	bne.n	8005644 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005642:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005670:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005674:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800568c:	4313      	orrs	r3, r2
 800568e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056b8:	f023 0303 	bic.w	r3, r3, #3
 80056bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056cc:	f023 0302 	bic.w	r3, r3, #2
 80056d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570e:	f043 0302 	orr.w	r3, r3, #2
 8005712:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4013      	ands	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	0c1b      	lsrs	r3, r3, #16
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	b29b      	uxth	r3, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057de:	68bb      	ldr	r3, [r7, #8]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	01db      	lsls	r3, r3, #7
 800581e:	b2db      	uxtb	r3, r3
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800583a:	68bb      	ldr	r3, [r7, #8]
}
 800583c:	4618      	mov	r0, r3
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0301 	and.w	r3, r3, #1
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	460b      	mov	r3, r1
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	333c      	adds	r3, #60	; 0x3c
 80058c2:	3304      	adds	r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4a26      	ldr	r2, [pc, #152]	; (8005964 <USB_EP0_OutStart+0xb8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d90a      	bls.n	80058e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e0:	d101      	bne.n	80058e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e037      	b.n	8005956 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005914:	f043 0318 	orr.w	r3, r3, #24
 8005918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005928:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800592c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800592e:	7afb      	ldrb	r3, [r7, #11]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10f      	bne.n	8005954 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	461a      	mov	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	4f54300a 	.word	0x4f54300a

08005968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <USB_CoreReset+0x64>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e01b      	b.n	80059be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	daf2      	bge.n	8005974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <USB_CoreReset+0x64>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e006      	b.n	80059be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d0f0      	beq.n	800599e <USB_CoreReset+0x36>

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	00030d40 	.word	0x00030d40

080059d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059e0:	f002 f946 	bl	8007c70 <malloc>
 80059e4:	4603      	mov	r3, r0
 80059e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059f6:	2302      	movs	r3, #2
 80059f8:	e066      	b.n	8005ac8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7c1b      	ldrb	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d119      	bne.n	8005a3e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a0e:	2202      	movs	r2, #2
 8005a10:	2181      	movs	r1, #129	; 0x81
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 ff99 	bl	800794a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a22:	2202      	movs	r2, #2
 8005a24:	2101      	movs	r1, #1
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 ff8f 	bl	800794a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2210      	movs	r2, #16
 8005a38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a3c:	e016      	b.n	8005a6c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	2202      	movs	r2, #2
 8005a42:	2181      	movs	r1, #129	; 0x81
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 ff80 	bl	800794a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	2202      	movs	r2, #2
 8005a54:	2101      	movs	r1, #1
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 ff77 	bl	800794a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2210      	movs	r2, #16
 8005a68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	2203      	movs	r2, #3
 8005a70:	2182      	movs	r1, #130	; 0x82
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 ff69 	bl	800794a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7c1b      	ldrb	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aac:	2101      	movs	r1, #1
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f002 f83a 	bl	8007b28 <USBD_LL_PrepareReceive>
 8005ab4:	e007      	b.n	8005ac6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	2101      	movs	r1, #1
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f002 f831 	bl	8007b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ae0:	2181      	movs	r1, #129	; 0x81
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 ff57 	bl	8007996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aee:	2101      	movs	r1, #1
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 ff50 	bl	8007996 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005afe:	2182      	movs	r1, #130	; 0x82
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 ff48 	bl	8007996 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b30:	4618      	mov	r0, r3
 8005b32:	f002 f8a5 	bl	8007c80 <free>
    pdev->pClassData = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b58:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d03a      	beq.n	8005be8 <USBD_CDC_Setup+0xa0>
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	f040 8097 	bne.w	8005ca6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d029      	beq.n	8005bd4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da11      	bge.n	8005bae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b96:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	88d2      	ldrh	r2, [r2, #6]
 8005b9c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b9e:	6939      	ldr	r1, [r7, #16]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fa9d 	bl	80070e6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005bac:	e082      	b.n	8005cb4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	785a      	ldrb	r2, [r3, #1]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	88db      	ldrh	r3, [r3, #6]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bc4:	6939      	ldr	r1, [r7, #16]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fab6 	bl	800713e <USBD_CtlPrepareRx>
    break;
 8005bd2:	e06f      	b.n	8005cb4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	7850      	ldrb	r0, [r2, #1]
 8005be0:	2200      	movs	r2, #0
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	4798      	blx	r3
    break;
 8005be6:	e065      	b.n	8005cb4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b0b      	cmp	r3, #11
 8005bee:	d84f      	bhi.n	8005c90 <USBD_CDC_Setup+0x148>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <USBD_CDC_Setup+0xb0>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c29 	.word	0x08005c29
 8005bfc:	08005c9f 	.word	0x08005c9f
 8005c00:	08005c91 	.word	0x08005c91
 8005c04:	08005c91 	.word	0x08005c91
 8005c08:	08005c91 	.word	0x08005c91
 8005c0c:	08005c91 	.word	0x08005c91
 8005c10:	08005c91 	.word	0x08005c91
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005c91 	.word	0x08005c91
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005c51 	.word	0x08005c51
 8005c24:	08005c79 	.word	0x08005c79
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d107      	bne.n	8005c42 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	2202      	movs	r2, #2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 fa53 	bl	80070e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c40:	e030      	b.n	8005ca4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 f9dd 	bl	8007004 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4e:	e029      	b.n	8005ca4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d107      	bne.n	8005c6a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c5a:	f107 030f 	add.w	r3, r7, #15
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fa3f 	bl	80070e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c68:	e01c      	b.n	8005ca4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f9c9 	bl	8007004 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c72:	2303      	movs	r3, #3
 8005c74:	75fb      	strb	r3, [r7, #23]
      break;
 8005c76:	e015      	b.n	8005ca4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d00f      	beq.n	8005ca2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 f9bd 	bl	8007004 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c8e:	e008      	b.n	8005ca2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f9b6 	bl	8007004 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9c:	e002      	b.n	8005ca4 <USBD_CDC_Setup+0x15c>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e008      	b.n	8005cb4 <USBD_CDC_Setup+0x16c>
      break;
 8005ca2:	bf00      	nop
    }
    break;
 8005ca4:	e006      	b.n	8005cb4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f9ab 	bl	8007004 <USBD_CtlError>
    ret = USBD_FAIL;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	75fb      	strb	r3, [r7, #23]
    break;
 8005cb2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e049      	b.n	8005d76 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3318      	adds	r3, #24
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d029      	beq.n	8005d54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3318      	adds	r3, #24
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	78f9      	ldrb	r1, [r7, #3]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	460b      	mov	r3, r1
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	1a5b      	subs	r3, r3, r1
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4403      	add	r3, r0
 8005d20:	3344      	adds	r3, #68	; 0x44
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d28:	fb03 f301 	mul.w	r3, r3, r1
 8005d2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3318      	adds	r3, #24
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d46:	78f9      	ldrb	r1, [r7, #3]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 feca 	bl	8007ae6 <USBD_LL_Transmit>
 8005d52:	e00f      	b.n	8005d74 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d70:	78fa      	ldrb	r2, [r7, #3]
 8005d72:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e015      	b.n	8005dcc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fee0 	bl	8007b6a <USBD_LL_GetRxDataSize>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005de2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005df4:	2bff      	cmp	r3, #255	; 0xff
 8005df6:	d010      	beq.n	8005e1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e0e:	b292      	uxth	r2, r2
 8005e10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	22ff      	movs	r2, #255	; 0xff
 8005e16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2243      	movs	r2, #67	; 0x43
 8005e30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000094 	.word	0x20000094

08005e44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2243      	movs	r2, #67	; 0x43
 8005e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000050 	.word	0x20000050

08005e64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2243      	movs	r2, #67	; 0x43
 8005e70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	200000d8 	.word	0x200000d8

08005e84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	220a      	movs	r2, #10
 8005e90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e92:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e004      	b.n	8005ec2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e01a      	b.n	8005f80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d114      	bne.n	8005f7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f72:	2181      	movs	r1, #129	; 0x81
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fdb6 	bl	8007ae6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e016      	b.n	8005fd4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7c1b      	ldrb	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb8:	2101      	movs	r1, #1
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fdb4 	bl	8007b28 <USBD_LL_PrepareReceive>
 8005fc0:	e007      	b.n	8005fd2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	2101      	movs	r1, #1
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fdab 	bl	8007b28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e025      	b.n	8006040 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	79fa      	ldrb	r2, [r7, #7]
 8006032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f001 fc21 	bl	800787c <USBD_LL_Init>
 800603a:	4603      	mov	r3, r0
 800603c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800603e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800605c:	2303      	movs	r3, #3
 800605e:	e010      	b.n	8006082 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f107 020e 	add.w	r2, r7, #14
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	4602      	mov	r2, r0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fc3e 	bl	8007914 <USBD_LL_Start>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d009      	beq.n	80060e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	4611      	mov	r1, r2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
  }

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff2c 	bl	8006f90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006146:	461a      	mov	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2b01      	cmp	r3, #1
 800615a:	d00e      	beq.n	800617a <USBD_LL_SetupStage+0x5a>
 800615c:	2b01      	cmp	r3, #1
 800615e:	d302      	bcc.n	8006166 <USBD_LL_SetupStage+0x46>
 8006160:	2b02      	cmp	r3, #2
 8006162:	d014      	beq.n	800618e <USBD_LL_SetupStage+0x6e>
 8006164:	e01d      	b.n	80061a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa18 	bl	80065a4 <USBD_StdDevReq>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e020      	b.n	80061bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa7c 	bl	8006680 <USBD_StdItfReq>
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
      break;
 800618c:	e016      	b.n	80061bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fab8 	bl	800670c <USBD_StdEPReq>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]
      break;
 80061a0:	e00c      	b.n	80061bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fc0f 	bl	80079d4 <USBD_LL_StallEP>
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ba:	bf00      	nop
  }

  return ret;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b086      	sub	sp, #24
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	460b      	mov	r3, r1
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061d4:	7afb      	ldrb	r3, [r7, #11]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d137      	bne.n	800624a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d14a      	bne.n	8006282 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d913      	bls.n	8006220 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	4293      	cmp	r3, r2
 8006210:	bf28      	it	cs
 8006212:	4613      	movcs	r3, r2
 8006214:	461a      	mov	r2, r3
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 ffad 	bl	8007178 <USBD_CtlContinueRx>
 800621e:	e030      	b.n	8006282 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006232:	2b03      	cmp	r3, #3
 8006234:	d105      	bne.n	8006242 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 ffa9 	bl	800719a <USBD_CtlSendStatus>
 8006248:	e01b      	b.n	8006282 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d013      	beq.n	800627e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800625c:	2b03      	cmp	r3, #3
 800625e:	d10e      	bne.n	800627e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	4611      	mov	r1, r2
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	4798      	blx	r3
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	e002      	b.n	8006284 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800627e:	2303      	movs	r3, #3
 8006280:	e000      	b.n	8006284 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	460b      	mov	r3, r1
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800629a:	7afb      	ldrb	r3, [r7, #11]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d16a      	bne.n	8006376 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3314      	adds	r3, #20
 80062a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d155      	bne.n	800635c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d914      	bls.n	80062e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 ff22 	bl	800711c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f001 fc22 	bl	8007b28 <USBD_LL_PrepareReceive>
 80062e4:	e03a      	b.n	800635c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d11c      	bne.n	800632c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d316      	bcc.n	800632c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006308:	429a      	cmp	r2, r3
 800630a:	d20f      	bcs.n	800632c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 ff03 	bl	800711c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800631e:	2300      	movs	r3, #0
 8006320:	2200      	movs	r2, #0
 8006322:	2100      	movs	r1, #0
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f001 fbff 	bl	8007b28 <USBD_LL_PrepareReceive>
 800632a:	e017      	b.n	800635c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800633e:	2b03      	cmp	r3, #3
 8006340:	d105      	bne.n	800634e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800634e:	2180      	movs	r1, #128	; 0x80
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f001 fb3f 	bl	80079d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 ff32 	bl	80071c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d123      	bne.n	80063ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fe9b 	bl	80060a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006374:	e01b      	b.n	80063ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d013      	beq.n	80063aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006388:	2b03      	cmp	r3, #3
 800638a:	d10e      	bne.n	80063aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	7afa      	ldrb	r2, [r7, #11]
 8006396:	4611      	mov	r1, r2
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	e002      	b.n	80063b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e000      	b.n	80063b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6852      	ldr	r2, [r2, #4]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	4611      	mov	r1, r2
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063fc:	2340      	movs	r3, #64	; 0x40
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 faa1 	bl	800794a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2240      	movs	r2, #64	; 0x40
 8006414:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006418:	2340      	movs	r3, #64	; 0x40
 800641a:	2200      	movs	r2, #0
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fa93 	bl	800794a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2240      	movs	r2, #64	; 0x40
 800642e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	78fa      	ldrb	r2, [r7, #3]
 800644a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006492:	2b04      	cmp	r3, #4
 8006494:	d105      	bne.n	80064a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d10b      	bne.n	80064da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6852      	ldr	r2, [r2, #4]
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	4611      	mov	r1, r2
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	4798      	blx	r3
  }

  return USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006566:	b480      	push	{r7}
 8006568:	b087      	sub	sp, #28
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3301      	adds	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006584:	8a3b      	ldrh	r3, [r7, #16]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	b21a      	sxth	r2, r3
 800658a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800658e:	4313      	orrs	r3, r2
 8006590:	b21b      	sxth	r3, r3
 8006592:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006594:	89fb      	ldrh	r3, [r7, #14]
}
 8006596:	4618      	mov	r0, r3
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d004      	beq.n	80065c8 <USBD_StdDevReq+0x24>
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d002      	beq.n	80065c8 <USBD_StdDevReq+0x24>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <USBD_StdDevReq+0x38>
 80065c6:	e050      	b.n	800666a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
    break;
 80065da:	e04b      	b.n	8006674 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	d83c      	bhi.n	800665e <USBD_StdDevReq+0xba>
 80065e4:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <USBD_StdDevReq+0x48>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	08006641 	.word	0x08006641
 80065f0:	08006655 	.word	0x08006655
 80065f4:	0800665f 	.word	0x0800665f
 80065f8:	0800664b 	.word	0x0800664b
 80065fc:	0800665f 	.word	0x0800665f
 8006600:	0800661f 	.word	0x0800661f
 8006604:	08006615 	.word	0x08006615
 8006608:	0800665f 	.word	0x0800665f
 800660c:	08006637 	.word	0x08006637
 8006610:	08006629 	.word	0x08006629
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9ce 	bl	80069b8 <USBD_GetDescriptor>
      break;
 800661c:	e024      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fb33 	bl	8006c8c <USBD_SetAddress>
      break;
 8006626:	e01f      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fb70 	bl	8006d10 <USBD_SetConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
      break;
 8006634:	e018      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fc0d 	bl	8006e58 <USBD_GetConfig>
      break;
 800663e:	e013      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fc3c 	bl	8006ec0 <USBD_GetStatus>
      break;
 8006648:	e00e      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc6a 	bl	8006f26 <USBD_SetFeature>
      break;
 8006652:	e009      	b.n	8006668 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc79 	bl	8006f4e <USBD_ClrFeature>
      break;
 800665c:	e004      	b.n	8006668 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fccf 	bl	8007004 <USBD_CtlError>
      break;
 8006666:	bf00      	nop
    }
    break;
 8006668:	e004      	b.n	8006674 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fcc9 	bl	8007004 <USBD_CtlError>
    break;
 8006672:	bf00      	nop
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop

08006680 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006696:	2b20      	cmp	r3, #32
 8006698:	d003      	beq.n	80066a2 <USBD_StdItfReq+0x22>
 800669a:	2b40      	cmp	r3, #64	; 0x40
 800669c:	d001      	beq.n	80066a2 <USBD_StdItfReq+0x22>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d12a      	bne.n	80066f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d81d      	bhi.n	80066ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	889b      	ldrh	r3, [r3, #4]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d813      	bhi.n	80066e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d110      	bne.n	80066f4 <USBD_StdItfReq+0x74>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fd5e 	bl	800719a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80066de:	e009      	b.n	80066f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc8e 	bl	8007004 <USBD_CtlError>
      break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc89 	bl	8007004 <USBD_CtlError>
      break;
 80066f2:	e000      	b.n	80066f6 <USBD_StdItfReq+0x76>
      break;
 80066f4:	bf00      	nop
    }
    break;
 80066f6:	e004      	b.n	8006702 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc82 	bl	8007004 <USBD_CtlError>
    break;
 8006700:	bf00      	nop
  }

  return ret;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006728:	2b20      	cmp	r3, #32
 800672a:	d004      	beq.n	8006736 <USBD_StdEPReq+0x2a>
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d002      	beq.n	8006736 <USBD_StdEPReq+0x2a>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <USBD_StdEPReq+0x3e>
 8006734:	e135      	b.n	80069a2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
    break;
 8006748:	e130      	b.n	80069ac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d03e      	beq.n	80067d0 <USBD_StdEPReq+0xc4>
 8006752:	2b03      	cmp	r3, #3
 8006754:	d002      	beq.n	800675c <USBD_StdEPReq+0x50>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d077      	beq.n	800684a <USBD_StdEPReq+0x13e>
 800675a:	e11c      	b.n	8006996 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006762:	2b02      	cmp	r3, #2
 8006764:	d002      	beq.n	800676c <USBD_StdEPReq+0x60>
 8006766:	2b03      	cmp	r3, #3
 8006768:	d015      	beq.n	8006796 <USBD_StdEPReq+0x8a>
 800676a:	e02b      	b.n	80067c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00c      	beq.n	800678c <USBD_StdEPReq+0x80>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d009      	beq.n	800678c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f929 	bl	80079d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f925 	bl	80079d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800678a:	e020      	b.n	80067ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc38 	bl	8007004 <USBD_CtlError>
        break;
 8006794:	e01b      	b.n	80067ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_StdEPReq+0xb0>
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d008      	beq.n	80067bc <USBD_StdEPReq+0xb0>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	88db      	ldrh	r3, [r3, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 f90c 	bl	80079d4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fcec 	bl	800719a <USBD_CtlSendStatus>

        break;
 80067c2:	e004      	b.n	80067ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc1c 	bl	8007004 <USBD_CtlError>
        break;
 80067cc:	bf00      	nop
      }
      break;
 80067ce:	e0e7      	b.n	80069a0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d002      	beq.n	80067e0 <USBD_StdEPReq+0xd4>
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d015      	beq.n	800680a <USBD_StdEPReq+0xfe>
 80067de:	e02d      	b.n	800683c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <USBD_StdEPReq+0xf4>
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d009      	beq.n	8006800 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 f8ef 	bl	80079d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f8eb 	bl	80079d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80067fe:	e023      	b.n	8006848 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbfe 	bl	8007004 <USBD_CtlError>
        break;
 8006808:	e01e      	b.n	8006848 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d119      	bne.n	8006846 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f8f6 	bl	8007a12 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fcb7 	bl	800719a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
        }
        break;
 800683a:	e004      	b.n	8006846 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fbe0 	bl	8007004 <USBD_CtlError>
        break;
 8006844:	e000      	b.n	8006848 <USBD_StdEPReq+0x13c>
        break;
 8006846:	bf00      	nop
      }
      break;
 8006848:	e0aa      	b.n	80069a0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	2b02      	cmp	r3, #2
 8006852:	d002      	beq.n	800685a <USBD_StdEPReq+0x14e>
 8006854:	2b03      	cmp	r3, #3
 8006856:	d032      	beq.n	80068be <USBD_StdEPReq+0x1b2>
 8006858:	e097      	b.n	800698a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <USBD_StdEPReq+0x164>
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d004      	beq.n	8006870 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fbcb 	bl	8007004 <USBD_CtlError>
          break;
 800686e:	e091      	b.n	8006994 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	da0b      	bge.n	8006890 <USBD_StdEPReq+0x184>
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	3310      	adds	r3, #16
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	3304      	adds	r3, #4
 800688e:	e00b      	b.n	80068a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	3304      	adds	r3, #4
 80068a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2202      	movs	r2, #2
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fc15 	bl	80070e6 <USBD_CtlSendData>
        break;
 80068bc:	e06a      	b.n	8006994 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80068be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da11      	bge.n	80068ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	3324      	adds	r3, #36	; 0x24
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d117      	bne.n	8006910 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fb8e 	bl	8007004 <USBD_CtlError>
            break;
 80068e8:	e054      	b.n	8006994 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fb7b 	bl	8007004 <USBD_CtlError>
            break;
 800690e:	e041      	b.n	8006994 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006914:	2b00      	cmp	r3, #0
 8006916:	da0b      	bge.n	8006930 <USBD_StdEPReq+0x224>
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	3310      	adds	r3, #16
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	4413      	add	r3, r2
 800692c:	3304      	adds	r3, #4
 800692e:	e00b      	b.n	8006948 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	3304      	adds	r3, #4
 8006948:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <USBD_StdEPReq+0x24a>
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	2b80      	cmp	r3, #128	; 0x80
 8006954:	d103      	bne.n	800695e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e00e      	b.n	800697c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800695e:	7bbb      	ldrb	r3, [r7, #14]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f874 	bl	8007a50 <USBD_LL_IsStallEP>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2201      	movs	r2, #1
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e002      	b.n	800697c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2202      	movs	r2, #2
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fbaf 	bl	80070e6 <USBD_CtlSendData>
          break;
 8006988:	e004      	b.n	8006994 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fb39 	bl	8007004 <USBD_CtlError>
        break;
 8006992:	bf00      	nop
      }
      break;
 8006994:	e004      	b.n	80069a0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fb33 	bl	8007004 <USBD_CtlError>
      break;
 800699e:	bf00      	nop
    }
    break;
 80069a0:	e004      	b.n	80069ac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb2d 	bl	8007004 <USBD_CtlError>
    break;
 80069aa:	bf00      	nop
  }

  return ret;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	885b      	ldrh	r3, [r3, #2]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	2b06      	cmp	r3, #6
 80069da:	f200 8128 	bhi.w	8006c2e <USBD_GetDescriptor+0x276>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBD_GetDescriptor+0x2c>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	08006a59 	.word	0x08006a59
 80069f0:	08006c2f 	.word	0x08006c2f
 80069f4:	08006c2f 	.word	0x08006c2f
 80069f8:	08006bcf 	.word	0x08006bcf
 80069fc:	08006bfb 	.word	0x08006bfb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
    break;
 8006a16:	e112      	b.n	8006c3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	7c1b      	ldrb	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10d      	bne.n	8006a3c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f107 0208 	add.w	r2, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3301      	adds	r3, #1
 8006a36:	2202      	movs	r2, #2
 8006a38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006a3a:	e100      	b.n	8006c3e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f107 0208 	add.w	r2, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	2202      	movs	r2, #2
 8006a54:	701a      	strb	r2, [r3, #0]
    break;
 8006a56:	e0f2      	b.n	8006c3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	885b      	ldrh	r3, [r3, #2]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b05      	cmp	r3, #5
 8006a60:	f200 80ac 	bhi.w	8006bbc <USBD_GetDescriptor+0x204>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <USBD_GetDescriptor+0xb4>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a85 	.word	0x08006a85
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006aed 	.word	0x08006aed
 8006a78:	08006b21 	.word	0x08006b21
 8006a7c:	08006b55 	.word	0x08006b55
 8006a80:	08006b89 	.word	0x08006b89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7c12      	ldrb	r2, [r2, #16]
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006aa6:	e091      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 faaa 	bl	8007004 <USBD_CtlError>
        err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ab6:	e089      	b.n	8006bcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	7c12      	ldrb	r2, [r2, #16]
 8006ad0:	f107 0108 	add.w	r1, r7, #8
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ada:	e077      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa90 	bl	8007004 <USBD_CtlError>
        err++;
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	72fb      	strb	r3, [r7, #11]
      break;
 8006aea:	e06f      	b.n	8006bcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7c12      	ldrb	r2, [r2, #16]
 8006b04:	f107 0108 	add.w	r1, r7, #8
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4798      	blx	r3
 8006b0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b0e:	e05d      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa76 	bl	8007004 <USBD_CtlError>
        err++;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b1e:	e055      	b.n	8006bcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 0108 	add.w	r1, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b42:	e043      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa5c 	bl	8007004 <USBD_CtlError>
        err++;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	72fb      	strb	r3, [r7, #11]
      break;
 8006b52:	e03b      	b.n	8006bcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	7c12      	ldrb	r2, [r2, #16]
 8006b6c:	f107 0108 	add.w	r1, r7, #8
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b76:	e029      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa42 	bl	8007004 <USBD_CtlError>
        err++;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	3301      	adds	r3, #1
 8006b84:	72fb      	strb	r3, [r7, #11]
      break;
 8006b86:	e021      	b.n	8006bcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7c12      	ldrb	r2, [r2, #16]
 8006ba0:	f107 0108 	add.w	r1, r7, #8
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
 8006ba8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006baa:	e00f      	b.n	8006bcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa28 	bl	8007004 <USBD_CtlError>
        err++;
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	72fb      	strb	r3, [r7, #11]
      break;
 8006bba:	e007      	b.n	8006bcc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa20 	bl	8007004 <USBD_CtlError>
      err++;
 8006bc4:	7afb      	ldrb	r3, [r7, #11]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006bca:	bf00      	nop
    }
    break;
 8006bcc:	e037      	b.n	8006c3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7c1b      	ldrb	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	4610      	mov	r0, r2
 8006be4:	4798      	blx	r3
 8006be6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006be8:	e029      	b.n	8006c3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fa09 	bl	8007004 <USBD_CtlError>
      err++;
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	72fb      	strb	r3, [r7, #11]
    break;
 8006bf8:	e021      	b.n	8006c3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7c1b      	ldrb	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10d      	bne.n	8006c1e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	f107 0208 	add.w	r2, r7, #8
 8006c0e:	4610      	mov	r0, r2
 8006c10:	4798      	blx	r3
 8006c12:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	2207      	movs	r2, #7
 8006c1a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006c1c:	e00f      	b.n	8006c3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9ef 	bl	8007004 <USBD_CtlError>
      err++;
 8006c26:	7afb      	ldrb	r3, [r7, #11]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	72fb      	strb	r3, [r7, #11]
    break;
 8006c2c:	e007      	b.n	8006c3e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f9e7 	bl	8007004 <USBD_CtlError>
    err++;
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	72fb      	strb	r3, [r7, #11]
    break;
 8006c3c:	bf00      	nop
  }

  if (err != 0U)
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11e      	bne.n	8006c82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	88db      	ldrh	r3, [r3, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d016      	beq.n	8006c7a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88da      	ldrh	r2, [r3, #6]
 8006c56:	893b      	ldrh	r3, [r7, #8]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	bf28      	it	cs
 8006c5c:	4613      	movcs	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c62:	893b      	ldrh	r3, [r7, #8]
 8006c64:	461a      	mov	r2, r3
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa3c 	bl	80070e6 <USBD_CtlSendData>
 8006c6e:	e009      	b.n	8006c84 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9c6 	bl	8007004 <USBD_CtlError>
 8006c78:	e004      	b.n	8006c84 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa8d 	bl	800719a <USBD_CtlSendStatus>
 8006c80:	e000      	b.n	8006c84 <USBD_GetDescriptor+0x2cc>
    return;
 8006c82:	bf00      	nop
    }
  }
}
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop

08006c8c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	889b      	ldrh	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d130      	bne.n	8006d00 <USBD_SetAddress+0x74>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d12c      	bne.n	8006d00 <USBD_SetAddress+0x74>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	2b7f      	cmp	r3, #127	; 0x7f
 8006cac:	d828      	bhi.n	8006d00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d104      	bne.n	8006cce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f99c 	bl	8007004 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ccc:	e01c      	b.n	8006d08 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7bfa      	ldrb	r2, [r7, #15]
 8006cd2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fee4 	bl	8007aa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa5a 	bl	800719a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf4:	e008      	b.n	8006d08 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfe:	e003      	b.n	8006d08 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f97e 	bl	8007004 <USBD_CtlError>
  }
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	885b      	ldrh	r3, [r3, #2]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d28:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d905      	bls.n	8006d3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f966 	bl	8007004 <USBD_CtlError>
    return USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e087      	b.n	8006e4c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d002      	beq.n	8006d4c <USBD_SetConfig+0x3c>
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d025      	beq.n	8006d96 <USBD_SetConfig+0x86>
 8006d4a:	e071      	b.n	8006e30 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006d4c:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01c      	beq.n	8006d8e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006d54:	4b3f      	ldr	r3, [pc, #252]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d5e:	4b3d      	ldr	r3, [pc, #244]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff f9a7 	bl	80060b8 <USBD_SetClassConfig>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f944 	bl	8007004 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d7c:	e065      	b.n	8006e4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa0b 	bl	800719a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2203      	movs	r2, #3
 8006d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d8c:	e05d      	b.n	8006e4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa03 	bl	800719a <USBD_CtlSendStatus>
    break;
 8006d94:	e059      	b.n	8006e4a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006d96:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <USBD_SetConfig+0x144>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d112      	bne.n	8006dc4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006da6:	4b2b      	ldr	r3, [pc, #172]	; (8006e54 <USBD_SetConfig+0x144>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <USBD_SetConfig+0x144>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f99a 	bl	80060f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f9ec 	bl	800719a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006dc2:	e042      	b.n	8006e4a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006dc4:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <USBD_SetConfig+0x144>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d02a      	beq.n	8006e28 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff f988 	bl	80060f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006de0:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <USBD_SetConfig+0x144>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dea:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <USBD_SetConfig+0x144>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff f961 	bl	80060b8 <USBD_SetClassConfig>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00f      	beq.n	8006e20 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f8fe 	bl	8007004 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff f96d 	bl	80060f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e1e:	e014      	b.n	8006e4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9ba 	bl	800719a <USBD_CtlSendStatus>
    break;
 8006e26:	e010      	b.n	8006e4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9b6 	bl	800719a <USBD_CtlSendStatus>
    break;
 8006e2e:	e00c      	b.n	8006e4a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8e6 	bl	8007004 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <USBD_SetConfig+0x144>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f956 	bl	80060f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006e44:	2303      	movs	r3, #3
 8006e46:	73fb      	strb	r3, [r7, #15]
    break;
 8006e48:	bf00      	nop
  }

  return ret;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000204 	.word	0x20000204

08006e58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	88db      	ldrh	r3, [r3, #6]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d004      	beq.n	8006e74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f8c9 	bl	8007004 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006e72:	e021      	b.n	8006eb8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	db17      	blt.n	8006eae <USBD_GetConfig+0x56>
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	dd02      	ble.n	8006e88 <USBD_GetConfig+0x30>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d00b      	beq.n	8006e9e <USBD_GetConfig+0x46>
 8006e86:	e012      	b.n	8006eae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3308      	adds	r3, #8
 8006e92:	2201      	movs	r2, #1
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f925 	bl	80070e6 <USBD_CtlSendData>
      break;
 8006e9c:	e00c      	b.n	8006eb8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f91d 	bl	80070e6 <USBD_CtlSendData>
      break;
 8006eac:	e004      	b.n	8006eb8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f8a7 	bl	8007004 <USBD_CtlError>
      break;
 8006eb6:	bf00      	nop
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d81e      	bhi.n	8006f14 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d004      	beq.n	8006ee8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f88f 	bl	8007004 <USBD_CtlError>
      break;
 8006ee6:	e01a      	b.n	8006f1e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f043 0202 	orr.w	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	330c      	adds	r3, #12
 8006f08:	2202      	movs	r2, #2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f8ea 	bl	80070e6 <USBD_CtlSendData>
    break;
 8006f12:	e004      	b.n	8006f1e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f874 	bl	8007004 <USBD_CtlError>
    break;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	885b      	ldrh	r3, [r3, #2]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d106      	bne.n	8006f46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f92a 	bl	800719a <USBD_CtlSendStatus>
  }
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d80b      	bhi.n	8006f7c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	885b      	ldrh	r3, [r3, #2]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d10c      	bne.n	8006f86 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f910 	bl	800719a <USBD_CtlSendStatus>
      }
      break;
 8006f7a:	e004      	b.n	8006f86 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f840 	bl	8007004 <USBD_CtlError>
      break;
 8006f84:	e000      	b.n	8006f88 <USBD_ClrFeature+0x3a>
      break;
 8006f86:	bf00      	nop
  }
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff fad3 	bl	8006566 <SWAPBYTE>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fac6 	bl	8006566 <SWAPBYTE>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff fab9 	bl	8006566 <SWAPBYTE>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	80da      	strh	r2, [r3, #6]
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800700e:	2180      	movs	r1, #128	; 0x80
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fcdf 	bl	80079d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007016:	2100      	movs	r1, #0
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fcdb 	bl	80079d4 <USBD_LL_StallEP>
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d036      	beq.n	80070aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007040:	6938      	ldr	r0, [r7, #16]
 8007042:	f000 f836 	bl	80070b2 <USBD_GetLen>
 8007046:	4603      	mov	r3, r0
 8007048:	3301      	adds	r3, #1
 800704a:	b29b      	uxth	r3, r3
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	3301      	adds	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	2203      	movs	r2, #3
 800706e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	3301      	adds	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007076:	e013      	b.n	80070a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3301      	adds	r3, #1
 8007088:	613b      	str	r3, [r7, #16]
    idx++;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
    idx++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e7      	bne.n	8007078 <USBD_GetString+0x52>
 80070a8:	e000      	b.n	80070ac <USBD_GetString+0x86>
    return;
 80070aa:	bf00      	nop
  }
}
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070c2:	e005      	b.n	80070d0 <USBD_GetLen+0x1e>
  {
    len++;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	3301      	adds	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <USBD_GetLen+0x12>
  }

  return len;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	2100      	movs	r1, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fcea 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fcd9 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2203      	movs	r2, #3
 800714e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	2100      	movs	r1, #0
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fcdd 	bl	8007b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	2100      	movs	r1, #0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fccc 	bl	8007b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2204      	movs	r2, #4
 80071a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071aa:	2300      	movs	r3, #0
 80071ac:	2200      	movs	r2, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fc98 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2205      	movs	r2, #5
 80071cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071d0:	2300      	movs	r3, #0
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fca6 	bl	8007b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071ec:	2200      	movs	r2, #0
 80071ee:	4912      	ldr	r1, [pc, #72]	; (8007238 <MX_USB_DEVICE_Init+0x50>)
 80071f0:	4812      	ldr	r0, [pc, #72]	; (800723c <MX_USB_DEVICE_Init+0x54>)
 80071f2:	f7fe fef3 	bl	8005fdc <USBD_Init>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071fc:	f7f9 fd9a 	bl	8000d34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007200:	490f      	ldr	r1, [pc, #60]	; (8007240 <MX_USB_DEVICE_Init+0x58>)
 8007202:	480e      	ldr	r0, [pc, #56]	; (800723c <MX_USB_DEVICE_Init+0x54>)
 8007204:	f7fe ff20 	bl	8006048 <USBD_RegisterClass>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800720e:	f7f9 fd91 	bl	8000d34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007212:	490c      	ldr	r1, [pc, #48]	; (8007244 <MX_USB_DEVICE_Init+0x5c>)
 8007214:	4809      	ldr	r0, [pc, #36]	; (800723c <MX_USB_DEVICE_Init+0x54>)
 8007216:	f7fe fe45 	bl	8005ea4 <USBD_CDC_RegisterInterface>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007220:	f7f9 fd88 	bl	8000d34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007224:	4805      	ldr	r0, [pc, #20]	; (800723c <MX_USB_DEVICE_Init+0x54>)
 8007226:	f7fe ff30 	bl	800608a <USBD_Start>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007230:	f7f9 fd80 	bl	8000d34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000130 	.word	0x20000130
 800723c:	20000294 	.word	0x20000294
 8007240:	20000018 	.word	0x20000018
 8007244:	2000011c 	.word	0x2000011c

08007248 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800724c:	2200      	movs	r2, #0
 800724e:	4905      	ldr	r1, [pc, #20]	; (8007264 <CDC_Init_FS+0x1c>)
 8007250:	4805      	ldr	r0, [pc, #20]	; (8007268 <CDC_Init_FS+0x20>)
 8007252:	f7fe fe3c 	bl	8005ece <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007256:	4905      	ldr	r1, [pc, #20]	; (800726c <CDC_Init_FS+0x24>)
 8007258:	4803      	ldr	r0, [pc, #12]	; (8007268 <CDC_Init_FS+0x20>)
 800725a:	f7fe fe51 	bl	8005f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800725e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000d64 	.word	0x20000d64
 8007268:	20000294 	.word	0x20000294
 800726c:	20000564 	.word	0x20000564

08007270 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007274:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007276:	4618      	mov	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	6039      	str	r1, [r7, #0]
 800728a:	71fb      	strb	r3, [r7, #7]
 800728c:	4613      	mov	r3, r2
 800728e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b23      	cmp	r3, #35	; 0x23
 8007294:	d84a      	bhi.n	800732c <CDC_Control_FS+0xac>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <CDC_Control_FS+0x1c>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	0800732d 	.word	0x0800732d
 80072a0:	0800732d 	.word	0x0800732d
 80072a4:	0800732d 	.word	0x0800732d
 80072a8:	0800732d 	.word	0x0800732d
 80072ac:	0800732d 	.word	0x0800732d
 80072b0:	0800732d 	.word	0x0800732d
 80072b4:	0800732d 	.word	0x0800732d
 80072b8:	0800732d 	.word	0x0800732d
 80072bc:	0800732d 	.word	0x0800732d
 80072c0:	0800732d 	.word	0x0800732d
 80072c4:	0800732d 	.word	0x0800732d
 80072c8:	0800732d 	.word	0x0800732d
 80072cc:	0800732d 	.word	0x0800732d
 80072d0:	0800732d 	.word	0x0800732d
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	0800732d 	.word	0x0800732d
 80072dc:	0800732d 	.word	0x0800732d
 80072e0:	0800732d 	.word	0x0800732d
 80072e4:	0800732d 	.word	0x0800732d
 80072e8:	0800732d 	.word	0x0800732d
 80072ec:	0800732d 	.word	0x0800732d
 80072f0:	0800732d 	.word	0x0800732d
 80072f4:	0800732d 	.word	0x0800732d
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	0800732d 	.word	0x0800732d
 8007300:	0800732d 	.word	0x0800732d
 8007304:	0800732d 	.word	0x0800732d
 8007308:	0800732d 	.word	0x0800732d
 800730c:	0800732d 	.word	0x0800732d
 8007310:	0800732d 	.word	0x0800732d
 8007314:	0800732d 	.word	0x0800732d
 8007318:	0800732d 	.word	0x0800732d
 800731c:	0800732d 	.word	0x0800732d
 8007320:	0800732d 	.word	0x0800732d
 8007324:	0800732d 	.word	0x0800732d
 8007328:	0800732d 	.word	0x0800732d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800732c:	bf00      	nop
  }

  return (USBD_OK);
 800732e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007330:	4618      	mov	r0, r3
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4805      	ldr	r0, [pc, #20]	; (8007360 <CDC_Receive_FS+0x24>)
 800734a:	f7fe fdd9 	bl	8005f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800734e:	4804      	ldr	r0, [pc, #16]	; (8007360 <CDC_Receive_FS+0x24>)
 8007350:	f7fe fe1a 	bl	8005f88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007354:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000294 	.word	0x20000294

08007364 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <CDC_Transmit_FS+0x48>)
 8007376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800737a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007386:	2301      	movs	r3, #1
 8007388:	e00b      	b.n	80073a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800738a:	887b      	ldrh	r3, [r7, #2]
 800738c:	461a      	mov	r2, r3
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4806      	ldr	r0, [pc, #24]	; (80073ac <CDC_Transmit_FS+0x48>)
 8007392:	f7fe fd9c 	bl	8005ece <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007396:	4805      	ldr	r0, [pc, #20]	; (80073ac <CDC_Transmit_FS+0x48>)
 8007398:	f7fe fdc6 	bl	8005f28 <USBD_CDC_TransmitPacket>
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000294 	.word	0x20000294

080073b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4613      	mov	r3, r2
 80073bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2212      	movs	r2, #18
 80073e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	2000014c 	.word	0x2000014c

080073f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2204      	movs	r2, #4
 8007408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000160 	.word	0x20000160

0800741c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d105      	bne.n	800743a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4907      	ldr	r1, [pc, #28]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
 8007432:	4808      	ldr	r0, [pc, #32]	; (8007454 <USBD_FS_ProductStrDescriptor+0x38>)
 8007434:	f7ff fdf7 	bl	8007026 <USBD_GetString>
 8007438:	e004      	b.n	8007444 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4904      	ldr	r1, [pc, #16]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
 800743e:	4805      	ldr	r0, [pc, #20]	; (8007454 <USBD_FS_ProductStrDescriptor+0x38>)
 8007440:	f7ff fdf1 	bl	8007026 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20001564 	.word	0x20001564
 8007454:	08007f90 	.word	0x08007f90

08007458 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007468:	4804      	ldr	r0, [pc, #16]	; (800747c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800746a:	f7ff fddc 	bl	8007026 <USBD_GetString>
  return USBD_StrDesc;
 800746e:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20001564 	.word	0x20001564
 800747c:	08007fa8 	.word	0x08007fa8

08007480 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	221a      	movs	r2, #26
 8007490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007492:	f000 f843 	bl	800751c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007496:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000164 	.word	0x20000164

080074a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ba:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074bc:	f7ff fdb3 	bl	8007026 <USBD_GetString>
 80074c0:	e004      	b.n	80074cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074c8:	f7ff fdad 	bl	8007026 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20001564 	.word	0x20001564
 80074dc:	08007fbc 	.word	0x08007fbc

080074e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4907      	ldr	r1, [pc, #28]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074f6:	4808      	ldr	r0, [pc, #32]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074f8:	f7ff fd95 	bl	8007026 <USBD_GetString>
 80074fc:	e004      	b.n	8007508 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4904      	ldr	r1, [pc, #16]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007502:	4805      	ldr	r0, [pc, #20]	; (8007518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007504:	f7ff fd8f 	bl	8007026 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20001564 	.word	0x20001564
 8007518:	08007fc8 	.word	0x08007fc8

0800751c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <Get_SerialNum+0x44>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <Get_SerialNum+0x48>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800752e:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <Get_SerialNum+0x4c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007542:	2208      	movs	r2, #8
 8007544:	4909      	ldr	r1, [pc, #36]	; (800756c <Get_SerialNum+0x50>)
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f814 	bl	8007574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800754c:	2204      	movs	r2, #4
 800754e:	4908      	ldr	r1, [pc, #32]	; (8007570 <Get_SerialNum+0x54>)
 8007550:	68b8      	ldr	r0, [r7, #8]
 8007552:	f000 f80f 	bl	8007574 <IntToUnicode>
  }
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	1fff7a10 	.word	0x1fff7a10
 8007564:	1fff7a14 	.word	0x1fff7a14
 8007568:	1fff7a18 	.word	0x1fff7a18
 800756c:	20000166 	.word	0x20000166
 8007570:	20000176 	.word	0x20000176

08007574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007586:	2300      	movs	r3, #0
 8007588:	75fb      	strb	r3, [r7, #23]
 800758a:	e027      	b.n	80075dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0f1b      	lsrs	r3, r3, #28
 8007590:	2b09      	cmp	r3, #9
 8007592:	d80b      	bhi.n	80075ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	0f1b      	lsrs	r3, r3, #28
 8007598:	b2da      	uxtb	r2, r3
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4619      	mov	r1, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	440b      	add	r3, r1
 80075a4:	3230      	adds	r2, #48	; 0x30
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	e00a      	b.n	80075c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	0f1b      	lsrs	r3, r3, #28
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4619      	mov	r1, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	440b      	add	r3, r1
 80075bc:	3237      	adds	r2, #55	; 0x37
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	3301      	adds	r3, #1
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	3301      	adds	r3, #1
 80075da:	75fb      	strb	r3, [r7, #23]
 80075dc:	7dfa      	ldrb	r2, [r7, #23]
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3d3      	bcc.n	800758c <IntToUnicode+0x18>
  }
}
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f8:	f107 0314 	add.w	r3, r7, #20
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007610:	d13a      	bne.n	8007688 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007612:	2300      	movs	r3, #0
 8007614:	613b      	str	r3, [r7, #16]
 8007616:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	4a1d      	ldr	r2, [pc, #116]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 800761c:	f043 0301 	orr.w	r3, r3, #1
 8007620:	6313      	str	r3, [r2, #48]	; 0x30
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800762e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007634:	2302      	movs	r3, #2
 8007636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800763c:	2303      	movs	r3, #3
 800763e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007640:	230a      	movs	r3, #10
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007644:	f107 0314 	add.w	r3, r7, #20
 8007648:	4619      	mov	r1, r3
 800764a:	4812      	ldr	r0, [pc, #72]	; (8007694 <HAL_PCD_MspInit+0xa4>)
 800764c:	f7f9 fe8c 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007650:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007654:	4a0e      	ldr	r2, [pc, #56]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765a:	6353      	str	r3, [r2, #52]	; 0x34
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007664:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 8007666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800766a:	6453      	str	r3, [r2, #68]	; 0x44
 800766c:	4b08      	ldr	r3, [pc, #32]	; (8007690 <HAL_PCD_MspInit+0xa0>)
 800766e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	2043      	movs	r0, #67	; 0x43
 800767e:	f7f9 fe3c 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007682:	2043      	movs	r0, #67	; 0x43
 8007684:	f7f9 fe55 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007688:	bf00      	nop
 800768a:	3728      	adds	r7, #40	; 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40023800 	.word	0x40023800
 8007694:	40020000 	.word	0x40020000

08007698 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fe fd36 	bl	8006120 <USBD_LL_SetupStage>
}
 80076b4:	bf00      	nop
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7fe fd6e 	bl	80061c6 <USBD_LL_DataOutStage>
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007704:	78fa      	ldrb	r2, [r7, #3]
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	3348      	adds	r3, #72	; 0x48
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	4619      	mov	r1, r3
 800771a:	f7fe fdb7 	bl	800628c <USBD_LL_DataInStage>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe febb 	bl	80064b0 <USBD_LL_SOF>
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800774a:	2301      	movs	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
 800775a:	e008      	b.n	800776e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d102      	bne.n	800776a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
 8007768:	e001      	b.n	800776e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800776a:	f7f9 fae3 	bl	8000d34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007774:	7bfa      	ldrb	r2, [r7, #15]
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fe5e 	bl	800643a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fe17 	bl	80063b8 <USBD_LL_Reset>
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fe59 	bl	800645a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077c8:	4b04      	ldr	r3, [pc, #16]	; (80077dc <HAL_PCD_SuspendCallback+0x48>)
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	4a03      	ldr	r2, [pc, #12]	; (80077dc <HAL_PCD_SuspendCallback+0x48>)
 80077ce:	f043 0306 	orr.w	r3, r3, #6
 80077d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	e000ed00 	.word	0xe000ed00

080077e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fe48 	bl	8006484 <USBD_LL_Resume>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fe73 	bl	80064fe <USBD_LL_IsoOUTIncomplete>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fe54 	bl	80064e4 <USBD_LL_IsoINIncomplete>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe fe60 	bl	8006518 <USBD_LL_DevConnected>
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fe5d 	bl	800652e <USBD_LL_DevDisconnected>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d13c      	bne.n	8007906 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800788c:	4a20      	ldr	r2, [pc, #128]	; (8007910 <USBD_LL_Init+0x94>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <USBD_LL_Init+0x94>)
 8007898:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800789c:	4b1c      	ldr	r3, [pc, #112]	; (8007910 <USBD_LL_Init+0x94>)
 800789e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <USBD_LL_Init+0x94>)
 80078a6:	2204      	movs	r2, #4
 80078a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <USBD_LL_Init+0x94>)
 80078ac:	2202      	movs	r2, #2
 80078ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <USBD_LL_Init+0x94>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078b6:	4b16      	ldr	r3, [pc, #88]	; (8007910 <USBD_LL_Init+0x94>)
 80078b8:	2202      	movs	r2, #2
 80078ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <USBD_LL_Init+0x94>)
 80078be:	2200      	movs	r2, #0
 80078c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <USBD_LL_Init+0x94>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078c8:	4b11      	ldr	r3, [pc, #68]	; (8007910 <USBD_LL_Init+0x94>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078ce:	4b10      	ldr	r3, [pc, #64]	; (8007910 <USBD_LL_Init+0x94>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <USBD_LL_Init+0x94>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078da:	480d      	ldr	r0, [pc, #52]	; (8007910 <USBD_LL_Init+0x94>)
 80078dc:	f7f9 ff33 	bl	8001746 <HAL_PCD_Init>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078e6:	f7f9 fa25 	bl	8000d34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ea:	2180      	movs	r1, #128	; 0x80
 80078ec:	4808      	ldr	r0, [pc, #32]	; (8007910 <USBD_LL_Init+0x94>)
 80078ee:	f7fb f890 	bl	8002a12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078f2:	2240      	movs	r2, #64	; 0x40
 80078f4:	2100      	movs	r1, #0
 80078f6:	4806      	ldr	r0, [pc, #24]	; (8007910 <USBD_LL_Init+0x94>)
 80078f8:	f7fb f844 	bl	8002984 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078fc:	2280      	movs	r2, #128	; 0x80
 80078fe:	2101      	movs	r1, #1
 8007900:	4803      	ldr	r0, [pc, #12]	; (8007910 <USBD_LL_Init+0x94>)
 8007902:	f7fb f83f 	bl	8002984 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20001764 	.word	0x20001764

08007914 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800792a:	4618      	mov	r0, r3
 800792c:	f7fa f828 	bl	8001980 <HAL_PCD_Start>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f92a 	bl	8007b90 <USBD_Get_USB_Status>
 800793c:	4603      	mov	r3, r0
 800793e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	461a      	mov	r2, r3
 8007958:	4603      	mov	r3, r0
 800795a:	70fb      	strb	r3, [r7, #3]
 800795c:	460b      	mov	r3, r1
 800795e:	70bb      	strb	r3, [r7, #2]
 8007960:	4613      	mov	r3, r2
 8007962:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007972:	78bb      	ldrb	r3, [r7, #2]
 8007974:	883a      	ldrh	r2, [r7, #0]
 8007976:	78f9      	ldrb	r1, [r7, #3]
 8007978:	f7fa fc0c 	bl	8002194 <HAL_PCD_EP_Open>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f904 	bl	8007b90 <USBD_Get_USB_Status>
 8007988:	4603      	mov	r3, r0
 800798a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798c:	7bbb      	ldrb	r3, [r7, #14]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	4611      	mov	r1, r2
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fa fc55 	bl	8002264 <HAL_PCD_EP_Close>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f8e5 	bl	8007b90 <USBD_Get_USB_Status>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fa fd2d 	bl	8002452 <HAL_PCD_EP_SetStall>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f8c6 	bl	8007b90 <USBD_Get_USB_Status>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fa fd72 	bl	800251a <HAL_PCD_EP_ClrStall>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f8a7 	bl	8007b90 <USBD_Get_USB_Status>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da0b      	bge.n	8007a84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	333e      	adds	r3, #62	; 0x3e
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	e00b      	b.n	8007a9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ac2:	78fa      	ldrb	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fa fb3f 	bl	800214a <HAL_PCD_SetAddress>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f85c 	bl	8007b90 <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	460b      	mov	r3, r1
 8007af4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b04:	7af9      	ldrb	r1, [r7, #11]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f7fa fc58 	bl	80023be <HAL_PCD_EP_Transmit>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f83b 	bl	8007b90 <USBD_Get_USB_Status>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	460b      	mov	r3, r1
 8007b36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b46:	7af9      	ldrb	r1, [r7, #11]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f7fa fbd4 	bl	80022f8 <HAL_PCD_EP_Receive>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f81a 	bl	8007b90 <USBD_Get_USB_Status>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fa fc04 	bl	800238e <HAL_PCD_EP_GetRxCount>
 8007b86:	4603      	mov	r3, r0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d817      	bhi.n	8007bd4 <USBD_Get_USB_Status+0x44>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_Get_USB_Status+0x1c>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007bc3 	.word	0x08007bc3
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bcf 	.word	0x08007bcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e00b      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e008      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	e005      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd2:	e002      	b.n	8007bda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd8:	bf00      	nop
  }
  return usb_status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <__errno>:
 8007be8:	4b01      	ldr	r3, [pc, #4]	; (8007bf0 <__errno+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	20000180 	.word	0x20000180

08007bf4 <__libc_init_array>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	4e0d      	ldr	r6, [pc, #52]	; (8007c2c <__libc_init_array+0x38>)
 8007bf8:	4c0d      	ldr	r4, [pc, #52]	; (8007c30 <__libc_init_array+0x3c>)
 8007bfa:	1ba4      	subs	r4, r4, r6
 8007bfc:	10a4      	asrs	r4, r4, #2
 8007bfe:	2500      	movs	r5, #0
 8007c00:	42a5      	cmp	r5, r4
 8007c02:	d109      	bne.n	8007c18 <__libc_init_array+0x24>
 8007c04:	4e0b      	ldr	r6, [pc, #44]	; (8007c34 <__libc_init_array+0x40>)
 8007c06:	4c0c      	ldr	r4, [pc, #48]	; (8007c38 <__libc_init_array+0x44>)
 8007c08:	f000 f94e 	bl	8007ea8 <_init>
 8007c0c:	1ba4      	subs	r4, r4, r6
 8007c0e:	10a4      	asrs	r4, r4, #2
 8007c10:	2500      	movs	r5, #0
 8007c12:	42a5      	cmp	r5, r4
 8007c14:	d105      	bne.n	8007c22 <__libc_init_array+0x2e>
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c1c:	4798      	blx	r3
 8007c1e:	3501      	adds	r5, #1
 8007c20:	e7ee      	b.n	8007c00 <__libc_init_array+0xc>
 8007c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c26:	4798      	blx	r3
 8007c28:	3501      	adds	r5, #1
 8007c2a:	e7f2      	b.n	8007c12 <__libc_init_array+0x1e>
 8007c2c:	08008020 	.word	0x08008020
 8007c30:	08008020 	.word	0x08008020
 8007c34:	08008020 	.word	0x08008020
 8007c38:	08008024 	.word	0x08008024

08007c3c <__itoa>:
 8007c3c:	1e93      	subs	r3, r2, #2
 8007c3e:	2b22      	cmp	r3, #34	; 0x22
 8007c40:	b510      	push	{r4, lr}
 8007c42:	460c      	mov	r4, r1
 8007c44:	d904      	bls.n	8007c50 <__itoa+0x14>
 8007c46:	2300      	movs	r3, #0
 8007c48:	700b      	strb	r3, [r1, #0]
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	2a0a      	cmp	r2, #10
 8007c52:	d109      	bne.n	8007c68 <__itoa+0x2c>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	da07      	bge.n	8007c68 <__itoa+0x2c>
 8007c58:	232d      	movs	r3, #45	; 0x2d
 8007c5a:	700b      	strb	r3, [r1, #0]
 8007c5c:	4240      	negs	r0, r0
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4421      	add	r1, r4
 8007c62:	f000 f8e1 	bl	8007e28 <__utoa>
 8007c66:	e7f1      	b.n	8007c4c <__itoa+0x10>
 8007c68:	2100      	movs	r1, #0
 8007c6a:	e7f9      	b.n	8007c60 <__itoa+0x24>

08007c6c <itoa>:
 8007c6c:	f7ff bfe6 	b.w	8007c3c <__itoa>

08007c70 <malloc>:
 8007c70:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <malloc+0xc>)
 8007c72:	4601      	mov	r1, r0
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	f000 b86d 	b.w	8007d54 <_malloc_r>
 8007c7a:	bf00      	nop
 8007c7c:	20000180 	.word	0x20000180

08007c80 <free>:
 8007c80:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <free+0xc>)
 8007c82:	4601      	mov	r1, r0
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	f000 b817 	b.w	8007cb8 <_free_r>
 8007c8a:	bf00      	nop
 8007c8c:	20000180 	.word	0x20000180

08007c90 <memcpy>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	1e43      	subs	r3, r0, #1
 8007c94:	440a      	add	r2, r1
 8007c96:	4291      	cmp	r1, r2
 8007c98:	d100      	bne.n	8007c9c <memcpy+0xc>
 8007c9a:	bd10      	pop	{r4, pc}
 8007c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ca4:	e7f7      	b.n	8007c96 <memcpy+0x6>

08007ca6 <memset>:
 8007ca6:	4402      	add	r2, r0
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d100      	bne.n	8007cb0 <memset+0xa>
 8007cae:	4770      	bx	lr
 8007cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb4:	e7f9      	b.n	8007caa <memset+0x4>
	...

08007cb8 <_free_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4605      	mov	r5, r0
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d045      	beq.n	8007d4c <_free_r+0x94>
 8007cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc4:	1f0c      	subs	r4, r1, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb8      	it	lt
 8007cca:	18e4      	addlt	r4, r4, r3
 8007ccc:	f000 f8ea 	bl	8007ea4 <__malloc_lock>
 8007cd0:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <_free_r+0x98>)
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	b933      	cbnz	r3, 8007ce6 <_free_r+0x2e>
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	6014      	str	r4, [r2, #0]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce2:	f000 b8e0 	b.w	8007ea6 <__malloc_unlock>
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	d90c      	bls.n	8007d04 <_free_r+0x4c>
 8007cea:	6821      	ldr	r1, [r4, #0]
 8007cec:	1862      	adds	r2, r4, r1
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	bf04      	itt	eq
 8007cf2:	681a      	ldreq	r2, [r3, #0]
 8007cf4:	685b      	ldreq	r3, [r3, #4]
 8007cf6:	6063      	str	r3, [r4, #4]
 8007cf8:	bf04      	itt	eq
 8007cfa:	1852      	addeq	r2, r2, r1
 8007cfc:	6022      	streq	r2, [r4, #0]
 8007cfe:	6004      	str	r4, [r0, #0]
 8007d00:	e7ec      	b.n	8007cdc <_free_r+0x24>
 8007d02:	4613      	mov	r3, r2
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	b10a      	cbz	r2, 8007d0c <_free_r+0x54>
 8007d08:	42a2      	cmp	r2, r4
 8007d0a:	d9fa      	bls.n	8007d02 <_free_r+0x4a>
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	1858      	adds	r0, r3, r1
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d10b      	bne.n	8007d2c <_free_r+0x74>
 8007d14:	6820      	ldr	r0, [r4, #0]
 8007d16:	4401      	add	r1, r0
 8007d18:	1858      	adds	r0, r3, r1
 8007d1a:	4282      	cmp	r2, r0
 8007d1c:	6019      	str	r1, [r3, #0]
 8007d1e:	d1dd      	bne.n	8007cdc <_free_r+0x24>
 8007d20:	6810      	ldr	r0, [r2, #0]
 8007d22:	6852      	ldr	r2, [r2, #4]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	4401      	add	r1, r0
 8007d28:	6019      	str	r1, [r3, #0]
 8007d2a:	e7d7      	b.n	8007cdc <_free_r+0x24>
 8007d2c:	d902      	bls.n	8007d34 <_free_r+0x7c>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	e7d3      	b.n	8007cdc <_free_r+0x24>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428a      	cmp	r2, r1
 8007d3a:	bf04      	itt	eq
 8007d3c:	6811      	ldreq	r1, [r2, #0]
 8007d3e:	6852      	ldreq	r2, [r2, #4]
 8007d40:	6062      	str	r2, [r4, #4]
 8007d42:	bf04      	itt	eq
 8007d44:	1809      	addeq	r1, r1, r0
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	605c      	str	r4, [r3, #4]
 8007d4a:	e7c7      	b.n	8007cdc <_free_r+0x24>
 8007d4c:	bd38      	pop	{r3, r4, r5, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000208 	.word	0x20000208

08007d54 <_malloc_r>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	1ccd      	adds	r5, r1, #3
 8007d58:	f025 0503 	bic.w	r5, r5, #3
 8007d5c:	3508      	adds	r5, #8
 8007d5e:	2d0c      	cmp	r5, #12
 8007d60:	bf38      	it	cc
 8007d62:	250c      	movcc	r5, #12
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	4606      	mov	r6, r0
 8007d68:	db01      	blt.n	8007d6e <_malloc_r+0x1a>
 8007d6a:	42a9      	cmp	r1, r5
 8007d6c:	d903      	bls.n	8007d76 <_malloc_r+0x22>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	2000      	movs	r0, #0
 8007d74:	bd70      	pop	{r4, r5, r6, pc}
 8007d76:	f000 f895 	bl	8007ea4 <__malloc_lock>
 8007d7a:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <_malloc_r+0xac>)
 8007d7c:	6814      	ldr	r4, [r2, #0]
 8007d7e:	4621      	mov	r1, r4
 8007d80:	b991      	cbnz	r1, 8007da8 <_malloc_r+0x54>
 8007d82:	4c20      	ldr	r4, [pc, #128]	; (8007e04 <_malloc_r+0xb0>)
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	b91b      	cbnz	r3, 8007d90 <_malloc_r+0x3c>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 f83d 	bl	8007e08 <_sbrk_r>
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f838 	bl	8007e08 <_sbrk_r>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d124      	bne.n	8007de6 <_malloc_r+0x92>
 8007d9c:	230c      	movs	r3, #12
 8007d9e:	6033      	str	r3, [r6, #0]
 8007da0:	4630      	mov	r0, r6
 8007da2:	f000 f880 	bl	8007ea6 <__malloc_unlock>
 8007da6:	e7e4      	b.n	8007d72 <_malloc_r+0x1e>
 8007da8:	680b      	ldr	r3, [r1, #0]
 8007daa:	1b5b      	subs	r3, r3, r5
 8007dac:	d418      	bmi.n	8007de0 <_malloc_r+0x8c>
 8007dae:	2b0b      	cmp	r3, #11
 8007db0:	d90f      	bls.n	8007dd2 <_malloc_r+0x7e>
 8007db2:	600b      	str	r3, [r1, #0]
 8007db4:	50cd      	str	r5, [r1, r3]
 8007db6:	18cc      	adds	r4, r1, r3
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 f874 	bl	8007ea6 <__malloc_unlock>
 8007dbe:	f104 000b 	add.w	r0, r4, #11
 8007dc2:	1d23      	adds	r3, r4, #4
 8007dc4:	f020 0007 	bic.w	r0, r0, #7
 8007dc8:	1ac3      	subs	r3, r0, r3
 8007dca:	d0d3      	beq.n	8007d74 <_malloc_r+0x20>
 8007dcc:	425a      	negs	r2, r3
 8007dce:	50e2      	str	r2, [r4, r3]
 8007dd0:	e7d0      	b.n	8007d74 <_malloc_r+0x20>
 8007dd2:	428c      	cmp	r4, r1
 8007dd4:	684b      	ldr	r3, [r1, #4]
 8007dd6:	bf16      	itet	ne
 8007dd8:	6063      	strne	r3, [r4, #4]
 8007dda:	6013      	streq	r3, [r2, #0]
 8007ddc:	460c      	movne	r4, r1
 8007dde:	e7eb      	b.n	8007db8 <_malloc_r+0x64>
 8007de0:	460c      	mov	r4, r1
 8007de2:	6849      	ldr	r1, [r1, #4]
 8007de4:	e7cc      	b.n	8007d80 <_malloc_r+0x2c>
 8007de6:	1cc4      	adds	r4, r0, #3
 8007de8:	f024 0403 	bic.w	r4, r4, #3
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d005      	beq.n	8007dfc <_malloc_r+0xa8>
 8007df0:	1a21      	subs	r1, r4, r0
 8007df2:	4630      	mov	r0, r6
 8007df4:	f000 f808 	bl	8007e08 <_sbrk_r>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d0cf      	beq.n	8007d9c <_malloc_r+0x48>
 8007dfc:	6025      	str	r5, [r4, #0]
 8007dfe:	e7db      	b.n	8007db8 <_malloc_r+0x64>
 8007e00:	20000208 	.word	0x20000208
 8007e04:	2000020c 	.word	0x2000020c

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4c06      	ldr	r4, [pc, #24]	; (8007e24 <_sbrk_r+0x1c>)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	f7f9 f88c 	bl	8000f30 <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20001b6c 	.word	0x20001b6c

08007e28 <__utoa>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <__utoa+0x78>)
 8007e2c:	b08b      	sub	sp, #44	; 0x2c
 8007e2e:	4605      	mov	r5, r0
 8007e30:	460c      	mov	r4, r1
 8007e32:	466e      	mov	r6, sp
 8007e34:	f103 0c20 	add.w	ip, r3, #32
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	4637      	mov	r7, r6
 8007e3e:	c703      	stmia	r7!, {r0, r1}
 8007e40:	3308      	adds	r3, #8
 8007e42:	4563      	cmp	r3, ip
 8007e44:	463e      	mov	r6, r7
 8007e46:	d1f7      	bne.n	8007e38 <__utoa+0x10>
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	791b      	ldrb	r3, [r3, #4]
 8007e4c:	713b      	strb	r3, [r7, #4]
 8007e4e:	1e93      	subs	r3, r2, #2
 8007e50:	2b22      	cmp	r3, #34	; 0x22
 8007e52:	6038      	str	r0, [r7, #0]
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	d904      	bls.n	8007e64 <__utoa+0x3c>
 8007e5a:	7023      	strb	r3, [r4, #0]
 8007e5c:	461c      	mov	r4, r3
 8007e5e:	4620      	mov	r0, r4
 8007e60:	b00b      	add	sp, #44	; 0x2c
 8007e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e64:	1e66      	subs	r6, r4, #1
 8007e66:	fbb5 f0f2 	udiv	r0, r5, r2
 8007e6a:	af0a      	add	r7, sp, #40	; 0x28
 8007e6c:	fb02 5510 	mls	r5, r2, r0, r5
 8007e70:	443d      	add	r5, r7
 8007e72:	1c59      	adds	r1, r3, #1
 8007e74:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007e78:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	b968      	cbnz	r0, 8007e9c <__utoa+0x74>
 8007e80:	5460      	strb	r0, [r4, r1]
 8007e82:	4423      	add	r3, r4
 8007e84:	4622      	mov	r2, r4
 8007e86:	1b19      	subs	r1, r3, r4
 8007e88:	1b10      	subs	r0, r2, r4
 8007e8a:	4281      	cmp	r1, r0
 8007e8c:	dde7      	ble.n	8007e5e <__utoa+0x36>
 8007e8e:	7811      	ldrb	r1, [r2, #0]
 8007e90:	7818      	ldrb	r0, [r3, #0]
 8007e92:	f802 0b01 	strb.w	r0, [r2], #1
 8007e96:	f803 1901 	strb.w	r1, [r3], #-1
 8007e9a:	e7f4      	b.n	8007e86 <__utoa+0x5e>
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e7e2      	b.n	8007e66 <__utoa+0x3e>
 8007ea0:	08007ff0 	.word	0x08007ff0

08007ea4 <__malloc_lock>:
 8007ea4:	4770      	bx	lr

08007ea6 <__malloc_unlock>:
 8007ea6:	4770      	bx	lr

08007ea8 <_init>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr

08007eb4 <_fini>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	bf00      	nop
 8007eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eba:	bc08      	pop	{r3}
 8007ebc:	469e      	mov	lr, r3
 8007ebe:	4770      	bx	lr
