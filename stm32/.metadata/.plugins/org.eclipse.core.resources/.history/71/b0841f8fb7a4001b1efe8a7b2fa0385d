#include "cracker.h"
#include "stm32f4xx_hal.h"

uint32_t transmit_recieve_byte(UART_HandleTypeDef *huart, uint8_t transmitedByte, expectedRxByte){
	/* Transmits a byte and checks if the response matches the desired one.*/
	uint8_t transmitBuffer[4];
	uint8_t recieveBuffer[4];

	transmitBuffer[0] = transmitedByte;
	if(HAL_UART_Transmit(&huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
		return TRANSMIT_ERR;
	}
	if(HAL_UART_Receive(&huart, recieveBuffer, 1, RX_TIMEOUT) != HAL_OK){
		return NO_RESPONSE;
	}
	if(recieveBuffer != expectedRxByte)
	{
		return INCORRECT_TARGET_RESPONSE;
	}
	return RX_TX_OK;
}

uint32_t init_target_connection(UART_HandleTypeDef *huart){
	/* This functions initializes the uart connection to target device.
	 * Returns 0 if communication is successfully established.*/

	uint8_t transmitBuffer[4];
	uint8_t recieveBuffer[4];
	uint32_t tx_rx_status;

	// Send the first 16x 0x00 bytes
	int i;
	for(i =0; i < 16; i++){
		if(HAL_UART_Transmit(&huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
			return TRANSMIT_ERR;
		}
		// Wait the required 200ms
		HAL_Delay(200);
	}

	// After sending another 0x00 the target should respond with a random byte
	if(HAL_UART_Transmit(&huart, transmitBuffer, 1, TX_TIMEOUT) != HAL_OK){
		return TRANSMIT_ERR;
	}
	if(HAL_UART_Receive(&huart, recieveBuffer, 1, RX_TIMEOUT) != HAL_OK){
		return NO_RESPONSE;
	}
	return CON_INIT_OK;
}

uint32_t set_baudrate(UART_HandleTypeDef *huart, uint32_t baudrate)
{
	// Initiate the baud rate change
	tx_rx_status = transmit_recieve_byte(&huart1, 0xB0, 0xB0);
	if(tx_rx_status != RX_TX_OK){
		return tx_rx_status;
	}

	switch(comm_speed){
		case 9600:
			tx_rx_status = transmit_recieve_byte(&huart1, 0xB0, 0xB0);
			break;

		case 19200:
			tx_rx_status = transmit_recieve_byte(&huart1, 0xB1, 0xB1);
			break;

		case 38400:
			tx_rx_status = transmit_recieve_byte(&huart1, 0xB2, 0xB2);
			break;

		case 57600:
			tx_rx_status = transmit_recieve_byte(&huart1, 0xB3, 0xB3);
			break;

		case 115200:
			tx_rx_status = transmit_recieve_byte(&huart1, 0xB4, 0xB4);
			break;

		default:
			return INCORRECT_BAUDRATE;
	}
	// Now change the uart baud rate
	  huart1.Init.BaudRate = baudrate;
	  if (HAL_UART_Init(&huart1) != HAL_OK){
		  return HW_BAUDRATE_CHANGE_ERR;
	  }
	  return BAUDRATE_CHANGE_OK;


}
